interactions:
- request:
    body: "--28bf03b05193cbabc37c60ab75e70527\r\nContent-Disposition: form-data; name=\"workflowSource\";
      filename=\"helloDockerHostname.wdl\"\r\nContent-Type: application/octet-stream\r\n\r\nversion
      1.0\n## This is a test workflow that returns the Docker image name and tag\n##
      and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
      HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"
      \ # Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
      Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
      = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
      {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
      completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
      = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
      {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n
      \   Boolean within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n
      \ parameter_meta {\n    docker_image: \"Docker image to run the task in (e.g.
      ubuntu:latest)\"\n  }\n}\n\n#### TASK DEFINITIONS\n\ntask GetStartTime {\n  command
      <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n
      \ }\n\n  runtime {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1
      GB\"\n  }\n}\n\ntask GetEndTime {\n  input {\n    File hostname_done  # Add
      dependency on Hostname completion\n  }\n\n  command <<<\n    date +%s.%N\n  >>>\n\n
      \ output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n
      \   docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
      ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n
      \ }\n\n  command <<<\n    # Calculate duration using awk for floating point
      arithmetic\n    duration=$(awk \"BEGIN {print ~{end_time} - ~{start_time}}\")\n
      \   echo \"$duration\" > duration.txt\n    \n    # Check if duration is less
      than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\" 'BEGIN {if (dur <
      120) exit 0; exit 1}'\n    if [ $? -eq 0 ]; then\n      echo \"true\" > within_limit.txt\n
      \   else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
      {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean within_limit
      = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker: \"ubuntu:20.04\"\n
      \   cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname {\n  input {\n    String
      expected_image\n    Float start_time  # Add start_time as input to create dependency\n
      \ }\n\n  command <<<\n    # Split expected image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo
      \"~{expected_image}\" | cut -d':' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\"
      | cut -d':' -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\"
      /etc/os-release | head -n1 | cut -d'=' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
      /etc/os-release | cut -d'\"' -f2)\n\n    # Compare image name\n    if [[ \"$CURRENT_IMAGE\"
      != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error: Expected Docker image
      $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit 1\n    fi\n\n    #
      Compare version/tag\n    if [[ \"$CURRENT_VERSION\" != \"$EXPECTED_TAG\" ]];
      then\n      echo \"Error: Expected version $EXPECTED_TAG but got: $CURRENT_VERSION\"\n
      \     exit 1\n    fi\n\n    echo \"Verified Docker Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n
      \   echo \"Expected Image: ~{expected_image}\"\n    echo \"Hostname: $(hostname)\"\n
      \ >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime {\n    cpu: 1\n
      \   memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
      {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n\r\n--28bf03b05193cbabc37c60ab75e70527\r\nContent-Disposition:
      form-data; name=\"workflowOptions\"; filename=\"options.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"workflow_failure_mode\": \"ContinueWhilePossible\",\n
      \   \"write_to_cache\": false,\n    \"read_from_cache\": false\n}\n\r\n--28bf03b05193cbabc37c60ab75e70527--\r\n"
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3904'
      content-type:
      - multipart/form-data; boundary=28bf03b05193cbabc37c60ab75e70527
      host:
      - gizmoj9.fhcrc.org:35205
      user-agent:
      - python-httpx/0.28.1
    method: POST
    uri: https://gizmoj9.fhcrc.org:35205/api/workflows/v1
  response:
    body:
      string: '{"id":"91a1e5c7-f437-4d19-9255-d7eb244f84ba","status":"Submitted"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '66'
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Mar 2025 23:18:57 GMT
      Server:
      - nginx/1.25.3
    status:
      code: 201
      message: Created
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '0'
      host:
      - gizmoj9.fhcrc.org:35205
      user-agent:
      - python-httpx/0.28.1
    method: POST
    uri: https://gizmoj9.fhcrc.org:35205/api/workflows/v1/91a1e5c7-f437-4d19-9255-d7eb244f84ba/abort
  response:
    body:
      string: '{"id":"91a1e5c7-f437-4d19-9255-d7eb244f84ba","status":"Aborted"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '64'
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Mar 2025 23:18:57 GMT
      Server:
      - nginx/1.25.3
    status:
      code: 200
      message: OK
version: 1
