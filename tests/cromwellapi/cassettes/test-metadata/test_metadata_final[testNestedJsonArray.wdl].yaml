interactions:
- request:
    body: "--707e0c7a133805f2762b1c2ca4c94e8f\r\nContent-Disposition: form-data; name=\"workflowSource\";
      filename=\"testNestedJsonArray.wdl\"\r\nContent-Type: application/octet-stream\r\n\r\nversion
      1.0\n\n# Define the structure for sampleDetails\nstruct sampleDetails {\n    String
      experimentType\n    String prepMethod\n    String tissueType\n}\n\n# Define
      the main structure for the single sample\nstruct singleSample {\n    String
      sampleName\n    String aboutSample\n    String sampleDescription\n    sampleDetails
      details  # Use the sampleDetails struct here\n}\n\nworkflow testNestedJsonArray
      {\n  input {\n    String cellNumber\n    Array[singleSample] batchOfSamples
      \ # Array of objects representing each sample\n  }\n\n  scatter (sample in batchOfSamples)
      {\n    call processSample {\n      input:\n        sample = sample,\n        base_file_name
      = sample.sampleName \n    }\n  }\n\n  output {\n    # Collect all the fields
      together from each sample into one list\n    Array[File] result_allSampleInfo
      = processSample.allSampleInfo\n  }\n}\n\ntask processSample {\n  input {\n    singleSample
      sample  # Use singleSample type, not Object\n    String base_file_name\n  }\n\n
      \ command <<<\n    # Format the sample information as a single string\n    allSampleInfo=\"~{sample.sampleName}
      | ~{sample.aboutSample} | ~{sample.sampleDescription} | ~{sample.details.experimentType}
      | ~{sample.details.prepMethod} | ~{sample.details.tissueType}\"\n    \n    #
      Output the concatenated sample info to a file\n    echo \"${allSampleInfo}\"
      > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output {\n    # Read all sample
      info from the file and output it as an Array of Strings\n    File allSampleInfo
      = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime {\n    docker: \"ubuntu:20.04\"\n
      \ }\n}\n\r\n--707e0c7a133805f2762b1c2ca4c94e8f\r\nContent-Disposition: form-data;
      name=\"workflowInputs\"; filename=\"inputs.json\"\r\nContent-Type: application/json\r\n\r\n{\n
      \ \"testNestedJsonArray.cellNumber\": \"10000\",\n  \"testNestedJsonArray.batchOfSamples\":
      [\n    {\n      \"sampleName\": \"Sample1\",\n      \"aboutSample\": \"This
      is sample 1\",\n      \"sampleDescription\": \"Description of sample 1: A detailed
      description of the first sample.\",\n      \"details\": {\n        \"experimentType\":
      \"RNA-Seq\",\n        \"prepMethod\": \"TruSeq\",\n        \"tissueType\": \"blood\"\n
      \     }\n    },\n    {\n      \"sampleName\": \"Sample2\",\n      \"aboutSample\":
      \"This is sample 2\",\n      \"sampleDescription\": \"Description of sample
      2: A detailed description of the second sample.\",\n      \"details\": {\n        \"experimentType\":
      \"DNA-Seq\",\n        \"prepMethod\": \"Nextera\",\n        \"tissueType\":
      \"tissue biopsy\"\n      }\n    },\n    {\n      \"sampleName\": \"Sample3\",\n
      \     \"aboutSample\": \"This is sample 3\",\n      \"sampleDescription\": \"Description
      of sample 3: A detailed description of the third sample.\",\n      \"details\":
      {\n        \"experimentType\": \"ChIP-Seq\",\n        \"prepMethod\": \"Epigenome\",\n
      \       \"tissueType\": \"brain\"\n      }\n    }\n  ]\n}\n\r\n--707e0c7a133805f2762b1c2ca4c94e8f\r\nContent-Disposition:
      form-data; name=\"workflowOptions\"; filename=\"options.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"workflow_failure_mode\": \"ContinueWhilePossible\",\n
      \   \"write_to_cache\": false,\n    \"read_from_cache\": false\n}\n\r\n--707e0c7a133805f2762b1c2ca4c94e8f--\r\n"
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3208'
      content-type:
      - multipart/form-data; boundary=707e0c7a133805f2762b1c2ca4c94e8f
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: POST
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1
  response:
    body:
      string: '{"id":"bc60af7a-b851-495a-b835-7661e66f46d3","status":"Submitted"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '66'
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:56:06 GMT
      Server:
      - nginx/1.25.3
    status:
      code: 201
      message: Created
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:56:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:56:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:56:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:56:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:56:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:56:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:56:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:56:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:56:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:56:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:57:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:57:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:57:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:57:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:57:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:57:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:57:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:57:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:57:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:57:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:57:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:57:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:58:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:58:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:58:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:58:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:58:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:58:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:58:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:58:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:58:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:58:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:58:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:58:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:59:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:59:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:59:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:59:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:59:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:59:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:59:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:59:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:59:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:59:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 17:59:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:00:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:00:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:00:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:00:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:00:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:00:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:00:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:00:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:00:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:00:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:00:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:00:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:01:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:01:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:01:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:01:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:01:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:01:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:01:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:01:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:01:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:01:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:01:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:01:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:02:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:02:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:02:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:02:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:02:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:02:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:02:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:02:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:02:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:02:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:02:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:02:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:03:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:03:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:03:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:03:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:03:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:03:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:03:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:03:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:03:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:03:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:03:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:03:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:04:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:04:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:04:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:04:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:04:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:04:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:04:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:04:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:04:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:04:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:04:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:04:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:05:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:05:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:05:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:05:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:05:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:05:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:05:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:05:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:05:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:05:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:05:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:06:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:06:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:06:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:06:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:06:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:06:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:06:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:06:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:06:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:06:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:06:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:06:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:07:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:07:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:07:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:07:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:07:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:07:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:07:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:07:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:07:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:07:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:07:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:07:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:08:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:08:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:08:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:08:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:08:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:08:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:08:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:08:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:08:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:08:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:08:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:08:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:09:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:09:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:09:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:09:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:09:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:09:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:09:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:09:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:09:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:09:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:09:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:09:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:10:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:10:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:10:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:10:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:10:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:10:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:10:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:10:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:10:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:10:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:10:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:11:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:11:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:11:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:11:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:11:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:11:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:11:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:11:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:11:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:11:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:11:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:11:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:12:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:12:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:12:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:12:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:12:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:12:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:12:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:12:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:12:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:12:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:12:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:12:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:13:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:13:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:13:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:13:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:13:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:13:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:13:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:13:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:13:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:13:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:13:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:13:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:14:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:14:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:14:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:14:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:14:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:14:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:14:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# Define the structure
        for sampleDetails\nstruct sampleDetails {\n    String experimentType\n    String
        prepMethod\n    String tissueType\n}\n\n# Define the main structure for the
        single sample\nstruct singleSample {\n    String sampleName\n    String aboutSample\n    String
        sampleDescription\n    sampleDetails details  # Use the sampleDetails struct
        here\n}\n\nworkflow testNestedJsonArray {\n  input {\n    String cellNumber\n    Array[singleSample]
        batchOfSamples  # Array of objects representing each sample\n  }\n\n  scatter
        (sample in batchOfSamples) {\n    call processSample {\n      input:\n        sample
        = sample,\n        base_file_name = sample.sampleName \n    }\n  }\n\n  output
        {\n    # Collect all the fields together from each sample into one list\n    Array[File]
        result_allSampleInfo = processSample.allSampleInfo\n  }\n}\n\ntask processSample
        {\n  input {\n    singleSample sample  # Use singleSample type, not Object\n    String
        base_file_name\n  }\n\n  command <<<\n    # Format the sample information
        as a single string\n    allSampleInfo=\"~{sample.sampleName} | ~{sample.aboutSample}
        | ~{sample.sampleDescription} | ~{sample.details.experimentType} | ~{sample.details.prepMethod}
        | ~{sample.details.tissueType}\"\n    \n    # Output the concatenated sample
        info to a file\n    echo \"${allSampleInfo}\" > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output
        {\n    # Read all sample info from the file and output it as an Array of Strings\n    File
        allSampleInfo = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:14:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2925'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"testNestedJsonArray","workflowProcessingEvents":[{"cromwellId":"cromid-020f250","description":"PickedUp","timestamp":"2025-05-19T18:14:37.905Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# Define the structure for sampleDetails\nstruct sampleDetails {\n    String
        experimentType\n    String prepMethod\n    String tissueType\n}\n\n# Define
        the main structure for the single sample\nstruct singleSample {\n    String
        sampleName\n    String aboutSample\n    String sampleDescription\n    sampleDetails
        details  # Use the sampleDetails struct here\n}\n\nworkflow testNestedJsonArray
        {\n  input {\n    String cellNumber\n    Array[singleSample] batchOfSamples  #
        Array of objects representing each sample\n  }\n\n  scatter (sample in batchOfSamples)
        {\n    call processSample {\n      input:\n        sample = sample,\n        base_file_name
        = sample.sampleName \n    }\n  }\n\n  output {\n    # Collect all the fields
        together from each sample into one list\n    Array[File] result_allSampleInfo
        = processSample.allSampleInfo\n  }\n}\n\ntask processSample {\n  input {\n    singleSample
        sample  # Use singleSample type, not Object\n    String base_file_name\n  }\n\n  command
        <<<\n    # Format the sample information as a single string\n    allSampleInfo=\"~{sample.sampleName}
        | ~{sample.aboutSample} | ~{sample.sampleDescription} | ~{sample.details.experimentType}
        | ~{sample.details.prepMethod} | ~{sample.details.tissueType}\"\n    \n    #
        Output the concatenated sample info to a file\n    echo \"${allSampleInfo}\"
        > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output {\n    # Read all
        sample info from the file and output it as an Array of Strings\n    File allSampleInfo
        = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/bc60af7a-b851-495a-b835-7661e66f46d3","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-05-19T18:14:37.905Z","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{"batchOfSamples":[{"aboutSample":"This
        is sample 1","sampleName":"Sample1","sampleDescription":"Description of sample
        1: A detailed description of the first sample.","details":{"prepMethod":"TruSeq","experimentType":"RNA-Seq","tissueType":"blood"}},{"aboutSample":"This
        is sample 2","sampleName":"Sample2","sampleDescription":"Description of sample
        2: A detailed description of the second sample.","details":{"prepMethod":"Nextera","experimentType":"DNA-Seq","tissueType":"tissue
        biopsy"}},{"aboutSample":"This is sample 3","sampleName":"Sample3","sampleDescription":"Description
        of sample 3: A detailed description of the third sample.","details":{"prepMethod":"Epigenome","experimentType":"ChIP-Seq","tissueType":"brain"}}],"cellNumber":"10000"},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:14:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4085'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"testNestedJsonArray","workflowProcessingEvents":[{"cromwellId":"cromid-020f250","description":"PickedUp","timestamp":"2025-05-19T18:14:37.905Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# Define the structure for sampleDetails\nstruct sampleDetails {\n    String
        experimentType\n    String prepMethod\n    String tissueType\n}\n\n# Define
        the main structure for the single sample\nstruct singleSample {\n    String
        sampleName\n    String aboutSample\n    String sampleDescription\n    sampleDetails
        details  # Use the sampleDetails struct here\n}\n\nworkflow testNestedJsonArray
        {\n  input {\n    String cellNumber\n    Array[singleSample] batchOfSamples  #
        Array of objects representing each sample\n  }\n\n  scatter (sample in batchOfSamples)
        {\n    call processSample {\n      input:\n        sample = sample,\n        base_file_name
        = sample.sampleName \n    }\n  }\n\n  output {\n    # Collect all the fields
        together from each sample into one list\n    Array[File] result_allSampleInfo
        = processSample.allSampleInfo\n  }\n}\n\ntask processSample {\n  input {\n    singleSample
        sample  # Use singleSample type, not Object\n    String base_file_name\n  }\n\n  command
        <<<\n    # Format the sample information as a single string\n    allSampleInfo=\"~{sample.sampleName}
        | ~{sample.aboutSample} | ~{sample.sampleDescription} | ~{sample.details.experimentType}
        | ~{sample.details.prepMethod} | ~{sample.details.tissueType}\"\n    \n    #
        Output the concatenated sample info to a file\n    echo \"${allSampleInfo}\"
        > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output {\n    # Read all
        sample info from the file and output it as an Array of Strings\n    File allSampleInfo
        = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/bc60af7a-b851-495a-b835-7661e66f46d3","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-05-19T18:14:37.905Z","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{"batchOfSamples":[{"aboutSample":"This
        is sample 1","sampleName":"Sample1","sampleDescription":"Description of sample
        1: A detailed description of the first sample.","details":{"prepMethod":"TruSeq","experimentType":"RNA-Seq","tissueType":"blood"}},{"aboutSample":"This
        is sample 2","sampleName":"Sample2","sampleDescription":"Description of sample
        2: A detailed description of the second sample.","details":{"prepMethod":"Nextera","experimentType":"DNA-Seq","tissueType":"tissue
        biopsy"}},{"aboutSample":"This is sample 3","sampleName":"Sample3","sampleDescription":"Description
        of sample 3: A detailed description of the third sample.","details":{"prepMethod":"Epigenome","experimentType":"ChIP-Seq","tissueType":"brain"}}],"cellNumber":"10000"},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:14:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4085'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"testNestedJsonArray","workflowProcessingEvents":[{"cromwellId":"cromid-020f250","description":"PickedUp","timestamp":"2025-05-19T18:14:37.905Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# Define the structure for sampleDetails\nstruct sampleDetails {\n    String
        experimentType\n    String prepMethod\n    String tissueType\n}\n\n# Define
        the main structure for the single sample\nstruct singleSample {\n    String
        sampleName\n    String aboutSample\n    String sampleDescription\n    sampleDetails
        details  # Use the sampleDetails struct here\n}\n\nworkflow testNestedJsonArray
        {\n  input {\n    String cellNumber\n    Array[singleSample] batchOfSamples  #
        Array of objects representing each sample\n  }\n\n  scatter (sample in batchOfSamples)
        {\n    call processSample {\n      input:\n        sample = sample,\n        base_file_name
        = sample.sampleName \n    }\n  }\n\n  output {\n    # Collect all the fields
        together from each sample into one list\n    Array[File] result_allSampleInfo
        = processSample.allSampleInfo\n  }\n}\n\ntask processSample {\n  input {\n    singleSample
        sample  # Use singleSample type, not Object\n    String base_file_name\n  }\n\n  command
        <<<\n    # Format the sample information as a single string\n    allSampleInfo=\"~{sample.sampleName}
        | ~{sample.aboutSample} | ~{sample.sampleDescription} | ~{sample.details.experimentType}
        | ~{sample.details.prepMethod} | ~{sample.details.tissueType}\"\n    \n    #
        Output the concatenated sample info to a file\n    echo \"${allSampleInfo}\"
        > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output {\n    # Read all
        sample info from the file and output it as an Array of Strings\n    File allSampleInfo
        = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/bc60af7a-b851-495a-b835-7661e66f46d3","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-05-19T18:14:37.905Z","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{"batchOfSamples":[{"aboutSample":"This
        is sample 1","sampleName":"Sample1","sampleDescription":"Description of sample
        1: A detailed description of the first sample.","details":{"prepMethod":"TruSeq","experimentType":"RNA-Seq","tissueType":"blood"}},{"aboutSample":"This
        is sample 2","sampleName":"Sample2","sampleDescription":"Description of sample
        2: A detailed description of the second sample.","details":{"prepMethod":"Nextera","experimentType":"DNA-Seq","tissueType":"tissue
        biopsy"}},{"aboutSample":"This is sample 3","sampleName":"Sample3","sampleDescription":"Description
        of sample 3: A detailed description of the third sample.","details":{"prepMethod":"Epigenome","experimentType":"ChIP-Seq","tissueType":"brain"}}],"cellNumber":"10000"},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:14:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4085'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"testNestedJsonArray","workflowProcessingEvents":[{"cromwellId":"cromid-020f250","description":"PickedUp","timestamp":"2025-05-19T18:14:37.905Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# Define the structure for sampleDetails\nstruct sampleDetails {\n    String
        experimentType\n    String prepMethod\n    String tissueType\n}\n\n# Define
        the main structure for the single sample\nstruct singleSample {\n    String
        sampleName\n    String aboutSample\n    String sampleDescription\n    sampleDetails
        details  # Use the sampleDetails struct here\n}\n\nworkflow testNestedJsonArray
        {\n  input {\n    String cellNumber\n    Array[singleSample] batchOfSamples  #
        Array of objects representing each sample\n  }\n\n  scatter (sample in batchOfSamples)
        {\n    call processSample {\n      input:\n        sample = sample,\n        base_file_name
        = sample.sampleName \n    }\n  }\n\n  output {\n    # Collect all the fields
        together from each sample into one list\n    Array[File] result_allSampleInfo
        = processSample.allSampleInfo\n  }\n}\n\ntask processSample {\n  input {\n    singleSample
        sample  # Use singleSample type, not Object\n    String base_file_name\n  }\n\n  command
        <<<\n    # Format the sample information as a single string\n    allSampleInfo=\"~{sample.sampleName}
        | ~{sample.aboutSample} | ~{sample.sampleDescription} | ~{sample.details.experimentType}
        | ~{sample.details.prepMethod} | ~{sample.details.tissueType}\"\n    \n    #
        Output the concatenated sample info to a file\n    echo \"${allSampleInfo}\"
        > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output {\n    # Read all
        sample info from the file and output it as an Array of Strings\n    File allSampleInfo
        = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/bc60af7a-b851-495a-b835-7661e66f46d3","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-05-19T18:14:37.905Z","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{"batchOfSamples":[{"aboutSample":"This
        is sample 1","sampleName":"Sample1","sampleDescription":"Description of sample
        1: A detailed description of the first sample.","details":{"prepMethod":"TruSeq","experimentType":"RNA-Seq","tissueType":"blood"}},{"aboutSample":"This
        is sample 2","sampleName":"Sample2","sampleDescription":"Description of sample
        2: A detailed description of the second sample.","details":{"prepMethod":"Nextera","experimentType":"DNA-Seq","tissueType":"tissue
        biopsy"}},{"aboutSample":"This is sample 3","sampleName":"Sample3","sampleDescription":"Description
        of sample 3: A detailed description of the third sample.","details":{"prepMethod":"Epigenome","experimentType":"ChIP-Seq","tissueType":"brain"}}],"cellNumber":"10000"},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:14:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4085'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"testNestedJsonArray","workflowProcessingEvents":[{"cromwellId":"cromid-020f250","description":"PickedUp","timestamp":"2025-05-19T18:14:37.905Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# Define the structure for sampleDetails\nstruct sampleDetails {\n    String
        experimentType\n    String prepMethod\n    String tissueType\n}\n\n# Define
        the main structure for the single sample\nstruct singleSample {\n    String
        sampleName\n    String aboutSample\n    String sampleDescription\n    sampleDetails
        details  # Use the sampleDetails struct here\n}\n\nworkflow testNestedJsonArray
        {\n  input {\n    String cellNumber\n    Array[singleSample] batchOfSamples  #
        Array of objects representing each sample\n  }\n\n  scatter (sample in batchOfSamples)
        {\n    call processSample {\n      input:\n        sample = sample,\n        base_file_name
        = sample.sampleName \n    }\n  }\n\n  output {\n    # Collect all the fields
        together from each sample into one list\n    Array[File] result_allSampleInfo
        = processSample.allSampleInfo\n  }\n}\n\ntask processSample {\n  input {\n    singleSample
        sample  # Use singleSample type, not Object\n    String base_file_name\n  }\n\n  command
        <<<\n    # Format the sample information as a single string\n    allSampleInfo=\"~{sample.sampleName}
        | ~{sample.aboutSample} | ~{sample.sampleDescription} | ~{sample.details.experimentType}
        | ~{sample.details.prepMethod} | ~{sample.details.tissueType}\"\n    \n    #
        Output the concatenated sample info to a file\n    echo \"${allSampleInfo}\"
        > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output {\n    # Read all
        sample info from the file and output it as an Array of Strings\n    File allSampleInfo
        = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/bc60af7a-b851-495a-b835-7661e66f46d3","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-05-19T18:14:37.905Z","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{"batchOfSamples":[{"aboutSample":"This
        is sample 1","sampleName":"Sample1","sampleDescription":"Description of sample
        1: A detailed description of the first sample.","details":{"prepMethod":"TruSeq","experimentType":"RNA-Seq","tissueType":"blood"}},{"aboutSample":"This
        is sample 2","sampleName":"Sample2","sampleDescription":"Description of sample
        2: A detailed description of the second sample.","details":{"prepMethod":"Nextera","experimentType":"DNA-Seq","tissueType":"tissue
        biopsy"}},{"aboutSample":"This is sample 3","sampleName":"Sample3","sampleDescription":"Description
        of sample 3: A detailed description of the third sample.","details":{"prepMethod":"Epigenome","experimentType":"ChIP-Seq","tissueType":"brain"}}],"cellNumber":"10000"},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:15:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4085'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"testNestedJsonArray","workflowProcessingEvents":[{"cromwellId":"cromid-020f250","description":"PickedUp","timestamp":"2025-05-19T18:14:37.905Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# Define the structure for sampleDetails\nstruct sampleDetails {\n    String
        experimentType\n    String prepMethod\n    String tissueType\n}\n\n# Define
        the main structure for the single sample\nstruct singleSample {\n    String
        sampleName\n    String aboutSample\n    String sampleDescription\n    sampleDetails
        details  # Use the sampleDetails struct here\n}\n\nworkflow testNestedJsonArray
        {\n  input {\n    String cellNumber\n    Array[singleSample] batchOfSamples  #
        Array of objects representing each sample\n  }\n\n  scatter (sample in batchOfSamples)
        {\n    call processSample {\n      input:\n        sample = sample,\n        base_file_name
        = sample.sampleName \n    }\n  }\n\n  output {\n    # Collect all the fields
        together from each sample into one list\n    Array[File] result_allSampleInfo
        = processSample.allSampleInfo\n  }\n}\n\ntask processSample {\n  input {\n    singleSample
        sample  # Use singleSample type, not Object\n    String base_file_name\n  }\n\n  command
        <<<\n    # Format the sample information as a single string\n    allSampleInfo=\"~{sample.sampleName}
        | ~{sample.aboutSample} | ~{sample.sampleDescription} | ~{sample.details.experimentType}
        | ~{sample.details.prepMethod} | ~{sample.details.tissueType}\"\n    \n    #
        Output the concatenated sample info to a file\n    echo \"${allSampleInfo}\"
        > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output {\n    # Read all
        sample info from the file and output it as an Array of Strings\n    File allSampleInfo
        = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/bc60af7a-b851-495a-b835-7661e66f46d3","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-05-19T18:14:37.905Z","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{"batchOfSamples":[{"aboutSample":"This
        is sample 1","sampleName":"Sample1","sampleDescription":"Description of sample
        1: A detailed description of the first sample.","details":{"prepMethod":"TruSeq","experimentType":"RNA-Seq","tissueType":"blood"}},{"aboutSample":"This
        is sample 2","sampleName":"Sample2","sampleDescription":"Description of sample
        2: A detailed description of the second sample.","details":{"prepMethod":"Nextera","experimentType":"DNA-Seq","tissueType":"tissue
        biopsy"}},{"aboutSample":"This is sample 3","sampleName":"Sample3","sampleDescription":"Description
        of sample 3: A detailed description of the third sample.","details":{"prepMethod":"Epigenome","experimentType":"ChIP-Seq","tissueType":"brain"}}],"cellNumber":"10000"},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:15:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4085'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"testNestedJsonArray","workflowProcessingEvents":[{"cromwellId":"cromid-020f250","description":"PickedUp","timestamp":"2025-05-19T18:14:37.905Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# Define the structure for sampleDetails\nstruct sampleDetails {\n    String
        experimentType\n    String prepMethod\n    String tissueType\n}\n\n# Define
        the main structure for the single sample\nstruct singleSample {\n    String
        sampleName\n    String aboutSample\n    String sampleDescription\n    sampleDetails
        details  # Use the sampleDetails struct here\n}\n\nworkflow testNestedJsonArray
        {\n  input {\n    String cellNumber\n    Array[singleSample] batchOfSamples  #
        Array of objects representing each sample\n  }\n\n  scatter (sample in batchOfSamples)
        {\n    call processSample {\n      input:\n        sample = sample,\n        base_file_name
        = sample.sampleName \n    }\n  }\n\n  output {\n    # Collect all the fields
        together from each sample into one list\n    Array[File] result_allSampleInfo
        = processSample.allSampleInfo\n  }\n}\n\ntask processSample {\n  input {\n    singleSample
        sample  # Use singleSample type, not Object\n    String base_file_name\n  }\n\n  command
        <<<\n    # Format the sample information as a single string\n    allSampleInfo=\"~{sample.sampleName}
        | ~{sample.aboutSample} | ~{sample.sampleDescription} | ~{sample.details.experimentType}
        | ~{sample.details.prepMethod} | ~{sample.details.tissueType}\"\n    \n    #
        Output the concatenated sample info to a file\n    echo \"${allSampleInfo}\"
        > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output {\n    # Read all
        sample info from the file and output it as an Array of Strings\n    File allSampleInfo
        = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/bc60af7a-b851-495a-b835-7661e66f46d3","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-05-19T18:14:37.905Z","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{"batchOfSamples":[{"aboutSample":"This
        is sample 1","sampleName":"Sample1","sampleDescription":"Description of sample
        1: A detailed description of the first sample.","details":{"prepMethod":"TruSeq","experimentType":"RNA-Seq","tissueType":"blood"}},{"aboutSample":"This
        is sample 2","sampleName":"Sample2","sampleDescription":"Description of sample
        2: A detailed description of the second sample.","details":{"prepMethod":"Nextera","experimentType":"DNA-Seq","tissueType":"tissue
        biopsy"}},{"aboutSample":"This is sample 3","sampleName":"Sample3","sampleDescription":"Description
        of sample 3: A detailed description of the third sample.","details":{"prepMethod":"Epigenome","experimentType":"ChIP-Seq","tissueType":"brain"}}],"cellNumber":"10000"},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:15:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4085'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"testNestedJsonArray","workflowProcessingEvents":[{"cromwellId":"cromid-020f250","description":"PickedUp","timestamp":"2025-05-19T18:14:37.905Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# Define the structure for sampleDetails\nstruct sampleDetails {\n    String
        experimentType\n    String prepMethod\n    String tissueType\n}\n\n# Define
        the main structure for the single sample\nstruct singleSample {\n    String
        sampleName\n    String aboutSample\n    String sampleDescription\n    sampleDetails
        details  # Use the sampleDetails struct here\n}\n\nworkflow testNestedJsonArray
        {\n  input {\n    String cellNumber\n    Array[singleSample] batchOfSamples  #
        Array of objects representing each sample\n  }\n\n  scatter (sample in batchOfSamples)
        {\n    call processSample {\n      input:\n        sample = sample,\n        base_file_name
        = sample.sampleName \n    }\n  }\n\n  output {\n    # Collect all the fields
        together from each sample into one list\n    Array[File] result_allSampleInfo
        = processSample.allSampleInfo\n  }\n}\n\ntask processSample {\n  input {\n    singleSample
        sample  # Use singleSample type, not Object\n    String base_file_name\n  }\n\n  command
        <<<\n    # Format the sample information as a single string\n    allSampleInfo=\"~{sample.sampleName}
        | ~{sample.aboutSample} | ~{sample.sampleDescription} | ~{sample.details.experimentType}
        | ~{sample.details.prepMethod} | ~{sample.details.tissueType}\"\n    \n    #
        Output the concatenated sample info to a file\n    echo \"${allSampleInfo}\"
        > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output {\n    # Read all
        sample info from the file and output it as an Array of Strings\n    File allSampleInfo
        = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/bc60af7a-b851-495a-b835-7661e66f46d3","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-05-19T18:14:37.905Z","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{"batchOfSamples":[{"aboutSample":"This
        is sample 1","sampleName":"Sample1","sampleDescription":"Description of sample
        1: A detailed description of the first sample.","details":{"prepMethod":"TruSeq","experimentType":"RNA-Seq","tissueType":"blood"}},{"aboutSample":"This
        is sample 2","sampleName":"Sample2","sampleDescription":"Description of sample
        2: A detailed description of the second sample.","details":{"prepMethod":"Nextera","experimentType":"DNA-Seq","tissueType":"tissue
        biopsy"}},{"aboutSample":"This is sample 3","sampleName":"Sample3","sampleDescription":"Description
        of sample 3: A detailed description of the third sample.","details":{"prepMethod":"Epigenome","experimentType":"ChIP-Seq","tissueType":"brain"}}],"cellNumber":"10000"},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:15:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4085'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok79.fhcrc.org:45745
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok79.fhcrc.org:45745/api/workflows/v1/bc60af7a-b851-495a-b835-7661e66f46d3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"testNestedJsonArray","workflowProcessingEvents":[{"cromwellId":"cromid-020f250","description":"Finished","timestamp":"2025-05-19T18:15:20.777Z","cromwellVersion":"87"},{"cromwellId":"cromid-020f250","description":"PickedUp","timestamp":"2025-05-19T18:14:37.905Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# Define the structure for sampleDetails\nstruct sampleDetails {\n    String
        experimentType\n    String prepMethod\n    String tissueType\n}\n\n# Define
        the main structure for the single sample\nstruct singleSample {\n    String
        sampleName\n    String aboutSample\n    String sampleDescription\n    sampleDetails
        details  # Use the sampleDetails struct here\n}\n\nworkflow testNestedJsonArray
        {\n  input {\n    String cellNumber\n    Array[singleSample] batchOfSamples  #
        Array of objects representing each sample\n  }\n\n  scatter (sample in batchOfSamples)
        {\n    call processSample {\n      input:\n        sample = sample,\n        base_file_name
        = sample.sampleName \n    }\n  }\n\n  output {\n    # Collect all the fields
        together from each sample into one list\n    Array[File] result_allSampleInfo
        = processSample.allSampleInfo\n  }\n}\n\ntask processSample {\n  input {\n    singleSample
        sample  # Use singleSample type, not Object\n    String base_file_name\n  }\n\n  command
        <<<\n    # Format the sample information as a single string\n    allSampleInfo=\"~{sample.sampleName}
        | ~{sample.aboutSample} | ~{sample.sampleDescription} | ~{sample.details.experimentType}
        | ~{sample.details.prepMethod} | ~{sample.details.tissueType}\"\n    \n    #
        Output the concatenated sample info to a file\n    echo \"${allSampleInfo}\"
        > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output {\n    # Read all
        sample info from the file and output it as an Array of Strings\n    File allSampleInfo
        = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{"testNestedJsonArray.result_allSampleInfo":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/bc60af7a-b851-495a-b835-7661e66f46d3/call-processSample/shard-0/execution/Sample1.allSampleInfo.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/bc60af7a-b851-495a-b835-7661e66f46d3/call-processSample/shard-1/execution/Sample2.allSampleInfo.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/bc60af7a-b851-495a-b835-7661e66f46d3/call-processSample/shard-2/execution/Sample3.allSampleInfo.txt"]},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/bc60af7a-b851-495a-b835-7661e66f46d3","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-05-19T18:15:20.777Z","start":"2025-05-19T18:14:37.905Z","id":"bc60af7a-b851-495a-b835-7661e66f46d3","inputs":{"batchOfSamples":[{"aboutSample":"This
        is sample 1","sampleName":"Sample1","sampleDescription":"Description of sample
        1: A detailed description of the first sample.","details":{"prepMethod":"TruSeq","experimentType":"RNA-Seq","tissueType":"blood"}},{"aboutSample":"This
        is sample 2","sampleName":"Sample2","sampleDescription":"Description of sample
        2: A detailed description of the second sample.","details":{"prepMethod":"Nextera","experimentType":"DNA-Seq","tissueType":"tissue
        biopsy"}},{"aboutSample":"This is sample 3","sampleName":"Sample3","sampleDescription":"Description
        of sample 3: A detailed description of the third sample.","details":{"prepMethod":"Epigenome","experimentType":"ChIP-Seq","tissueType":"brain"}}],"cellNumber":"10000"},"labels":{"cromwell-workflow-id":"cromwell-bc60af7a-b851-495a-b835-7661e66f46d3"},"submission":"2025-05-19T17:56:06.914Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 19 May 2025 18:15:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4808'
    status:
      code: 200
      message: OK
version: 1
