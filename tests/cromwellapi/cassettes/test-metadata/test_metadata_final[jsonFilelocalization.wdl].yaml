interactions:
- request:
    body: "--a8ec948520a6199290c93c40cbadd874\r\nContent-Disposition: form-data; name=\"workflowSource\";
      filename=\"jsonFilelocalization.wdl\"\r\nContent-Type: application/octet-stream\r\n\r\nversion
      1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
      required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
      optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
      to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n
      \     required_remote = required_json_remote,\n      optional_remote = optional_json_remote,\n
      \     optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
      {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
      {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
      optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir -p
      copied_jsons\n    \n    # Copy the required local and remote files\n    cp ~{required_remote}
      copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename
      ~{optional_remote})\n    cp ~{optional_remote_not_provided} copied_jsons/$(basename
      ~{optional_remote_not_provided})\n    \n  >>>\n\n  output {\n    Array[File]
      out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime {\n    docker: \"ubuntu:20.04\"\n
      \ }\n}\n\r\n--a8ec948520a6199290c93c40cbadd874\r\nContent-Disposition: form-data;
      name=\"workflowInputs\"; filename=\"inputs.json\"\r\nContent-Type: application/json\r\n\r\n{\n
      \ \"jsonFileLocalization.required_json_remote\": \"/fh/fast/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\",\n
      \ \"jsonFileLocalization.optional_json_remote\": \"/fh/fast/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\"\n}\n\r\n--a8ec948520a6199290c93c40cbadd874\r\nContent-Disposition:
      form-data; name=\"workflowOptions\"; filename=\"options.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"workflow_failure_mode\": \"ContinueWhilePossible\",\n
      \   \"write_to_cache\": false,\n    \"read_from_cache\": false\n}\n\r\n--a8ec948520a6199290c93c40cbadd874--\r\n"
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2031'
      content-type:
      - multipart/form-data; boundary=a8ec948520a6199290c93c40cbadd874
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: POST
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1
  response:
    body:
      string: '{"id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","status":"Submitted"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '66'
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:25:57 GMT
      Server:
      - nginx/1.25.3
    status:
      code: 201
      message: Created
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:26:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:26:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:26:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:26:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:26:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:26:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:26:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:26:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:26:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:26:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:26:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:26:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:27:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:27:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:27:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:27:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:27:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:27:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:27:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:27:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:27:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:27:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:27:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:27:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:28:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:28:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:28:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:28:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:28:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:28:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:28:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:28:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:28:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:28:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:28:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:29:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:29:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:29:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:29:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:29:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:29:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:29:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:29:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:29:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:29:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:29:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:29:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:30:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:30:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:30:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:30:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:30:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:30:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:30:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:30:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:30:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:30:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:30:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:30:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:31:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:31:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:31:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:31:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:31:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:31:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:31:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:31:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:31:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:31:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:31:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:31:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:32:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:32:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:32:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:32:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:32:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:32:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:32:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:32:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:32:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:32:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:32:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:32:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:33:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:33:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:33:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:33:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:33:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:33:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:33:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:33:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:33:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:33:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:33:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:33:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:34:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:34:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:34:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:34:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:34:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:34:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:34:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:34:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:34:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:34:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:34:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:35:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:35:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:35:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:35:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:35:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:35:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:35:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:35:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:35:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:35:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:35:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:35:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:36:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:36:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:36:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:36:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:36:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:36:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:36:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:36:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:36:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:36:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:36:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:36:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:37:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:37:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:37:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:37:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:37:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:37:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:37:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:37:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:37:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:37:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:37:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:37:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:38:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:38:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:38:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:38:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:38:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:38:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:38:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:38:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:38:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:38:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:38:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:38:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:39:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:39:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:39:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:39:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:39:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:39:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:39:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:39:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:39:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:39:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:39:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:40:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:40:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:40:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:40:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:40:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:40:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:40:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:40:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:40:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:40:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:40:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:40:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:41:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:41:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:41:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:41:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:41:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:41:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:41:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:41:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:41:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:41:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:41:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:41:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:42:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:42:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:42:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:42:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:42:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:42:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:42:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:42:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:42:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:42:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:42:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:42:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:43:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:43:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:43:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:43:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:43:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:43:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:43:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:43:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:43:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:43:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:43:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:43:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:44:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:44:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:44:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:44:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:44:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:44:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:44:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:44:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:44:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:44:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:44:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:44:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:45:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:45:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:45:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:45:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:45:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:45:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:45:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:45:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:45:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:45:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:45:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:46:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:46:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:46:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:46:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:46:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:46:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:46:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:46:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:46:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:46:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:46:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:46:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:47:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:47:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:47:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:47:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:47:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:47:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:47:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b0c3559","description":"PickedUp","timestamp":"2025-09-21T03:47:30.392Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-21T03:47:30.393Z","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{"required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:47:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2565'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b0c3559","description":"PickedUp","timestamp":"2025-09-21T03:47:30.392Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-21T03:47:30.393Z","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{"required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:47:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2565'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b0c3559","description":"PickedUp","timestamp":"2025-09-21T03:47:30.392Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-21T03:47:30.393Z","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{"required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:47:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2565'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b0c3559","description":"PickedUp","timestamp":"2025-09-21T03:47:30.392Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-21T03:47:30.393Z","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{"required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:47:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2565'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b0c3559","description":"PickedUp","timestamp":"2025-09-21T03:47:30.392Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-21T03:47:30.393Z","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{"required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:47:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2565'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b0c3559","description":"PickedUp","timestamp":"2025-09-21T03:47:30.392Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-21T03:47:30.393Z","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{"required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:48:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2565'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b0c3559","description":"PickedUp","timestamp":"2025-09-21T03:47:30.392Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-21T03:47:30.393Z","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{"required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:48:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2565'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b0c3559","description":"PickedUp","timestamp":"2025-09-21T03:47:30.392Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-21T03:47:30.393Z","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{"required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:48:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2565'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b0c3559","description":"PickedUp","timestamp":"2025-09-21T03:47:30.392Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-21T03:47:30.393Z","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{"required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:48:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2565'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok111.fhcrc.org:34399
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok111.fhcrc.org:34399/api/workflows/v1/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b0c3559","description":"PickedUp","timestamp":"2025-09-21T03:47:30.392Z","cromwellVersion":"87"},{"cromwellId":"cromid-b0c3559","description":"Finished","timestamp":"2025-09-21T03:48:16.334Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{"jsonFileLocalization.copied_files":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/call-CopyJsons/execution/glob-f9e378b03f46c0bec01ac2b6abc5f8ec/local_remote_optional_file_2.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a/call-CopyJsons/execution/glob-f9e378b03f46c0bec01ac2b6abc5f8ec/local_remote_required_file_2.txt"]},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-09-21T03:48:16.334Z","start":"2025-09-21T03:47:30.393Z","id":"4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a","inputs":{"required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-4abe7ef4-baa7-40d7-9e4a-7173ecd1d04a"},"submission":"2025-09-21T03:25:57.254Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 21 Sep 2025 03:48:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3174'
    status:
      code: 200
      message: OK
version: 1
