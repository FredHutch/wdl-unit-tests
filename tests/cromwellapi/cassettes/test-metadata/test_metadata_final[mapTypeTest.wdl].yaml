interactions:
- request:
    body: "--9f614d319bd26751348b3ac10d8f186a\r\nContent-Disposition: form-data; name=\"workflowSource\";
      filename=\"mapTypeTest.wdl\"\r\nContent-Type: application/octet-stream\r\n\r\nversion
      1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n
      \       Array[String] samples\n        Map[String, String] sample_metadata\n
      \       Map[String, Int] read_lengths\n\n        # New test inputs\n        Map[String,
      Map[String, String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
      \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
      {\n                \"sample3\": \"normal\",\n                \"sample4\": \"tumor\"\n
      \           }\n        }\n        # We need to provide keys as arrays since
      WDL 1.0 doesn't have a keys() function\n        Array[String] patient_ids =
      [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map processing\n    scatter
      (patient_id in patient_ids) {\n        call process_nested_map {\n            input:\n
      \               patient_id = patient_id,\n                patient_data = nested_map[patient_id],\n
      \               # We need to provide the sample names explicitly\n                samples_for_patient
      = if patient_id == \"patient1\" then [\"sample1\", \"sample2\"] else [\"sample3\",
      \"sample4\"]\n        }\n    }\n\n    # Original sample processing with output
      map generation\n    scatter (sample in samples) {\n        call process_sample
      {\n            input:\n                sample_name = sample,\n                sample_type
      = sample_metadata[sample],\n                read_length = read_lengths[sample]\n
      \       }\n    }\n\n    # Aggregate results into a map\n    call create_result_map
      {\n        input:\n            sample_names = samples,\n            processing_messages
      = process_sample.message\n    }\n\n    output {\n        Map[String, String]
      result_map = create_result_map.output_map\n        Array[String] nested_map_results
      = process_nested_map.message\n    }\n}\n\ntask process_nested_map {\n    input
      {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
      samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
      first_sample = samples_for_patient[0]\n    # Then use it to index the patient
      data\n    String sample_type = patient_data[first_sample]\n\n    command {\n
      \       echo \"Processing patient ${patient_id} with sample type ${sample_type}\"\n
      \       for sample in ${sep=' ' samples_for_patient}; do\n            echo \"Sample:
      $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n
      \   }\n\n    runtime {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask
      process_sample {\n    input {\n        String sample_name\n        String sample_type\n
      \       Int read_length\n    }\n\n    command <<<\n        echo \"Processing
      ~{sample_name} (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n
      \   output {\n        String message = read_string(stdout())\n    }\n\n    runtime
      {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map
      {\n    input {\n        Array[String] sample_names\n        Array[String] processing_messages\n
      \   }\n\n    command <<<\n        python <<CODE\n        samples = '~{sep=\",\"
      sample_names}'.split(',')\n        messages = '~{sep=\",\" processing_messages}'.split(',')\n
      \       result = dict(zip(samples, messages))\n        with open('output.txt',
      'w') as f:\n            for sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n
      \       CODE\n    >>>\n\n    output {\n        Map[String, String] output_map
      = read_map('output.txt')\n    }\n\n    runtime {\n        docker: \"python:3.8-slim\"\n
      \   }\n}\r\n--9f614d319bd26751348b3ac10d8f186a\r\nContent-Disposition: form-data;
      name=\"workflowInputs\"; filename=\"inputs.json\"\r\nContent-Type: application/json\r\n\r\n{\n
      \   \"enhanced_map_test.samples\": [\"sample1\", \"sample2\", \"sample3\"],\n
      \   \"enhanced_map_test.sample_metadata\": {\n        \"sample1\": \"normal\",\n
      \       \"sample2\": \"tumor\",\n        \"sample3\": \"normal\"\n    },\n    \"enhanced_map_test.read_lengths\":
      {\n        \"sample1\": 100,\n        \"sample2\": 150,\n        \"sample3\":
      100\n    },\n    \"enhanced_map_test.nested_map\": {\n        \"patient1\":
      {\n            \"sample1\": \"normal\",\n            \"sample2\": \"tumor\"\n
      \       },\n        \"patient2\": {\n            \"sample3\": \"normal\",\n
      \           \"sample4\": \"tumor\"\n        }\n    },\n    \"enhanced_map_test.patient_ids\":
      [\"patient1\", \"patient2\"]\n}\r\n--9f614d319bd26751348b3ac10d8f186a\r\nContent-Disposition:
      form-data; name=\"workflowOptions\"; filename=\"options.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"workflow_failure_mode\": \"ContinueWhilePossible\",\n
      \   \"write_to_cache\": false,\n    \"read_from_cache\": false\n}\n\r\n--9f614d319bd26751348b3ac10d8f186a--\r\n"
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '4653'
      content-type:
      - multipart/form-data; boundary=9f614d319bd26751348b3ac10d8f186a
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: POST
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1
  response:
    body:
      string: '{"id":"4bc3f913-3996-44f1-ac93-a481230065a2","status":"Submitted"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '66'
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:30:53 GMT
      Server:
      - nginx/1.25.3
    status:
      code: 201
      message: Created
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:30:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:31:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:31:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:31:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:31:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:31:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:31:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:31:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:31:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:31:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:31:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:31:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:31:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:32:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:32:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:32:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:32:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:32:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:32:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:32:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:32:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:32:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:32:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:32:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:33:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:33:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:33:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:33:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:33:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:33:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:33:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:33:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:33:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:33:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:33:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:33:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:34:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:34:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:34:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:34:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:34:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:34:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:34:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:34:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:34:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:34:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:34:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:34:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:35:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:35:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:35:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:35:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:35:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:35:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:35:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:35:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:35:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:35:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:35:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:35:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:36:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:36:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:36:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:36:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:36:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:36:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:36:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:36:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:36:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:36:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:36:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:36:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:37:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:37:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:37:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:37:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:37:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:37:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:37:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:37:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:37:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:37:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:37:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:37:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:38:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:38:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:38:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:38:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:38:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:38:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:38:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:38:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:38:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:38:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:38:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:39:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:39:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:39:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:39:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:39:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:39:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:39:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:39:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:39:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:39:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:39:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:39:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:40:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:40:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:40:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:40:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:40:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:40:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:40:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:40:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:40:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:40:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:40:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:40:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:41:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:41:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:41:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:41:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:41:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:41:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:41:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:41:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:41:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:41:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:41:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:41:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:42:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:42:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:42:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:42:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:42:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:42:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:42:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:42:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:42:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:42:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:42:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:42:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:43:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:43:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:43:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:43:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:43:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:43:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:43:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:43:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:43:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:43:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:43:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:43:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:44:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:44:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:44:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:44:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:44:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:44:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:44:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:44:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:44:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:44:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:44:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:45:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:45:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:45:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:45:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:45:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:45:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:45:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:45:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:45:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:45:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:45:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:45:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:46:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:46:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:46:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:46:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:46:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:46:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:46:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:46:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:46:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:46:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:46:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:46:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:47:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:47:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:47:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:47:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:47:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:47:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:47:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:47:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:47:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:47:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:47:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:47:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:48:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:48:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:48:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:48:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:48:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:48:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:48:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:48:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:48:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:48:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:48:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:48:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:49:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:49:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:49:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:49:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:49:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:49:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:49:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:49:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:49:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:49:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:49:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:49:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:50:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:50:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:50:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:50:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:50:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:50:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:50:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:50:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:50:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:50:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:50:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:51:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-17f0032","description":"PickedUp","timestamp":"2025-08-04T16:50:59.225Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/4bc3f913-3996-44f1-ac93-a481230065a2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-04T16:50:59.225Z","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:51:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5254'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-17f0032","description":"PickedUp","timestamp":"2025-08-04T16:50:59.225Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/4bc3f913-3996-44f1-ac93-a481230065a2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-04T16:50:59.225Z","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:51:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5254'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-17f0032","description":"PickedUp","timestamp":"2025-08-04T16:50:59.225Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/4bc3f913-3996-44f1-ac93-a481230065a2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-04T16:50:59.225Z","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:51:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5254'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-17f0032","description":"PickedUp","timestamp":"2025-08-04T16:50:59.225Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/4bc3f913-3996-44f1-ac93-a481230065a2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-04T16:50:59.225Z","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:51:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5254'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-17f0032","description":"PickedUp","timestamp":"2025-08-04T16:50:59.225Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/4bc3f913-3996-44f1-ac93-a481230065a2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-04T16:50:59.225Z","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:51:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5254'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-17f0032","description":"PickedUp","timestamp":"2025-08-04T16:50:59.225Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/4bc3f913-3996-44f1-ac93-a481230065a2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-04T16:50:59.225Z","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:51:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5254'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-17f0032","description":"PickedUp","timestamp":"2025-08-04T16:50:59.225Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/4bc3f913-3996-44f1-ac93-a481230065a2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-04T16:50:59.225Z","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:51:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5254'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-17f0032","description":"PickedUp","timestamp":"2025-08-04T16:50:59.225Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/4bc3f913-3996-44f1-ac93-a481230065a2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-04T16:50:59.225Z","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:51:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5254'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-17f0032","description":"PickedUp","timestamp":"2025-08-04T16:50:59.225Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/4bc3f913-3996-44f1-ac93-a481230065a2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-04T16:50:59.225Z","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:51:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5254'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-17f0032","description":"PickedUp","timestamp":"2025-08-04T16:50:59.225Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/4bc3f913-3996-44f1-ac93-a481230065a2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-04T16:50:59.225Z","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:51:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5254'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-17f0032","description":"PickedUp","timestamp":"2025-08-04T16:50:59.225Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/4bc3f913-3996-44f1-ac93-a481230065a2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-04T16:50:59.225Z","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:51:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5254'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-17f0032","description":"PickedUp","timestamp":"2025-08-04T16:50:59.225Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/4bc3f913-3996-44f1-ac93-a481230065a2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-04T16:50:59.225Z","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:52:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5254'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-17f0032","description":"PickedUp","timestamp":"2025-08-04T16:50:59.225Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/4bc3f913-3996-44f1-ac93-a481230065a2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-04T16:50:59.225Z","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:52:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5254'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-17f0032","description":"PickedUp","timestamp":"2025-08-04T16:50:59.225Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/4bc3f913-3996-44f1-ac93-a481230065a2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-04T16:50:59.225Z","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:52:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5254'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-17f0032","description":"PickedUp","timestamp":"2025-08-04T16:50:59.225Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/4bc3f913-3996-44f1-ac93-a481230065a2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-04T16:50:59.225Z","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:52:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5254'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-17f0032","description":"PickedUp","timestamp":"2025-08-04T16:50:59.225Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/4bc3f913-3996-44f1-ac93-a481230065a2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-04T16:50:59.225Z","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:52:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5254'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok47.fhcrc.org:43631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok47.fhcrc.org:43631/api/workflows/v1/4bc3f913-3996-44f1-ac93-a481230065a2/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-17f0032","description":"Finished","timestamp":"2025-08-04T16:52:21.895Z","cromwellVersion":"87"},{"cromwellId":"cromid-17f0032","description":"PickedUp","timestamp":"2025-08-04T16:50:59.225Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{"enhanced_map_test.nested_map_results":["Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2","Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"],"enhanced_map_test.result_map":{"sample2":"Processing
        sample2 (tumor) with read length 150","sample1":"Processing sample1 (normal)
        with read length 100","sample3":"Processing sample3 (normal) with read length
        100"}},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/4bc3f913-3996-44f1-ac93-a481230065a2","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-08-04T16:52:21.895Z","start":"2025-08-04T16:50:59.225Z","id":"4bc3f913-3996-44f1-ac93-a481230065a2","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-4bc3f913-3996-44f1-ac93-a481230065a2"},"submission":"2025-08-04T16:30:53.070Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 04 Aug 2025 16:52:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5839'
    status:
      code: 200
      message: OK
version: 1
