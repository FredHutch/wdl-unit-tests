interactions:
- request:
    body: "--fd3f291c8890a9959a36eec4d1683012\r\nContent-Disposition: form-data; name=\"workflowSource\";
      filename=\"structTypeTest.wdl\"\r\nContent-Type: application/octet-stream\r\n\r\nversion
      1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
      1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in the
      workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing metadata\nstruct
      SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n#
      Nested struct for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n
      \   Float? gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested
      structures and optional fields\nstruct SampleInfo {\n    String name\n    String?
      type\n    Int? read_length\n    String? library_prep\n    SequencingInfo sequencing\n
      \   QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example
      {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
      (sample_info in sample_information) {\n        SampleInfo processed_sample =
      object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
      \"normal\"]),\n            read_length: select_first([sample_info.read_length,
      100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
      sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n
      \       call process_sample {\n            input:\n                sample =
      processed_sample\n        }\n    }\n}\n\n#### TASK DEFINITIONS\n\ntask process_sample
      {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
      \"Processing ~{sample.name} (~{sample.type})\"\n        echo \"Read Length:
      ~{sample.read_length}\"\n        echo \"Sequencing Platform: ~{sample.sequencing.platform}\"\n
      \       echo \"Flowcell ID: ~{select_first([sample.sequencing.flowcell_id, 'N/A'])}\"\n
      \       echo \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n
      \       echo \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo
      \"GC Content: ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo
      \"Duplicate Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
      \"Library Prep: ~{select_first([sample.library_prep, 'Standard'])}\"\n    >>>\n\n
      \   output {\n        String message = read_string(stdout())\n    }\n\n    runtime
      {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\r\n--fd3f291c8890a9959a36eec4d1683012\r\nContent-Disposition:
      form-data; name=\"workflowInputs\"; filename=\"inputs.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"struct_example.sample_information\": [\n        {\n
      \           \"name\": \"sample1\",\n            \"sequencing\": {\n                \"platform\":
      \"NovaSeq\",\n                \"flowcell_id\": \"H5K5YDSXX\",\n                \"lane_number\":
      1\n            },\n            \"metrics\": {\n                \"quality_score\":
      95.5,\n                \"gc_content\": 45.2,\n                \"duplicate_rate\":
      2\n            }\n        },\n        {\n            \"name\": \"sample2\",\n
      \           \"type\": \"tumor\",\n            \"read_length\": 150,\n            \"library_prep\":
      \"PCR-free\",\n            \"sequencing\": {\n                \"platform\":
      \"NovaSeq\"\n            },\n            \"metrics\": {\n                \"quality_score\":
      92.3\n            }\n        }\n    ]\n}\n\r\n--fd3f291c8890a9959a36eec4d1683012\r\nContent-Disposition:
      form-data; name=\"workflowOptions\"; filename=\"options.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"workflow_failure_mode\": \"ContinueWhilePossible\",\n
      \   \"write_to_cache\": false,\n    \"read_from_cache\": false\n}\n\r\n--fd3f291c8890a9959a36eec4d1683012--\r\n"
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3561'
      content-type:
      - multipart/form-data; boundary=fd3f291c8890a9959a36eec4d1683012
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: POST
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1
  response:
    body:
      string: '{"id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","status":"Submitted"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '66'
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:03:48 GMT
      Server:
      - nginx/1.25.3
    status:
      code: 201
      message: Created
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:03:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:03:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:04:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:04:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:04:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:04:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:04:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:04:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:04:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:04:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:04:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:04:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:04:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:04:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:05:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:05:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:05:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:05:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:05:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:05:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:05:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:05:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:05:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:05:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:05:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:06:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:06:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:06:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:06:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:06:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:06:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:06:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:06:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:06:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:06:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:06:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:06:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:07:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:07:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:07:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:07:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:07:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:07:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:07:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:07:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:07:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:07:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:07:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:07:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:08:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:08:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:08:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:08:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:08:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:08:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:08:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:08:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:08:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:08:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:08:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:08:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:09:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:09:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:09:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:09:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:09:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:09:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:09:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:09:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:09:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:09:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:09:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:09:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:10:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:10:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:10:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:10:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:10:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:10:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:10:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:10:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:10:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:10:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:10:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:10:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:11:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:11:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:11:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:11:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:11:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:11:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:11:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:11:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:11:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:11:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:11:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:12:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:12:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:12:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:12:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:12:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:12:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:12:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:12:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:12:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:12:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:12:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:12:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:13:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:13:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:13:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:13:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:13:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:13:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:13:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:13:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:13:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:13:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:13:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:13:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:14:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:14:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:14:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:14:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:14:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:14:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:14:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:14:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:14:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:14:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:14:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:14:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:15:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:15:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:15:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:15:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:15:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:15:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:15:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:15:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:15:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:15:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:15:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:15:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:16:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:16:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:16:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:16:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:16:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:16:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:16:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:16:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:16:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:16:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:16:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:16:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:17:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:17:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:17:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:17:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:17:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:17:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:17:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:17:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:17:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:17:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:17:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:18:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:18:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:18:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:18:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:18:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:18:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:18:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:18:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:18:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:18:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:18:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:18:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:19:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:19:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:19:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:19:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:19:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:19:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:19:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:19:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:19:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:19:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:19:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:19:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:20:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:20:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:20:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:20:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:20:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:20:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:20:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:20:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:20:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:20:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:20:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:20:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:21:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:21:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:21:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:21:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:21:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:21:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:21:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:21:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:21:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:21:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:21:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:21:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:22:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-d11bdb6","description":"PickedUp","timestamp":"2025-07-27T04:22:03.759Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/2b54e83d-4f99-4bf5-bf58-b3228cca08bc","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-07-27T04:22:03.760Z","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:22:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4035'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-d11bdb6","description":"PickedUp","timestamp":"2025-07-27T04:22:03.759Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/2b54e83d-4f99-4bf5-bf58-b3228cca08bc","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-07-27T04:22:03.760Z","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:22:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4035'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-d11bdb6","description":"PickedUp","timestamp":"2025-07-27T04:22:03.759Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/2b54e83d-4f99-4bf5-bf58-b3228cca08bc","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-07-27T04:22:03.760Z","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:22:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4035'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-d11bdb6","description":"PickedUp","timestamp":"2025-07-27T04:22:03.759Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/2b54e83d-4f99-4bf5-bf58-b3228cca08bc","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-07-27T04:22:03.760Z","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:22:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4035'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-d11bdb6","description":"PickedUp","timestamp":"2025-07-27T04:22:03.759Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/2b54e83d-4f99-4bf5-bf58-b3228cca08bc","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-07-27T04:22:03.760Z","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:22:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4035'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-d11bdb6","description":"PickedUp","timestamp":"2025-07-27T04:22:03.759Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/2b54e83d-4f99-4bf5-bf58-b3228cca08bc","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-07-27T04:22:03.760Z","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:22:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4035'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-d11bdb6","description":"PickedUp","timestamp":"2025-07-27T04:22:03.759Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/2b54e83d-4f99-4bf5-bf58-b3228cca08bc","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-07-27T04:22:03.760Z","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:22:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4035'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-d11bdb6","description":"PickedUp","timestamp":"2025-07-27T04:22:03.759Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/2b54e83d-4f99-4bf5-bf58-b3228cca08bc","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-07-27T04:22:03.760Z","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:22:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4035'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-d11bdb6","description":"PickedUp","timestamp":"2025-07-27T04:22:03.759Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/2b54e83d-4f99-4bf5-bf58-b3228cca08bc","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-07-27T04:22:03.760Z","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:22:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4035'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-d11bdb6","description":"PickedUp","timestamp":"2025-07-27T04:22:03.759Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/2b54e83d-4f99-4bf5-bf58-b3228cca08bc","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-07-27T04:22:03.760Z","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:22:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4035'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok99.fhcrc.org:45631
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok99.fhcrc.org:45631/api/workflows/v1/2b54e83d-4f99-4bf5-bf58-b3228cca08bc/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-d11bdb6","description":"Finished","timestamp":"2025-07-27T04:22:54.784Z","cromwellVersion":"87"},{"cromwellId":"cromid-d11bdb6","description":"PickedUp","timestamp":"2025-07-27T04:22:03.759Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{"struct_example.process_sample.message":["Processing
        sample1 (normal)\nRead Length: 100\nSequencing Platform: NovaSeq\nFlowcell
        ID: H5K5YDSXX\nLane Number: 1\nQuality Score: 95.5\nGC Content: 45.2\nDuplicate
        Rate: 2%\nLibrary Prep: Standard","Processing sample2 (tumor)\nRead Length:
        150\nSequencing Platform: NovaSeq\nFlowcell ID: N/A\nLane Number: -1\nQuality
        Score: 92.3\nGC Content: 0.0\nDuplicate Rate: 0%\nLibrary Prep: PCR-free"],"struct_example.processed_sample":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":"normal","library_prep":null,"read_length":100},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/2b54e83d-4f99-4bf5-bf58-b3228cca08bc","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-07-27T04:22:54.784Z","start":"2025-07-27T04:22:03.760Z","id":"2b54e83d-4f99-4bf5-bf58-b3228cca08bc","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-2b54e83d-4f99-4bf5-bf58-b3228cca08bc"},"submission":"2025-07-27T04:03:48.471Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 27 Jul 2025 04:22:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5107'
    status:
      code: 200
      message: OK
version: 1
