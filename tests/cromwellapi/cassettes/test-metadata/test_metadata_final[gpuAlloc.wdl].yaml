interactions:
- request:
    body: "--a1e8706a300b205d65616a44f0c8bc8f\r\nContent-Disposition: form-data; name=\"workflowSource\";
      filename=\"gpuAlloc.wdl\"\r\nContent-Type: application/octet-stream\r\n\r\nversion
      1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
      TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
      2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication works
      correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File
      test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n
      \       Array[Float] matrix_result = GpuTest.multiplication_result\n    }\n\n
      \   parameter_meta {\n        test_results: \"Complete log of the GPU test including
      tensor operations and GPU detection\"\n        gpu_count: \"Number of GPUs detected
      by TensorFlow\"\n        matrix_result: \"Results of the matrix multiplication
      operation\"\n    }\n}\n\ntask GpuTest {\n    command <<<\n        python3 <<CODE\n
      \       import tensorflow as tf\n        import numpy as np\n\n        # Test
      GPU availability\n        gpus = tf.config.experimental.list_physical_devices('GPU')\n
      \       detected_gpus = len(gpus)\n        print(f\"Number of GPUs detected:
      {detected_gpus}\")\n\n        # Verify GPU allocation matches runtime specification\n
      \       expected_gpus = 1  # Matches the runtime.gpus specification\n        if
      detected_gpus != expected_gpus:\n            raise RuntimeError(f\"GPU allocation
      mismatch: Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n
      \       # Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0,
      4.0, 5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0,
      4.0, 5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n
      \       result = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n
      \       print(\"\\nMatrix A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix
      B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix Multiplication
      Result:\")\n        print(result.numpy())\n        \n        # Save results
      for output\n        np.savetxt(\"multiplication_result.txt\", result.numpy().flatten())\n
      \       with open(\"gpu_count.txt\", \"w\") as f:\n            f.write(str(len(gpus)))\n
      \       CODE\n    >>>\n\n    output {\n        File results = stdout()\n        Int
      detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float] multiplication_result
      = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime {\n        docker:
      \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules: \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n
      \       gpus: \"1\"\n    }\n\n    parameter_meta {\n        results: \"Output
      log containing GPU detection and matrix multiplication results\"\n        detected_gpus:
      \"Number of GPUs detected by TensorFlow\"\n        multiplication_result: \"Flattened
      array containing the result of matrix multiplication\"\n    }\n}\n\r\n--a1e8706a300b205d65616a44f0c8bc8f\r\nContent-Disposition:
      form-data; name=\"workflowOptions\"; filename=\"options.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"workflow_failure_mode\": \"ContinueWhilePossible\",\n
      \   \"write_to_cache\": false,\n    \"read_from_cache\": false\n}\n\r\n--a1e8706a300b205d65616a44f0c8bc8f--\r\n"
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3160'
      content-type:
      - multipart/form-data; boundary=a1e8706a300b205d65616a44f0c8bc8f
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: POST
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1
  response:
    body:
      string: '{"id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","status":"Submitted"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '66'
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:29 GMT
      Server:
      - nginx/1.25.3
    status:
      code: 201
      message: Created
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:50:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:50:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:50:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:50:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:50:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:50:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:50:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:50:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:50:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:50:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:50:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:50:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:51:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:51:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:51:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:51:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:51:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:51:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:51:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:51:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:51:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:51:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:51:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:51:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:52:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:52:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:52:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:52:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:52:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:52:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:52:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:52:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:52:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:52:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:52:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:52:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:53:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:53:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:53:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:53:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:53:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:53:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:53:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:53:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:53:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:53:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:53:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:54:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:54:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:54:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:54:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:54:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:54:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:54:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:54:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:54:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:54:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:54:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:54:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:55:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:55:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:55:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:55:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:55:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:55:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:55:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:55:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:55:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:55:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:55:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:55:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:56:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:56:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:56:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:56:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:56:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:56:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:56:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:56:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:56:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:56:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:56:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:56:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:57:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:57:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:57:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:57:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:57:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:57:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:57:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:57:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:57:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:57:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:57:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:57:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:58:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:58:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:58:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:58:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:58:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:58:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:58:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:58:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:58:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:58:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:58:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:59:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:59:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:59:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:59:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:59:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:59:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:59:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:59:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:59:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:59:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:59:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:59:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:00:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:00:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:00:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:00:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:00:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:00:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:00:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:00:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:00:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:00:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:00:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:00:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:01:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:01:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:01:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:01:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:01:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:01:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:01:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:01:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:01:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:01:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:01:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:01:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:02:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:02:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:02:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:02:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:02:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:02:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:02:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:02:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:02:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:02:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:02:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:02:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:03:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:03:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:03:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:03:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:03:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:03:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:03:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:03:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:03:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:03:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:03:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:03:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:04:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:04:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:04:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:04:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:04:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:04:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:04:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:04:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:04:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:04:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:04:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:05:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:05:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:05:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:05:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:05:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:05:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:05:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:05:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:05:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:05:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:05:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:05:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:06:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:06:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:06:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:06:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:06:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:06:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:06:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:06:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:06:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:06:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:06:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:06:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n# This workflow tests
        GPU allocation and basic tensor operations using TensorFlow\n# It verifies
        that:\n# 1. A GPU can be successfully allocated\n# 2. TensorFlow can detect
        and use the GPU\n# 3. Basic matrix multiplication works correctly\n\nworkflow
        GpuMatrixMult {\n    call GpuTest\n\n    output {\n        File test_results
        = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:07:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3260'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T04:07:05.501Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/22672eb6-c303-4e55-8582-8efb96a0fbd3","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T04:07:05.501Z","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:07:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3662'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T04:07:05.501Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/22672eb6-c303-4e55-8582-8efb96a0fbd3","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T04:07:05.501Z","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:07:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3662'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T04:07:05.501Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/22672eb6-c303-4e55-8582-8efb96a0fbd3","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T04:07:05.501Z","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:07:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3662'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T04:07:05.501Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/22672eb6-c303-4e55-8582-8efb96a0fbd3","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T04:07:05.501Z","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:07:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3662'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T04:07:05.501Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/22672eb6-c303-4e55-8582-8efb96a0fbd3","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T04:07:05.501Z","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:07:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3662'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T04:07:05.501Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/22672eb6-c303-4e55-8582-8efb96a0fbd3","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T04:07:05.501Z","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:07:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3662'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T04:07:05.501Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/22672eb6-c303-4e55-8582-8efb96a0fbd3","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T04:07:05.501Z","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:07:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3662'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T04:07:05.501Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/22672eb6-c303-4e55-8582-8efb96a0fbd3","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T04:07:05.501Z","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:07:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3662'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T04:07:05.501Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/22672eb6-c303-4e55-8582-8efb96a0fbd3","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T04:07:05.501Z","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:07:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3662'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/22672eb6-c303-4e55-8582-8efb96a0fbd3/metadata?expandSubWorkflows=false&excludeKey=calls
  response:
    body:
      string: '{"workflowName":"GpuMatrixMult","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T04:07:05.501Z","cromwellVersion":"87"},{"cromwellId":"cromid-b365107","description":"Finished","timestamp":"2025-09-14T04:07:50.423Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# This workflow tests GPU allocation and basic tensor operations using
        TensorFlow\n# It verifies that:\n# 1. A GPU can be successfully allocated\n#
        2. TensorFlow can detect and use the GPU\n# 3. Basic matrix multiplication
        works correctly\n\nworkflow GpuMatrixMult {\n    call GpuTest\n\n    output
        {\n        File test_results = GpuTest.results\n        Int gpu_count = GpuTest.detected_gpus\n        Array[Float]
        matrix_result = GpuTest.multiplication_result\n    }\n\n    parameter_meta
        {\n        test_results: \"Complete log of the GPU test including tensor operations
        and GPU detection\"\n        gpu_count: \"Number of GPUs detected by TensorFlow\"\n        matrix_result:
        \"Results of the matrix multiplication operation\"\n    }\n}\n\ntask GpuTest
        {\n    command <<<\n        python3 <<CODE\n        import tensorflow as tf\n        import
        numpy as np\n\n        # Test GPU availability\n        gpus = tf.config.experimental.list_physical_devices(''GPU'')\n        detected_gpus
        = len(gpus)\n        print(f\"Number of GPUs detected: {detected_gpus}\")\n\n        #
        Verify GPU allocation matches runtime specification\n        expected_gpus
        = 1  # Matches the runtime.gpus specification\n        if detected_gpus !=
        expected_gpus:\n            raise RuntimeError(f\"GPU allocation mismatch:
        Expected {expected_gpus} GPU(s), but found {detected_gpus}\")\n        \n        #
        Create test matrices\n        matrix_a = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[2, 3])\n        matrix_b = tf.constant([1.0, 2.0, 3.0, 4.0,
        5.0, 6.0], shape=[3, 2])\n        \n        # Perform matrix multiplication\n        result
        = tf.matmul(matrix_a, matrix_b)\n        \n        # Print results\n        print(\"\\nMatrix
        A:\")\n        print(matrix_a.numpy())\n        print(\"\\nMatrix B:\")\n        print(matrix_b.numpy())\n        print(\"\\nMatrix
        Multiplication Result:\")\n        print(result.numpy())\n        \n        #
        Save results for output\n        np.savetxt(\"multiplication_result.txt\",
        result.numpy().flatten())\n        with open(\"gpu_count.txt\", \"w\") as
        f:\n            f.write(str(len(gpus)))\n        CODE\n    >>>\n\n    output
        {\n        File results = stdout()\n        Int detected_gpus = read_int(\"gpu_count.txt\")\n        Array[Float]
        multiplication_result = read_lines(\"multiplication_result.txt\")\n    }\n\n    runtime
        {\n        docker: \"tensorflow/tensorflow:2.11.0-gpu\"\n        # modules:
        \"TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0\"\n        gpus: \"1\"\n    }\n\n    parameter_meta
        {\n        results: \"Output log containing GPU detection and matrix multiplication
        results\"\n        detected_gpus: \"Number of GPUs detected by TensorFlow\"\n        multiplication_result:
        \"Flattened array containing the result of matrix multiplication\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{"GpuMatrixMult.matrix_result":[22.0,28.0,49.0,64.0],"GpuMatrixMult.test_results":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/22672eb6-c303-4e55-8582-8efb96a0fbd3/call-GpuTest/execution/stdout","GpuMatrixMult.gpu_count":1},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/GpuMatrixMult/22672eb6-c303-4e55-8582-8efb96a0fbd3","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-09-14T04:07:50.423Z","start":"2025-09-14T04:07:05.501Z","id":"22672eb6-c303-4e55-8582-8efb96a0fbd3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-22672eb6-c303-4e55-8582-8efb96a0fbd3"},"submission":"2025-09-14T03:47:29.927Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 04:07:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4060'
    status:
      code: 200
      message: OK
version: 1
