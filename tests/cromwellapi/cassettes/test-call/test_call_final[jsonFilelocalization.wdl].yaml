interactions:
- request:
    body: "--59b639cc219b2db1568488dac090436c\r\nContent-Disposition: form-data; name=\"workflowSource\";
      filename=\"jsonFilelocalization.wdl\"\r\nContent-Type: application/octet-stream\r\n\r\nversion
      1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
      required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
      optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
      to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n
      \     required_remote = required_json_remote,\n      optional_remote = optional_json_remote,\n
      \     optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
      {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
      {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
      optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir -p
      copied_jsons\n    \n    # Copy the required local and remote files\n    cp ~{required_remote}
      copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename
      ~{optional_remote})\n    cp ~{optional_remote_not_provided} copied_jsons/$(basename
      ~{optional_remote_not_provided})\n    \n  >>>\n\n  output {\n    Array[File]
      out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime {\n    docker: \"ubuntu:20.04\"\n
      \ }\n}\n\r\n--59b639cc219b2db1568488dac090436c\r\nContent-Disposition: form-data;
      name=\"workflowInputs\"; filename=\"inputs.json\"\r\nContent-Type: application/json\r\n\r\n{\n
      \ \"jsonFileLocalization.required_json_remote\": \"/fh/fast/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\",\n
      \ \"jsonFileLocalization.optional_json_remote\": \"/fh/fast/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\"\n}\n\r\n--59b639cc219b2db1568488dac090436c\r\nContent-Disposition:
      form-data; name=\"workflowOptions\"; filename=\"options.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"workflow_failure_mode\": \"ContinueWhilePossible\",\n
      \   \"write_to_cache\": false,\n    \"read_from_cache\": false\n}\n\r\n--59b639cc219b2db1568488dac090436c--\r\n"
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2031'
      content-type:
      - multipart/form-data; boundary=59b639cc219b2db1568488dac090436c
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: POST
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1
  response:
    body:
      string: '{"id":"ac14e533-e783-45c5-93a5-35805452d74b","status":"Submitted"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '66'
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:27:15 GMT
      Server:
      - nginx/1.25.3
    status:
      code: 201
      message: Created
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:27:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:27:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:27:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:27:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:27:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:27:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:27:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:27:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:28:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:28:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:28:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:28:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:28:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:28:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:28:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:28:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:28:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:28:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:28:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:28:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:29:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:29:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:29:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:29:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:29:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:29:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:29:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:29:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:29:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:29:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:29:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:29:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:30:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:30:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:30:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:30:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:30:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:30:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:30:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:30:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:30:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:30:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:30:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:30:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:31:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:31:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:31:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:31:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:31:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:31:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:31:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:31:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:31:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:31:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:31:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:31:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:32:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:32:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:32:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:32:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:32:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:32:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:32:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:32:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:32:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:32:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:32:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:33:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:33:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:33:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:33:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:33:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:33:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:33:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:33:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:33:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:33:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:33:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:33:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:34:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:34:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:34:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:34:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:34:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:34:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:34:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:34:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:34:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:34:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:34:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:34:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:35:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:35:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:35:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:35:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:35:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:35:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:35:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:35:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:35:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:35:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:35:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:35:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:36:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:36:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:36:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:36:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:36:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:36:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:36:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:36:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:36:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:36:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:36:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:36:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:37:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:37:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:37:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:37:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:37:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:37:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:37:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:37:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:37:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:37:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:37:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:37:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:38:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:38:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:38:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:38:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:38:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:38:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:38:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:38:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:38:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:38:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:38:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:39:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:39:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:39:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:39:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:39:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:39:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:39:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:39:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:39:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:39:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:39:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:39:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:40:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:40:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:40:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:40:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:40:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:40:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:40:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:40:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:40:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:40:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:40:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:40:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:41:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:41:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:41:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:41:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:41:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:41:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:41:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:41:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:41:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:41:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:41:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:41:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:42:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:42:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:42:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:42:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:42:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:42:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:42:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:42:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:42:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:42:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:42:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:42:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:43:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:43:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:43:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:43:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:43:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:43:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:43:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:43:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:43:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:43:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:43:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:44:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:44:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:44:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:44:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:44:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:44:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:44:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:44:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:44:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:44:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:44:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:44:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:45:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:45:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:45:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:45:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:45:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:45:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:45:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:45:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:45:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:45:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:45:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:45:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:46:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:46:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:46:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:46:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:46:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:46:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:46:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:46:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:46:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:46:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:46:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:46:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:47:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:48:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow jsonFileLocalization
        {\n  input {\n    # Required inputs\n    File required_json_remote     # Remote
        JSON file\n    \n    # Optional inputs\n    File? optional_json_remote\n    File?
        optional_remote_not_provided\n  }\n\n  # Task to copy JSON files to the working
        directory\n  call CopyJsons {\n    input:\n      required_remote = required_json_remote,\n      optional_remote
        = optional_json_remote,\n      optional_remote_not_provided = optional_remote_not_provided\n  }\n\n  output
        {\n    Array[File] copied_files = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons
        {\n  input {\n    File required_remote\n    File? optional_remote\n    File?
        optional_remote_not_provided\n  }\n\n  command <<<\n    set -e\n    mkdir
        -p copied_jsons\n    \n    # Copy the required local and remote files\n    cp
        ~{required_remote} copied_jsons/$(basename ~{required_remote})\n    cp ~{optional_remote}
        copied_jsons/$(basename ~{optional_remote})\n    cp ~{optional_remote_not_provided}
        copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1898'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T03:49:23.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T03:49:23.962Z","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{"optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2565'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T03:49:23.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{"jsonFileLocalization.CopyJsons":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-09-14T03:49:26.033Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T03:49:23.962Z","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{"optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2719'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T03:49:23.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{"jsonFileLocalization.CopyJsons":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/stdout","commandLine":"set
        -e\nmkdir -p copied_jsons\n\n# Copy the required local and remote files\ncp
        /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_required_file_2.txt
        copied_jsons/$(basename /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_required_file_2.txt)\ncp
        /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_optional_file_2.txt
        copied_jsons/$(basename /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_optional_file_2.txt)\ncp  copied_jsons/$(basename
        )","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"optional_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null,"required_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt"},"backend":"gizmo","attempt":1,"start":"2025-09-14T03:49:26.033Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T03:49:23.962Z","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{"optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4451'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T03:49:23.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{"jsonFileLocalization.CopyJsons":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/stdout","backendStatus":"Running","commandLine":"set
        -e\nmkdir -p copied_jsons\n\n# Copy the required local and remote files\ncp
        /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_required_file_2.txt
        copied_jsons/$(basename /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_required_file_2.txt)\ncp
        /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_optional_file_2.txt
        copied_jsons/$(basename /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_optional_file_2.txt)\ncp  copied_jsons/$(basename
        )","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"optional_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null,"required_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt"},"jobId":"33393648","backend":"gizmo","attempt":1,"start":"2025-09-14T03:49:26.033Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T03:49:23.962Z","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{"optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4496'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T03:49:23.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{"jsonFileLocalization.CopyJsons":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/stdout","backendStatus":"Running","commandLine":"set
        -e\nmkdir -p copied_jsons\n\n# Copy the required local and remote files\ncp
        /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_required_file_2.txt
        copied_jsons/$(basename /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_required_file_2.txt)\ncp
        /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_optional_file_2.txt
        copied_jsons/$(basename /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_optional_file_2.txt)\ncp  copied_jsons/$(basename
        )","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"optional_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null,"required_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt"},"jobId":"33393648","backend":"gizmo","attempt":1,"start":"2025-09-14T03:49:26.033Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T03:49:23.962Z","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{"optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4496'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T03:49:23.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{"jsonFileLocalization.CopyJsons":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/stdout","backendStatus":"Running","commandLine":"set
        -e\nmkdir -p copied_jsons\n\n# Copy the required local and remote files\ncp
        /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_required_file_2.txt
        copied_jsons/$(basename /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_required_file_2.txt)\ncp
        /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_optional_file_2.txt
        copied_jsons/$(basename /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_optional_file_2.txt)\ncp  copied_jsons/$(basename
        )","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"optional_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null,"required_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt"},"jobId":"33393648","backend":"gizmo","attempt":1,"start":"2025-09-14T03:49:26.033Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T03:49:23.962Z","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{"optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:49:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4496'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T03:49:23.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{"jsonFileLocalization.CopyJsons":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/stdout","backendStatus":"Running","commandLine":"set
        -e\nmkdir -p copied_jsons\n\n# Copy the required local and remote files\ncp
        /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_required_file_2.txt
        copied_jsons/$(basename /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_required_file_2.txt)\ncp
        /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_optional_file_2.txt
        copied_jsons/$(basename /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_optional_file_2.txt)\ncp  copied_jsons/$(basename
        )","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"optional_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null,"required_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt"},"jobId":"33393648","backend":"gizmo","attempt":1,"start":"2025-09-14T03:49:26.033Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T03:49:23.962Z","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{"optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:50:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4496'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T03:49:23.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{"jsonFileLocalization.CopyJsons":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/stdout","backendStatus":"Running","commandLine":"set
        -e\nmkdir -p copied_jsons\n\n# Copy the required local and remote files\ncp
        /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_required_file_2.txt
        copied_jsons/$(basename /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_required_file_2.txt)\ncp
        /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_optional_file_2.txt
        copied_jsons/$(basename /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_optional_file_2.txt)\ncp  copied_jsons/$(basename
        )","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"optional_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null,"required_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt"},"jobId":"33393648","backend":"gizmo","attempt":1,"start":"2025-09-14T03:49:26.033Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T03:49:23.962Z","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{"optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:50:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4496'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T03:49:23.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{"jsonFileLocalization.CopyJsons":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/stdout","backendStatus":"Running","commandLine":"set
        -e\nmkdir -p copied_jsons\n\n# Copy the required local and remote files\ncp
        /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_required_file_2.txt
        copied_jsons/$(basename /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_required_file_2.txt)\ncp
        /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_optional_file_2.txt
        copied_jsons/$(basename /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_optional_file_2.txt)\ncp  copied_jsons/$(basename
        )","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"optional_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null,"required_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt"},"jobId":"33393648","backend":"gizmo","attempt":1,"start":"2025-09-14T03:49:26.033Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-09-14T03:49:23.962Z","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{"optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:50:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4496'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj36.fhcrc.org:46443
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj36.fhcrc.org:46443/api/workflows/v1/ac14e533-e783-45c5-93a5-35805452d74b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"jsonFileLocalization","workflowProcessingEvents":[{"cromwellId":"cromid-b365107","description":"PickedUp","timestamp":"2025-09-14T03:49:23.962Z","cromwellVersion":"87"},{"cromwellId":"cromid-b365107","description":"Finished","timestamp":"2025-09-14T03:50:08.873Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonFileLocalization {\n  input {\n    # Required inputs\n    File
        required_json_remote     # Remote JSON file\n    \n    # Optional inputs\n    File?
        optional_json_remote\n    File? optional_remote_not_provided\n  }\n\n  # Task
        to copy JSON files to the working directory\n  call CopyJsons {\n    input:\n      required_remote
        = required_json_remote,\n      optional_remote = optional_json_remote,\n      optional_remote_not_provided
        = optional_remote_not_provided\n  }\n\n  output {\n    Array[File] copied_files
        = CopyJsons.out_files\n  }\n}\n\ntask CopyJsons {\n  input {\n    File required_remote\n    File?
        optional_remote\n    File? optional_remote_not_provided\n  }\n\n  command
        <<<\n    set -e\n    mkdir -p copied_jsons\n    \n    # Copy the required
        local and remote files\n    cp ~{required_remote} copied_jsons/$(basename
        ~{required_remote})\n    cp ~{optional_remote} copied_jsons/$(basename ~{optional_remote})\n    cp
        ~{optional_remote_not_provided} copied_jsons/$(basename ~{optional_remote_not_provided})\n    \n  >>>\n\n  output
        {\n    Array[File] out_files = glob(\"copied_jsons/*\")\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonFileLocalization.optional_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt\",\"jsonFileLocalization.required_json_remote\":\"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt\"}","workflowUrl":"","labels":"{}"},"calls":{"jsonFileLocalization.CopyJsons":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/stdout","backendStatus":"Done","commandLine":"set
        -e\nmkdir -p copied_jsons\n\n# Copy the required local and remote files\ncp
        /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_required_file_2.txt
        copied_jsons/$(basename /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_required_file_2.txt)\ncp
        /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_optional_file_2.txt
        copied_jsons/$(basename /cromwell-executions/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/inputs/1130047110/local_remote_optional_file_2.txt)\ncp  copied_jsons/$(basename
        )","shardIndex":-1,"outputs":{"out_files":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/glob-f9e378b03f46c0bec01ac2b6abc5f8ec/local_remote_optional_file_2.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/glob-f9e378b03f46c0bec01ac2b6abc5f8ec/local_remote_required_file_2.txt"]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"optional_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","optional_remote_not_provided":null,"required_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt"},"returnCode":0,"jobId":"33393648","backend":"gizmo","start":"2025-09-14T03:49:26.033Z","end":"2025-09-14T03:50:07.836Z","dockerImageUsed":"ubuntu@sha256:8feb4d8ca5354def3d8fce243717141ce31e2c428701f6682bd2fafe15388214","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons","attempt":1,"executionEvents":[{"startTime":"2025-09-14T03:49:31.181Z","description":"PreparingJob","endTime":"2025-09-14T03:49:31.192Z"},{"startTime":"2025-09-14T03:49:26.033Z","description":"RequestingExecutionToken","endTime":"2025-09-14T03:49:31.180Z"},{"startTime":"2025-09-14T03:49:31.192Z","description":"RunningJob","endTime":"2025-09-14T03:50:07.477Z"},{"startTime":"2025-09-14T03:50:07.477Z","description":"UpdatingJobStore","endTime":"2025-09-14T03:50:07.836Z"},{"startTime":"2025-09-14T03:49:26.033Z","description":"Pending","endTime":"2025-09-14T03:49:26.033Z"},{"startTime":"2025-09-14T03:49:31.180Z","description":"WaitingForValueStore","endTime":"2025-09-14T03:49:31.181Z"}]}]},"outputs":{"jsonFileLocalization.copied_files":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/glob-f9e378b03f46c0bec01ac2b6abc5f8ec/local_remote_optional_file_2.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b/call-CopyJsons/execution/glob-f9e378b03f46c0bec01ac2b6abc5f8ec/local_remote_required_file_2.txt"]},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonFileLocalization/ac14e533-e783-45c5-93a5-35805452d74b","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-09-14T03:50:08.873Z","start":"2025-09-14T03:49:23.962Z","id":"ac14e533-e783-45c5-93a5-35805452d74b","inputs":{"optional_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_optional_file_2.txt","required_json_remote":"/redacted/_DaSL/proof_testing/jsonFilelocalization/local_remote_required_file_2.txt","optional_remote_not_provided":null},"labels":{"cromwell-workflow-id":"cromwell-ac14e533-e783-45c5-93a5-35805452d74b"},"submission":"2025-09-14T03:27:15.778Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 14 Sep 2025 03:50:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '6369'
    status:
      code: 200
      message: OK
version: 1
