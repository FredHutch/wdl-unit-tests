interactions:
- request:
    body: "--7a4a1584244e79c3c5a642cc307cc3d3\r\nContent-Disposition: form-data; name=\"workflowSource\";
      filename=\"WildcardsandConditions.wdl\"\r\nContent-Type: application/octet-stream\r\n\r\nversion
      1.0\n\nworkflow WildcardsandConditions {\n    input {\n        String prefix
      \ # Required input for the file prefix (no default value)\n    }\n\n    call
      wildcard_and_conditions_test {\n        input:\n            prefix = prefix
      \ # Explicitly pass the workflow input to the task\n    }\n\n    output {\n
      \       Array[File] txt_files = wildcard_and_conditions_test.txt_files\n        String
      conditional_result = wildcard_and_conditions_test.conditional_output\n    }\n}\n\ntask
      wildcard_and_conditions_test {\n    input {\n        String prefix  # Required
      input for file creation\n        Boolean create_extra_file = true  # Default
      value for conditional logic\n    }\n\n    command <<<\n        # Create multiple
      .txt files to test wildcard resolution\n        for i in {1..3}; do\n            echo
      \"File content $i\" > \"~{prefix}_$i.txt\"\n        done\n\n        # Create
      an extra file conditionally\n        if [[ ~{create_extra_file} == \"true\"
      ]]; then\n            echo \"Extra file content\" > ~{prefix}_extra.txt\n        fi\n\n
      \       # Parse inputs directly in the command\n        echo \"Parsed prefix:
      ~{prefix}\" > parsed_output.txt\n    >>>\n\n    output {\n        Array[File]
      txt_files = glob(\"*.txt\")  # Test wildcard resolution\n        String conditional_output
      = read_string(\"parsed_output.txt\")  # Verify input parsing\n    }\n\n    runtime
      {\n        docker: \"ubuntu:20.04\"\n    }\n}\n\r\n--7a4a1584244e79c3c5a642cc307cc3d3\r\nContent-Disposition:
      form-data; name=\"workflowInputs\"; filename=\"inputs.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n  \"WildcardsandConditions.prefix\": \"testfile\"\n}\n\r\n--7a4a1584244e79c3c5a642cc307cc3d3\r\nContent-Disposition:
      form-data; name=\"workflowOptions\"; filename=\"options.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"workflow_failure_mode\": \"ContinueWhilePossible\",\n
      \   \"write_to_cache\": false,\n    \"read_from_cache\": false\n}\n\r\n--7a4a1584244e79c3c5a642cc307cc3d3--\r\n"
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '2043'
      content-type:
      - multipart/form-data; boundary=7a4a1584244e79c3c5a642cc307cc3d3
      host:
      - gizmoj4.fhcrc.org:35141
      user-agent:
      - python-httpx/0.28.1
    method: POST
    uri: https://gizmoj4.fhcrc.org:35141/api/workflows/v1
  response:
    body:
      string: '{"id":"b5255bce-dd67-4cb6-8ff3-5b069bcbe4aa","status":"Submitted"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '66'
      Content-Type:
      - application/json
      Date:
      - Tue, 06 May 2025 15:02:07 GMT
      Server:
      - nginx/1.25.3
    status:
      code: 201
      message: Created
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj4.fhcrc.org:35141
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj4.fhcrc.org:35141/api/workflows/v1/b5255bce-dd67-4cb6-8ff3-5b069bcbe4aa/metadata?expandSubWorkflows=true
  response:
    body:
      string: "{\n  \"status\": \"fail\",\n  \"message\": \"Unrecognized workflow
        ID: b5255bce-dd67-4cb6-8ff3-5b069bcbe4aa\"\n}"
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 06 May 2025 15:02:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '101'
    status:
      code: 404
      message: Not Found
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj4.fhcrc.org:35141
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj4.fhcrc.org:35141/api/workflows/v1/b5255bce-dd67-4cb6-8ff3-5b069bcbe4aa/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow WildcardsandConditions
        {\n    input {\n        String prefix  # Required input for the file prefix
        (no default value)\n    }\n\n    call wildcard_and_conditions_test {\n        input:\n            prefix
        = prefix  # Explicitly pass the workflow input to the task\n    }\n\n    output
        {\n        Array[File] txt_files = wildcard_and_conditions_test.txt_files\n        String
        conditional_result = wildcard_and_conditions_test.conditional_output\n    }\n}\n\ntask
        wildcard_and_conditions_test {\n    input {\n        String prefix  # Required
        input for file creation\n        Boolean create_extra_file = true  # Default
        value for conditional logic\n    }\n\n    command <<<\n        # Create multiple
        .txt files to test wildcard resolution\n        for i in {1..3}; do\n            echo
        \"File content $i\" > \"~{prefix}_$i.txt\"\n        done\n\n        # Create
        an extra file conditionally\n        if [[ ~{create_extra_file} == \"true\"
        ]]; then\n            echo \"Extra file content\" > ~{prefix}_extra.txt\n        fi\n\n        #
        Parse inputs directly in the command\n        echo \"Parsed prefix: ~{prefix}\"
        > parsed_output.txt\n    >>>\n\n    output {\n        Array[File] txt_files
        = glob(\"*.txt\")  # Test wildcard resolution\n        String conditional_output
        = read_string(\"parsed_output.txt\")  # Verify input parsing\n    }\n\n    runtime
        {\n        docker: \"ubuntu:20.04\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"WildcardsandConditions.prefix\":\"testfile\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"b5255bce-dd67-4cb6-8ff3-5b069bcbe4aa","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-b5255bce-dd67-4cb6-8ff3-5b069bcbe4aa"},"submission":"2025-05-06T15:02:07.821Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Tue, 06 May 2025 15:02:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1917'
    status:
      code: 200
      message: OK
version: 1
