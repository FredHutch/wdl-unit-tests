interactions:
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow ArrayOperations
        {\n    input {\n        # Input arrays for different tests\n        Array[String]
        strings\n        Array[String] additional_strings = []  # For testing array
        concatenation\n        Array[Array[String]] nested_arrays = []  # For testing
        nested arrays\n        Array[Int] numbers = [1, 2, 3, 4, 5]  # Default integer
        array for numeric operations\n        Array[File] input_files = [] # Array
        of files to test file operations\n    }\n    \n    # Scatter operation to
        test processing of each element in an array\n    # Test empty arrays (original
        operation still works with empty input)\n    scatter (str in strings) {\n        call
        Uppercase { input: text = str }\n    }\n    \n    # Test array indexing (accessing
        first and last elements)\n    if (length(strings) > 0) {\n        call ValidateIndex
        { input: arr = strings }\n    }\n    \n    # Test array functions like sorting,
        length calculation, and flattening\n    call ArrayFunctions { \n        input:
        \n            arr = strings,\n            nested = nested_arrays\n    }\n    \n    #
        Test array concatenation and verify the combined length\n    Array[String]
        combined = flatten([strings, additional_strings])\n    call ArrayConcat {\n        input:
        \n            arr1 = strings,\n            arr2 = additional_strings,\n            expected_length
        = length(combined)\n    }\n    \n    # Test integer array operations like
        summation and combining arrays\n    Array[Int] more_numbers = [6, 7, 8, 9,
        10]  # Intermediate array declaration\n    call IntegerArrayOps {\n        input:\n            numbers
        = numbers,\n            additional_numbers = more_numbers\n    }\n\n    #
        Test file array operations like localization and content reading\n    if (length(input_files)
        > 0) {\n        call FileArrayOps {\n            input:\n                files
        = input_files\n        }\n    }\n    # Outputs to capture results of the tests\n    output
        {\n        Array[String] uppercased = Uppercase.out # Outputs from scatter
        task\n        Int? first_index = ValidateIndex.first_index # First index in
        string array\n        Int? last_index = ValidateIndex.last_index # Last index
        in string array\n        Array[String] sorted_array = ArrayFunctions.sorted
        # Sorted array\n        Array[Array[String]] processed_nested = ArrayFunctions.processed_nested
        # Processed nested array\n        Boolean concat_test_passed = ArrayConcat.test_passed
        # Result of concatenation test\n        Int array_length = ArrayFunctions.arr_length
        # Length of input array\n        Array[String] flattened = ArrayFunctions.flattened
        # Flattened nested arrays\n        # New outputs for integer array operations
        \n        Int sum_result = IntegerArrayOps.sum # Sum of integer array\n        Array[Int]
        combined_numbers = IntegerArrayOps.combined # Combined integer arrays\n        #
        New outputs for file array operations\n        Array[String]? file_contents
        = FileArrayOps.contents # Contents of files\n        Boolean? files_localized
        = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:27:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8116'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow ArrayOperations
        {\n    input {\n        # Input arrays for different tests\n        Array[String]
        strings\n        Array[String] additional_strings = []  # For testing array
        concatenation\n        Array[Array[String]] nested_arrays = []  # For testing
        nested arrays\n        Array[Int] numbers = [1, 2, 3, 4, 5]  # Default integer
        array for numeric operations\n        Array[File] input_files = [] # Array
        of files to test file operations\n    }\n    \n    # Scatter operation to
        test processing of each element in an array\n    # Test empty arrays (original
        operation still works with empty input)\n    scatter (str in strings) {\n        call
        Uppercase { input: text = str }\n    }\n    \n    # Test array indexing (accessing
        first and last elements)\n    if (length(strings) > 0) {\n        call ValidateIndex
        { input: arr = strings }\n    }\n    \n    # Test array functions like sorting,
        length calculation, and flattening\n    call ArrayFunctions { \n        input:
        \n            arr = strings,\n            nested = nested_arrays\n    }\n    \n    #
        Test array concatenation and verify the combined length\n    Array[String]
        combined = flatten([strings, additional_strings])\n    call ArrayConcat {\n        input:
        \n            arr1 = strings,\n            arr2 = additional_strings,\n            expected_length
        = length(combined)\n    }\n    \n    # Test integer array operations like
        summation and combining arrays\n    Array[Int] more_numbers = [6, 7, 8, 9,
        10]  # Intermediate array declaration\n    call IntegerArrayOps {\n        input:\n            numbers
        = numbers,\n            additional_numbers = more_numbers\n    }\n\n    #
        Test file array operations like localization and content reading\n    if (length(input_files)
        > 0) {\n        call FileArrayOps {\n            input:\n                files
        = input_files\n        }\n    }\n    # Outputs to capture results of the tests\n    output
        {\n        Array[String] uppercased = Uppercase.out # Outputs from scatter
        task\n        Int? first_index = ValidateIndex.first_index # First index in
        string array\n        Int? last_index = ValidateIndex.last_index # Last index
        in string array\n        Array[String] sorted_array = ArrayFunctions.sorted
        # Sorted array\n        Array[Array[String]] processed_nested = ArrayFunctions.processed_nested
        # Processed nested array\n        Boolean concat_test_passed = ArrayConcat.test_passed
        # Result of concatenation test\n        Int array_length = ArrayFunctions.arr_length
        # Length of input array\n        Array[String] flattened = ArrayFunctions.flattened
        # Flattened nested arrays\n        # New outputs for integer array operations
        \n        Int sum_result = IntegerArrayOps.sum # Sum of integer array\n        Array[Int]
        combined_numbers = IntegerArrayOps.combined # Combined integer arrays\n        #
        New outputs for file array operations\n        Array[String]? file_contents
        = FileArrayOps.contents # Contents of files\n        Boolean? files_localized
        = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:27:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8116'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow ArrayOperations
        {\n    input {\n        # Input arrays for different tests\n        Array[String]
        strings\n        Array[String] additional_strings = []  # For testing array
        concatenation\n        Array[Array[String]] nested_arrays = []  # For testing
        nested arrays\n        Array[Int] numbers = [1, 2, 3, 4, 5]  # Default integer
        array for numeric operations\n        Array[File] input_files = [] # Array
        of files to test file operations\n    }\n    \n    # Scatter operation to
        test processing of each element in an array\n    # Test empty arrays (original
        operation still works with empty input)\n    scatter (str in strings) {\n        call
        Uppercase { input: text = str }\n    }\n    \n    # Test array indexing (accessing
        first and last elements)\n    if (length(strings) > 0) {\n        call ValidateIndex
        { input: arr = strings }\n    }\n    \n    # Test array functions like sorting,
        length calculation, and flattening\n    call ArrayFunctions { \n        input:
        \n            arr = strings,\n            nested = nested_arrays\n    }\n    \n    #
        Test array concatenation and verify the combined length\n    Array[String]
        combined = flatten([strings, additional_strings])\n    call ArrayConcat {\n        input:
        \n            arr1 = strings,\n            arr2 = additional_strings,\n            expected_length
        = length(combined)\n    }\n    \n    # Test integer array operations like
        summation and combining arrays\n    Array[Int] more_numbers = [6, 7, 8, 9,
        10]  # Intermediate array declaration\n    call IntegerArrayOps {\n        input:\n            numbers
        = numbers,\n            additional_numbers = more_numbers\n    }\n\n    #
        Test file array operations like localization and content reading\n    if (length(input_files)
        > 0) {\n        call FileArrayOps {\n            input:\n                files
        = input_files\n        }\n    }\n    # Outputs to capture results of the tests\n    output
        {\n        Array[String] uppercased = Uppercase.out # Outputs from scatter
        task\n        Int? first_index = ValidateIndex.first_index # First index in
        string array\n        Int? last_index = ValidateIndex.last_index # Last index
        in string array\n        Array[String] sorted_array = ArrayFunctions.sorted
        # Sorted array\n        Array[Array[String]] processed_nested = ArrayFunctions.processed_nested
        # Processed nested array\n        Boolean concat_test_passed = ArrayConcat.test_passed
        # Result of concatenation test\n        Int array_length = ArrayFunctions.arr_length
        # Length of input array\n        Array[String] flattened = ArrayFunctions.flattened
        # Flattened nested arrays\n        # New outputs for integer array operations
        \n        Int sum_result = IntegerArrayOps.sum # Sum of integer array\n        Array[Int]
        combined_numbers = IntegerArrayOps.combined # Combined integer arrays\n        #
        New outputs for file array operations\n        Array[String]? file_contents
        = FileArrayOps.contents # Contents of files\n        Boolean? files_localized
        = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:27:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8116'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow ArrayOperations
        {\n    input {\n        # Input arrays for different tests\n        Array[String]
        strings\n        Array[String] additional_strings = []  # For testing array
        concatenation\n        Array[Array[String]] nested_arrays = []  # For testing
        nested arrays\n        Array[Int] numbers = [1, 2, 3, 4, 5]  # Default integer
        array for numeric operations\n        Array[File] input_files = [] # Array
        of files to test file operations\n    }\n    \n    # Scatter operation to
        test processing of each element in an array\n    # Test empty arrays (original
        operation still works with empty input)\n    scatter (str in strings) {\n        call
        Uppercase { input: text = str }\n    }\n    \n    # Test array indexing (accessing
        first and last elements)\n    if (length(strings) > 0) {\n        call ValidateIndex
        { input: arr = strings }\n    }\n    \n    # Test array functions like sorting,
        length calculation, and flattening\n    call ArrayFunctions { \n        input:
        \n            arr = strings,\n            nested = nested_arrays\n    }\n    \n    #
        Test array concatenation and verify the combined length\n    Array[String]
        combined = flatten([strings, additional_strings])\n    call ArrayConcat {\n        input:
        \n            arr1 = strings,\n            arr2 = additional_strings,\n            expected_length
        = length(combined)\n    }\n    \n    # Test integer array operations like
        summation and combining arrays\n    Array[Int] more_numbers = [6, 7, 8, 9,
        10]  # Intermediate array declaration\n    call IntegerArrayOps {\n        input:\n            numbers
        = numbers,\n            additional_numbers = more_numbers\n    }\n\n    #
        Test file array operations like localization and content reading\n    if (length(input_files)
        > 0) {\n        call FileArrayOps {\n            input:\n                files
        = input_files\n        }\n    }\n    # Outputs to capture results of the tests\n    output
        {\n        Array[String] uppercased = Uppercase.out # Outputs from scatter
        task\n        Int? first_index = ValidateIndex.first_index # First index in
        string array\n        Int? last_index = ValidateIndex.last_index # Last index
        in string array\n        Array[String] sorted_array = ArrayFunctions.sorted
        # Sorted array\n        Array[Array[String]] processed_nested = ArrayFunctions.processed_nested
        # Processed nested array\n        Boolean concat_test_passed = ArrayConcat.test_passed
        # Result of concatenation test\n        Int array_length = ArrayFunctions.arr_length
        # Length of input array\n        Array[String] flattened = ArrayFunctions.flattened
        # Flattened nested arrays\n        # New outputs for integer array operations
        \n        Int sum_result = IntegerArrayOps.sum # Sum of integer array\n        Array[Int]
        combined_numbers = IntegerArrayOps.combined # Combined integer arrays\n        #
        New outputs for file array operations\n        Array[String]? file_contents
        = FileArrayOps.contents # Contents of files\n        Boolean? files_localized
        = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:27:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8116'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow ArrayOperations
        {\n    input {\n        # Input arrays for different tests\n        Array[String]
        strings\n        Array[String] additional_strings = []  # For testing array
        concatenation\n        Array[Array[String]] nested_arrays = []  # For testing
        nested arrays\n        Array[Int] numbers = [1, 2, 3, 4, 5]  # Default integer
        array for numeric operations\n        Array[File] input_files = [] # Array
        of files to test file operations\n    }\n    \n    # Scatter operation to
        test processing of each element in an array\n    # Test empty arrays (original
        operation still works with empty input)\n    scatter (str in strings) {\n        call
        Uppercase { input: text = str }\n    }\n    \n    # Test array indexing (accessing
        first and last elements)\n    if (length(strings) > 0) {\n        call ValidateIndex
        { input: arr = strings }\n    }\n    \n    # Test array functions like sorting,
        length calculation, and flattening\n    call ArrayFunctions { \n        input:
        \n            arr = strings,\n            nested = nested_arrays\n    }\n    \n    #
        Test array concatenation and verify the combined length\n    Array[String]
        combined = flatten([strings, additional_strings])\n    call ArrayConcat {\n        input:
        \n            arr1 = strings,\n            arr2 = additional_strings,\n            expected_length
        = length(combined)\n    }\n    \n    # Test integer array operations like
        summation and combining arrays\n    Array[Int] more_numbers = [6, 7, 8, 9,
        10]  # Intermediate array declaration\n    call IntegerArrayOps {\n        input:\n            numbers
        = numbers,\n            additional_numbers = more_numbers\n    }\n\n    #
        Test file array operations like localization and content reading\n    if (length(input_files)
        > 0) {\n        call FileArrayOps {\n            input:\n                files
        = input_files\n        }\n    }\n    # Outputs to capture results of the tests\n    output
        {\n        Array[String] uppercased = Uppercase.out # Outputs from scatter
        task\n        Int? first_index = ValidateIndex.first_index # First index in
        string array\n        Int? last_index = ValidateIndex.last_index # Last index
        in string array\n        Array[String] sorted_array = ArrayFunctions.sorted
        # Sorted array\n        Array[Array[String]] processed_nested = ArrayFunctions.processed_nested
        # Processed nested array\n        Boolean concat_test_passed = ArrayConcat.test_passed
        # Result of concatenation test\n        Int array_length = ArrayFunctions.arr_length
        # Length of input array\n        Array[String] flattened = ArrayFunctions.flattened
        # Flattened nested arrays\n        # New outputs for integer array operations
        \n        Int sum_result = IntegerArrayOps.sum # Sum of integer array\n        Array[Int]
        combined_numbers = IntegerArrayOps.combined # Combined integer arrays\n        #
        New outputs for file array operations\n        Array[String]? file_contents
        = FileArrayOps.contents # Contents of files\n        Boolean? files_localized
        = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:27:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8116'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow ArrayOperations
        {\n    input {\n        # Input arrays for different tests\n        Array[String]
        strings\n        Array[String] additional_strings = []  # For testing array
        concatenation\n        Array[Array[String]] nested_arrays = []  # For testing
        nested arrays\n        Array[Int] numbers = [1, 2, 3, 4, 5]  # Default integer
        array for numeric operations\n        Array[File] input_files = [] # Array
        of files to test file operations\n    }\n    \n    # Scatter operation to
        test processing of each element in an array\n    # Test empty arrays (original
        operation still works with empty input)\n    scatter (str in strings) {\n        call
        Uppercase { input: text = str }\n    }\n    \n    # Test array indexing (accessing
        first and last elements)\n    if (length(strings) > 0) {\n        call ValidateIndex
        { input: arr = strings }\n    }\n    \n    # Test array functions like sorting,
        length calculation, and flattening\n    call ArrayFunctions { \n        input:
        \n            arr = strings,\n            nested = nested_arrays\n    }\n    \n    #
        Test array concatenation and verify the combined length\n    Array[String]
        combined = flatten([strings, additional_strings])\n    call ArrayConcat {\n        input:
        \n            arr1 = strings,\n            arr2 = additional_strings,\n            expected_length
        = length(combined)\n    }\n    \n    # Test integer array operations like
        summation and combining arrays\n    Array[Int] more_numbers = [6, 7, 8, 9,
        10]  # Intermediate array declaration\n    call IntegerArrayOps {\n        input:\n            numbers
        = numbers,\n            additional_numbers = more_numbers\n    }\n\n    #
        Test file array operations like localization and content reading\n    if (length(input_files)
        > 0) {\n        call FileArrayOps {\n            input:\n                files
        = input_files\n        }\n    }\n    # Outputs to capture results of the tests\n    output
        {\n        Array[String] uppercased = Uppercase.out # Outputs from scatter
        task\n        Int? first_index = ValidateIndex.first_index # First index in
        string array\n        Int? last_index = ValidateIndex.last_index # Last index
        in string array\n        Array[String] sorted_array = ArrayFunctions.sorted
        # Sorted array\n        Array[Array[String]] processed_nested = ArrayFunctions.processed_nested
        # Processed nested array\n        Boolean concat_test_passed = ArrayConcat.test_passed
        # Result of concatenation test\n        Int array_length = ArrayFunctions.arr_length
        # Length of input array\n        Array[String] flattened = ArrayFunctions.flattened
        # Flattened nested arrays\n        # New outputs for integer array operations
        \n        Int sum_result = IntegerArrayOps.sum # Sum of integer array\n        Array[Int]
        combined_numbers = IntegerArrayOps.combined # Combined integer arrays\n        #
        New outputs for file array operations\n        Array[String]? file_contents
        = FileArrayOps.contents # Contents of files\n        Boolean? files_localized
        = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:27:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8116'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow ArrayOperations
        {\n    input {\n        # Input arrays for different tests\n        Array[String]
        strings\n        Array[String] additional_strings = []  # For testing array
        concatenation\n        Array[Array[String]] nested_arrays = []  # For testing
        nested arrays\n        Array[Int] numbers = [1, 2, 3, 4, 5]  # Default integer
        array for numeric operations\n        Array[File] input_files = [] # Array
        of files to test file operations\n    }\n    \n    # Scatter operation to
        test processing of each element in an array\n    # Test empty arrays (original
        operation still works with empty input)\n    scatter (str in strings) {\n        call
        Uppercase { input: text = str }\n    }\n    \n    # Test array indexing (accessing
        first and last elements)\n    if (length(strings) > 0) {\n        call ValidateIndex
        { input: arr = strings }\n    }\n    \n    # Test array functions like sorting,
        length calculation, and flattening\n    call ArrayFunctions { \n        input:
        \n            arr = strings,\n            nested = nested_arrays\n    }\n    \n    #
        Test array concatenation and verify the combined length\n    Array[String]
        combined = flatten([strings, additional_strings])\n    call ArrayConcat {\n        input:
        \n            arr1 = strings,\n            arr2 = additional_strings,\n            expected_length
        = length(combined)\n    }\n    \n    # Test integer array operations like
        summation and combining arrays\n    Array[Int] more_numbers = [6, 7, 8, 9,
        10]  # Intermediate array declaration\n    call IntegerArrayOps {\n        input:\n            numbers
        = numbers,\n            additional_numbers = more_numbers\n    }\n\n    #
        Test file array operations like localization and content reading\n    if (length(input_files)
        > 0) {\n        call FileArrayOps {\n            input:\n                files
        = input_files\n        }\n    }\n    # Outputs to capture results of the tests\n    output
        {\n        Array[String] uppercased = Uppercase.out # Outputs from scatter
        task\n        Int? first_index = ValidateIndex.first_index # First index in
        string array\n        Int? last_index = ValidateIndex.last_index # Last index
        in string array\n        Array[String] sorted_array = ArrayFunctions.sorted
        # Sorted array\n        Array[Array[String]] processed_nested = ArrayFunctions.processed_nested
        # Processed nested array\n        Boolean concat_test_passed = ArrayConcat.test_passed
        # Result of concatenation test\n        Int array_length = ArrayFunctions.arr_length
        # Length of input array\n        Array[String] flattened = ArrayFunctions.flattened
        # Flattened nested arrays\n        # New outputs for integer array operations
        \n        Int sum_result = IntegerArrayOps.sum # Sum of integer array\n        Array[Int]
        combined_numbers = IntegerArrayOps.combined # Combined integer arrays\n        #
        New outputs for file array operations\n        Array[String]? file_contents
        = FileArrayOps.contents # Contents of files\n        Boolean? files_localized
        = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:27:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8116'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow ArrayOperations
        {\n    input {\n        # Input arrays for different tests\n        Array[String]
        strings\n        Array[String] additional_strings = []  # For testing array
        concatenation\n        Array[Array[String]] nested_arrays = []  # For testing
        nested arrays\n        Array[Int] numbers = [1, 2, 3, 4, 5]  # Default integer
        array for numeric operations\n        Array[File] input_files = [] # Array
        of files to test file operations\n    }\n    \n    # Scatter operation to
        test processing of each element in an array\n    # Test empty arrays (original
        operation still works with empty input)\n    scatter (str in strings) {\n        call
        Uppercase { input: text = str }\n    }\n    \n    # Test array indexing (accessing
        first and last elements)\n    if (length(strings) > 0) {\n        call ValidateIndex
        { input: arr = strings }\n    }\n    \n    # Test array functions like sorting,
        length calculation, and flattening\n    call ArrayFunctions { \n        input:
        \n            arr = strings,\n            nested = nested_arrays\n    }\n    \n    #
        Test array concatenation and verify the combined length\n    Array[String]
        combined = flatten([strings, additional_strings])\n    call ArrayConcat {\n        input:
        \n            arr1 = strings,\n            arr2 = additional_strings,\n            expected_length
        = length(combined)\n    }\n    \n    # Test integer array operations like
        summation and combining arrays\n    Array[Int] more_numbers = [6, 7, 8, 9,
        10]  # Intermediate array declaration\n    call IntegerArrayOps {\n        input:\n            numbers
        = numbers,\n            additional_numbers = more_numbers\n    }\n\n    #
        Test file array operations like localization and content reading\n    if (length(input_files)
        > 0) {\n        call FileArrayOps {\n            input:\n                files
        = input_files\n        }\n    }\n    # Outputs to capture results of the tests\n    output
        {\n        Array[String] uppercased = Uppercase.out # Outputs from scatter
        task\n        Int? first_index = ValidateIndex.first_index # First index in
        string array\n        Int? last_index = ValidateIndex.last_index # Last index
        in string array\n        Array[String] sorted_array = ArrayFunctions.sorted
        # Sorted array\n        Array[Array[String]] processed_nested = ArrayFunctions.processed_nested
        # Processed nested array\n        Boolean concat_test_passed = ArrayConcat.test_passed
        # Result of concatenation test\n        Int array_length = ArrayFunctions.arr_length
        # Length of input array\n        Array[String] flattened = ArrayFunctions.flattened
        # Flattened nested arrays\n        # New outputs for integer array operations
        \n        Int sum_result = IntegerArrayOps.sum # Sum of integer array\n        Array[Int]
        combined_numbers = IntegerArrayOps.combined # Combined integer arrays\n        #
        New outputs for file array operations\n        Array[String]? file_contents
        = FileArrayOps.contents # Contents of files\n        Boolean? files_localized
        = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:27:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8116'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow ArrayOperations
        {\n    input {\n        # Input arrays for different tests\n        Array[String]
        strings\n        Array[String] additional_strings = []  # For testing array
        concatenation\n        Array[Array[String]] nested_arrays = []  # For testing
        nested arrays\n        Array[Int] numbers = [1, 2, 3, 4, 5]  # Default integer
        array for numeric operations\n        Array[File] input_files = [] # Array
        of files to test file operations\n    }\n    \n    # Scatter operation to
        test processing of each element in an array\n    # Test empty arrays (original
        operation still works with empty input)\n    scatter (str in strings) {\n        call
        Uppercase { input: text = str }\n    }\n    \n    # Test array indexing (accessing
        first and last elements)\n    if (length(strings) > 0) {\n        call ValidateIndex
        { input: arr = strings }\n    }\n    \n    # Test array functions like sorting,
        length calculation, and flattening\n    call ArrayFunctions { \n        input:
        \n            arr = strings,\n            nested = nested_arrays\n    }\n    \n    #
        Test array concatenation and verify the combined length\n    Array[String]
        combined = flatten([strings, additional_strings])\n    call ArrayConcat {\n        input:
        \n            arr1 = strings,\n            arr2 = additional_strings,\n            expected_length
        = length(combined)\n    }\n    \n    # Test integer array operations like
        summation and combining arrays\n    Array[Int] more_numbers = [6, 7, 8, 9,
        10]  # Intermediate array declaration\n    call IntegerArrayOps {\n        input:\n            numbers
        = numbers,\n            additional_numbers = more_numbers\n    }\n\n    #
        Test file array operations like localization and content reading\n    if (length(input_files)
        > 0) {\n        call FileArrayOps {\n            input:\n                files
        = input_files\n        }\n    }\n    # Outputs to capture results of the tests\n    output
        {\n        Array[String] uppercased = Uppercase.out # Outputs from scatter
        task\n        Int? first_index = ValidateIndex.first_index # First index in
        string array\n        Int? last_index = ValidateIndex.last_index # Last index
        in string array\n        Array[String] sorted_array = ArrayFunctions.sorted
        # Sorted array\n        Array[Array[String]] processed_nested = ArrayFunctions.processed_nested
        # Processed nested array\n        Boolean concat_test_passed = ArrayConcat.test_passed
        # Result of concatenation test\n        Int array_length = ArrayFunctions.arr_length
        # Length of input array\n        Array[String] flattened = ArrayFunctions.flattened
        # Flattened nested arrays\n        # New outputs for integer array operations
        \n        Int sum_result = IntegerArrayOps.sum # Sum of integer array\n        Array[Int]
        combined_numbers = IntegerArrayOps.combined # Combined integer arrays\n        #
        New outputs for file array operations\n        Array[String]? file_contents
        = FileArrayOps.contents # Contents of files\n        Boolean? files_localized
        = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:27:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8116'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"ArrayOperations","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:27:54.866Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow ArrayOperations {\n    input {\n        # Input arrays for
        different tests\n        Array[String] strings\n        Array[String] additional_strings
        = []  # For testing array concatenation\n        Array[Array[String]] nested_arrays
        = []  # For testing nested arrays\n        Array[Int] numbers = [1, 2, 3,
        4, 5]  # Default integer array for numeric operations\n        Array[File]
        input_files = [] # Array of files to test file operations\n    }\n    \n    #
        Scatter operation to test processing of each element in an array\n    # Test
        empty arrays (original operation still works with empty input)\n    scatter
        (str in strings) {\n        call Uppercase { input: text = str }\n    }\n    \n    #
        Test array indexing (accessing first and last elements)\n    if (length(strings)
        > 0) {\n        call ValidateIndex { input: arr = strings }\n    }\n    \n    #
        Test array functions like sorting, length calculation, and flattening\n    call
        ArrayFunctions { \n        input: \n            arr = strings,\n            nested
        = nested_arrays\n    }\n    \n    # Test array concatenation and verify the
        combined length\n    Array[String] combined = flatten([strings, additional_strings])\n    call
        ArrayConcat {\n        input: \n            arr1 = strings,\n            arr2
        = additional_strings,\n            expected_length = length(combined)\n    }\n    \n    #
        Test integer array operations like summation and combining arrays\n    Array[Int]
        more_numbers = [6, 7, 8, 9, 10]  # Intermediate array declaration\n    call
        IntegerArrayOps {\n        input:\n            numbers = numbers,\n            additional_numbers
        = more_numbers\n    }\n\n    # Test file array operations like localization
        and content reading\n    if (length(input_files) > 0) {\n        call FileArrayOps
        {\n            input:\n                files = input_files\n        }\n    }\n    #
        Outputs to capture results of the tests\n    output {\n        Array[String]
        uppercased = Uppercase.out # Outputs from scatter task\n        Int? first_index
        = ValidateIndex.first_index # First index in string array\n        Int? last_index
        = ValidateIndex.last_index # Last index in string array\n        Array[String]
        sorted_array = ArrayFunctions.sorted # Sorted array\n        Array[Array[String]]
        processed_nested = ArrayFunctions.processed_nested # Processed nested array\n        Boolean
        concat_test_passed = ArrayConcat.test_passed # Result of concatenation test\n        Int
        array_length = ArrayFunctions.arr_length # Length of input array\n        Array[String]
        flattened = ArrayFunctions.flattened # Flattened nested arrays\n        #
        New outputs for integer array operations \n        Int sum_result = IntegerArrayOps.sum
        # Sum of integer array\n        Array[Int] combined_numbers = IntegerArrayOps.combined
        # Combined integer arrays\n        # New outputs for file array operations\n        Array[String]?
        file_contents = FileArrayOps.contents # Contents of files\n        Boolean?
        files_localized = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{"ArrayOperations.ArrayFunctions":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:56.989Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-06T05:27:54.867Z","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{"input_files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"],"additional_strings":["foo","bar"],"numbers":[1,2,3,4,5],"strings":["hello","world","test"],"nested_arrays":[["nested1","nested2"],["nested3","nested4"]]},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:28:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '8944'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"ArrayOperations","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:27:54.866Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow ArrayOperations {\n    input {\n        # Input arrays for
        different tests\n        Array[String] strings\n        Array[String] additional_strings
        = []  # For testing array concatenation\n        Array[Array[String]] nested_arrays
        = []  # For testing nested arrays\n        Array[Int] numbers = [1, 2, 3,
        4, 5]  # Default integer array for numeric operations\n        Array[File]
        input_files = [] # Array of files to test file operations\n    }\n    \n    #
        Scatter operation to test processing of each element in an array\n    # Test
        empty arrays (original operation still works with empty input)\n    scatter
        (str in strings) {\n        call Uppercase { input: text = str }\n    }\n    \n    #
        Test array indexing (accessing first and last elements)\n    if (length(strings)
        > 0) {\n        call ValidateIndex { input: arr = strings }\n    }\n    \n    #
        Test array functions like sorting, length calculation, and flattening\n    call
        ArrayFunctions { \n        input: \n            arr = strings,\n            nested
        = nested_arrays\n    }\n    \n    # Test array concatenation and verify the
        combined length\n    Array[String] combined = flatten([strings, additional_strings])\n    call
        ArrayConcat {\n        input: \n            arr1 = strings,\n            arr2
        = additional_strings,\n            expected_length = length(combined)\n    }\n    \n    #
        Test integer array operations like summation and combining arrays\n    Array[Int]
        more_numbers = [6, 7, 8, 9, 10]  # Intermediate array declaration\n    call
        IntegerArrayOps {\n        input:\n            numbers = numbers,\n            additional_numbers
        = more_numbers\n    }\n\n    # Test file array operations like localization
        and content reading\n    if (length(input_files) > 0) {\n        call FileArrayOps
        {\n            input:\n                files = input_files\n        }\n    }\n    #
        Outputs to capture results of the tests\n    output {\n        Array[String]
        uppercased = Uppercase.out # Outputs from scatter task\n        Int? first_index
        = ValidateIndex.first_index # First index in string array\n        Int? last_index
        = ValidateIndex.last_index # Last index in string array\n        Array[String]
        sorted_array = ArrayFunctions.sorted # Sorted array\n        Array[Array[String]]
        processed_nested = ArrayFunctions.processed_nested # Processed nested array\n        Boolean
        concat_test_passed = ArrayConcat.test_passed # Result of concatenation test\n        Int
        array_length = ArrayFunctions.arr_length # Length of input array\n        Array[String]
        flattened = ArrayFunctions.flattened # Flattened nested arrays\n        #
        New outputs for integer array operations \n        Int sum_result = IntegerArrayOps.sum
        # Sum of integer array\n        Array[Int] combined_numbers = IntegerArrayOps.combined
        # Combined integer arrays\n        # New outputs for file array operations\n        Array[String]?
        file_contents = FileArrayOps.contents # Contents of files\n        Boolean?
        files_localized = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{"ArrayOperations.ArrayConcat":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:58.008Z"}],"ArrayOperations.FileArrayOps":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z"}],"ArrayOperations.ArrayFunctions":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:56.989Z"}],"ArrayOperations.IntegerArrayOps":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:58.009Z"}],"ArrayOperations.ValidateIndex":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z"}],"ArrayOperations.Uppercase":[{"executionStatus":"QueuedInCromwell","shardIndex":0,"backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z"},{"executionStatus":"QueuedInCromwell","shardIndex":1,"backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z"},{"executionStatus":"QueuedInCromwell","shardIndex":2,"backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-06T05:27:54.867Z","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{"input_files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"],"additional_strings":["foo","bar"],"numbers":[1,2,3,4,5],"strings":["hello","world","test"],"nested_arrays":[["nested1","nested2"],["nested3","nested4"]]},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:28:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '9946'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"ArrayOperations","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:27:54.866Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow ArrayOperations {\n    input {\n        # Input arrays for
        different tests\n        Array[String] strings\n        Array[String] additional_strings
        = []  # For testing array concatenation\n        Array[Array[String]] nested_arrays
        = []  # For testing nested arrays\n        Array[Int] numbers = [1, 2, 3,
        4, 5]  # Default integer array for numeric operations\n        Array[File]
        input_files = [] # Array of files to test file operations\n    }\n    \n    #
        Scatter operation to test processing of each element in an array\n    # Test
        empty arrays (original operation still works with empty input)\n    scatter
        (str in strings) {\n        call Uppercase { input: text = str }\n    }\n    \n    #
        Test array indexing (accessing first and last elements)\n    if (length(strings)
        > 0) {\n        call ValidateIndex { input: arr = strings }\n    }\n    \n    #
        Test array functions like sorting, length calculation, and flattening\n    call
        ArrayFunctions { \n        input: \n            arr = strings,\n            nested
        = nested_arrays\n    }\n    \n    # Test array concatenation and verify the
        combined length\n    Array[String] combined = flatten([strings, additional_strings])\n    call
        ArrayConcat {\n        input: \n            arr1 = strings,\n            arr2
        = additional_strings,\n            expected_length = length(combined)\n    }\n    \n    #
        Test integer array operations like summation and combining arrays\n    Array[Int]
        more_numbers = [6, 7, 8, 9, 10]  # Intermediate array declaration\n    call
        IntegerArrayOps {\n        input:\n            numbers = numbers,\n            additional_numbers
        = more_numbers\n    }\n\n    # Test file array operations like localization
        and content reading\n    if (length(input_files) > 0) {\n        call FileArrayOps
        {\n            input:\n                files = input_files\n        }\n    }\n    #
        Outputs to capture results of the tests\n    output {\n        Array[String]
        uppercased = Uppercase.out # Outputs from scatter task\n        Int? first_index
        = ValidateIndex.first_index # First index in string array\n        Int? last_index
        = ValidateIndex.last_index # Last index in string array\n        Array[String]
        sorted_array = ArrayFunctions.sorted # Sorted array\n        Array[Array[String]]
        processed_nested = ArrayFunctions.processed_nested # Processed nested array\n        Boolean
        concat_test_passed = ArrayConcat.test_passed # Result of concatenation test\n        Int
        array_length = ArrayFunctions.arr_length # Length of input array\n        Array[String]
        flattened = ArrayFunctions.flattened # Flattened nested arrays\n        #
        New outputs for integer array operations \n        Int sum_result = IntegerArrayOps.sum
        # Sum of integer array\n        Array[Int] combined_numbers = IntegerArrayOps.combined
        # Combined integer arrays\n        # New outputs for file array operations\n        Array[String]?
        file_contents = FileArrayOps.contents # Contents of files\n        Boolean?
        files_localized = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{"ArrayOperations.ArrayConcat":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stdout","commandLine":"actual_length=$((
        3 + 2 ))\nif [ \"$actual_length\" -eq 5 ]; then\n    echo \"true\"\nelse\n    echo
        \"false\"\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"expected_length":5,"arr1":["hello","world","test"],"arr2":["foo","bar"]},"backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:58.008Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat"}],"ArrayOperations.FileArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stdout","commandLine":"#
        Test file localization by reading contents\nfor file in /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test1.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test2.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test3.txt;
        do\n    if [ -f \"$file\" ]; then\n        cat \"$file\" >> all_contents.txt\n        echo
        \"---\" >> all_contents.txt  # Separator between files\n    else\n        echo
        \"false\" > localization_success.txt\n        exit 1\n    fi\ndone\necho \"true\"
        > localization_success.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"]},"backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps"}],"ArrayOperations.ArrayFunctions":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stdout","commandLine":"#
        Sort the input array using bash\necho \"hello\nworld\ntest\" | sort > sorted.txt\n\n#
        Get array length\necho \"3\" > length.txt\n\n# Process nested arrays (flatten
        them)\necho \"nested1\nnested2\nnested3\nnested4\" > flattened.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"],"nested":[["nested1","nested2"],["nested3","nested4"]]},"backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:56.989Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions"}],"ArrayOperations.IntegerArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stdout","commandLine":"        #
        Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in 1 2 3 4 5; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\" > combined.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"additional_numbers":[6,7,8,9,10],"numbers":[1,2,3,4,5]},"backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:58.009Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps"}],"ArrayOperations.ValidateIndex":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stdout","commandLine":"echo
        \"0\" > first_index.txt  # First index\necho \"2\" > last_index.txt  # Last
        index","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"]},"backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex"}],"ArrayOperations.Uppercase":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stdout","commandLine":"echo
        \"hello\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"hello"},"backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stdout","commandLine":"echo
        \"world\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"world"},"backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stdout","commandLine":"echo
        \"test\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"test"},"backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-06T05:27:54.867Z","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{"input_files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"],"additional_strings":["foo","bar"],"numbers":[1,2,3,4,5],"strings":["hello","world","test"],"nested_arrays":[["nested1","nested2"],["nested3","nested4"]]},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:28:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '17730'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"ArrayOperations","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:27:54.866Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow ArrayOperations {\n    input {\n        # Input arrays for
        different tests\n        Array[String] strings\n        Array[String] additional_strings
        = []  # For testing array concatenation\n        Array[Array[String]] nested_arrays
        = []  # For testing nested arrays\n        Array[Int] numbers = [1, 2, 3,
        4, 5]  # Default integer array for numeric operations\n        Array[File]
        input_files = [] # Array of files to test file operations\n    }\n    \n    #
        Scatter operation to test processing of each element in an array\n    # Test
        empty arrays (original operation still works with empty input)\n    scatter
        (str in strings) {\n        call Uppercase { input: text = str }\n    }\n    \n    #
        Test array indexing (accessing first and last elements)\n    if (length(strings)
        > 0) {\n        call ValidateIndex { input: arr = strings }\n    }\n    \n    #
        Test array functions like sorting, length calculation, and flattening\n    call
        ArrayFunctions { \n        input: \n            arr = strings,\n            nested
        = nested_arrays\n    }\n    \n    # Test array concatenation and verify the
        combined length\n    Array[String] combined = flatten([strings, additional_strings])\n    call
        ArrayConcat {\n        input: \n            arr1 = strings,\n            arr2
        = additional_strings,\n            expected_length = length(combined)\n    }\n    \n    #
        Test integer array operations like summation and combining arrays\n    Array[Int]
        more_numbers = [6, 7, 8, 9, 10]  # Intermediate array declaration\n    call
        IntegerArrayOps {\n        input:\n            numbers = numbers,\n            additional_numbers
        = more_numbers\n    }\n\n    # Test file array operations like localization
        and content reading\n    if (length(input_files) > 0) {\n        call FileArrayOps
        {\n            input:\n                files = input_files\n        }\n    }\n    #
        Outputs to capture results of the tests\n    output {\n        Array[String]
        uppercased = Uppercase.out # Outputs from scatter task\n        Int? first_index
        = ValidateIndex.first_index # First index in string array\n        Int? last_index
        = ValidateIndex.last_index # Last index in string array\n        Array[String]
        sorted_array = ArrayFunctions.sorted # Sorted array\n        Array[Array[String]]
        processed_nested = ArrayFunctions.processed_nested # Processed nested array\n        Boolean
        concat_test_passed = ArrayConcat.test_passed # Result of concatenation test\n        Int
        array_length = ArrayFunctions.arr_length # Length of input array\n        Array[String]
        flattened = ArrayFunctions.flattened # Flattened nested arrays\n        #
        New outputs for integer array operations \n        Int sum_result = IntegerArrayOps.sum
        # Sum of integer array\n        Array[Int] combined_numbers = IntegerArrayOps.combined
        # Combined integer arrays\n        # New outputs for file array operations\n        Array[String]?
        file_contents = FileArrayOps.contents # Contents of files\n        Boolean?
        files_localized = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{"ArrayOperations.ArrayConcat":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stdout","backendStatus":"Running","commandLine":"actual_length=$((
        3 + 2 ))\nif [ \"$actual_length\" -eq 5 ]; then\n    echo \"true\"\nelse\n    echo
        \"false\"\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"expected_length":5,"arr1":["hello","world","test"],"arr2":["foo","bar"]},"jobId":"8313543","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:58.008Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat"}],"ArrayOperations.FileArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stdout","backendStatus":"Running","commandLine":"#
        Test file localization by reading contents\nfor file in /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test1.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test2.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test3.txt;
        do\n    if [ -f \"$file\" ]; then\n        cat \"$file\" >> all_contents.txt\n        echo
        \"---\" >> all_contents.txt  # Separator between files\n    else\n        echo
        \"false\" > localization_success.txt\n        exit 1\n    fi\ndone\necho \"true\"
        > localization_success.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"]},"jobId":"8313549","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps"}],"ArrayOperations.ArrayFunctions":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stdout","backendStatus":"Running","commandLine":"#
        Sort the input array using bash\necho \"hello\nworld\ntest\" | sort > sorted.txt\n\n#
        Get array length\necho \"3\" > length.txt\n\n# Process nested arrays (flatten
        them)\necho \"nested1\nnested2\nnested3\nnested4\" > flattened.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"],"nested":[["nested1","nested2"],["nested3","nested4"]]},"jobId":"8313546","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:56.989Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions"}],"ArrayOperations.IntegerArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stdout","backendStatus":"Running","commandLine":"        #
        Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in 1 2 3 4 5; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\" > combined.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"additional_numbers":[6,7,8,9,10],"numbers":[1,2,3,4,5]},"jobId":"8313545","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:58.009Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps"}],"ArrayOperations.ValidateIndex":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"0\" > first_index.txt  # First index\necho \"2\" > last_index.txt  # Last
        index","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"]},"jobId":"8313544","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex"}],"ArrayOperations.Uppercase":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"hello\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"hello"},"jobId":"8313548","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"world\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"world"},"jobId":"8313550","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"test\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"test"},"jobId":"8313547","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-06T05:27:54.867Z","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{"input_files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"],"additional_strings":["foo","bar"],"numbers":[1,2,3,4,5],"strings":["hello","world","test"],"nested_arrays":[["nested1","nested2"],["nested3","nested4"]]},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:28:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '18082'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"ArrayOperations","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:27:54.866Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow ArrayOperations {\n    input {\n        # Input arrays for
        different tests\n        Array[String] strings\n        Array[String] additional_strings
        = []  # For testing array concatenation\n        Array[Array[String]] nested_arrays
        = []  # For testing nested arrays\n        Array[Int] numbers = [1, 2, 3,
        4, 5]  # Default integer array for numeric operations\n        Array[File]
        input_files = [] # Array of files to test file operations\n    }\n    \n    #
        Scatter operation to test processing of each element in an array\n    # Test
        empty arrays (original operation still works with empty input)\n    scatter
        (str in strings) {\n        call Uppercase { input: text = str }\n    }\n    \n    #
        Test array indexing (accessing first and last elements)\n    if (length(strings)
        > 0) {\n        call ValidateIndex { input: arr = strings }\n    }\n    \n    #
        Test array functions like sorting, length calculation, and flattening\n    call
        ArrayFunctions { \n        input: \n            arr = strings,\n            nested
        = nested_arrays\n    }\n    \n    # Test array concatenation and verify the
        combined length\n    Array[String] combined = flatten([strings, additional_strings])\n    call
        ArrayConcat {\n        input: \n            arr1 = strings,\n            arr2
        = additional_strings,\n            expected_length = length(combined)\n    }\n    \n    #
        Test integer array operations like summation and combining arrays\n    Array[Int]
        more_numbers = [6, 7, 8, 9, 10]  # Intermediate array declaration\n    call
        IntegerArrayOps {\n        input:\n            numbers = numbers,\n            additional_numbers
        = more_numbers\n    }\n\n    # Test file array operations like localization
        and content reading\n    if (length(input_files) > 0) {\n        call FileArrayOps
        {\n            input:\n                files = input_files\n        }\n    }\n    #
        Outputs to capture results of the tests\n    output {\n        Array[String]
        uppercased = Uppercase.out # Outputs from scatter task\n        Int? first_index
        = ValidateIndex.first_index # First index in string array\n        Int? last_index
        = ValidateIndex.last_index # Last index in string array\n        Array[String]
        sorted_array = ArrayFunctions.sorted # Sorted array\n        Array[Array[String]]
        processed_nested = ArrayFunctions.processed_nested # Processed nested array\n        Boolean
        concat_test_passed = ArrayConcat.test_passed # Result of concatenation test\n        Int
        array_length = ArrayFunctions.arr_length # Length of input array\n        Array[String]
        flattened = ArrayFunctions.flattened # Flattened nested arrays\n        #
        New outputs for integer array operations \n        Int sum_result = IntegerArrayOps.sum
        # Sum of integer array\n        Array[Int] combined_numbers = IntegerArrayOps.combined
        # Combined integer arrays\n        # New outputs for file array operations\n        Array[String]?
        file_contents = FileArrayOps.contents # Contents of files\n        Boolean?
        files_localized = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{"ArrayOperations.ArrayConcat":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stdout","backendStatus":"Running","commandLine":"actual_length=$((
        3 + 2 ))\nif [ \"$actual_length\" -eq 5 ]; then\n    echo \"true\"\nelse\n    echo
        \"false\"\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"expected_length":5,"arr1":["hello","world","test"],"arr2":["foo","bar"]},"jobId":"8313543","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:58.008Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat"}],"ArrayOperations.FileArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stdout","backendStatus":"Running","commandLine":"#
        Test file localization by reading contents\nfor file in /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test1.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test2.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test3.txt;
        do\n    if [ -f \"$file\" ]; then\n        cat \"$file\" >> all_contents.txt\n        echo
        \"---\" >> all_contents.txt  # Separator between files\n    else\n        echo
        \"false\" > localization_success.txt\n        exit 1\n    fi\ndone\necho \"true\"
        > localization_success.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"]},"jobId":"8313549","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps"}],"ArrayOperations.ArrayFunctions":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stdout","backendStatus":"Running","commandLine":"#
        Sort the input array using bash\necho \"hello\nworld\ntest\" | sort > sorted.txt\n\n#
        Get array length\necho \"3\" > length.txt\n\n# Process nested arrays (flatten
        them)\necho \"nested1\nnested2\nnested3\nnested4\" > flattened.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"],"nested":[["nested1","nested2"],["nested3","nested4"]]},"jobId":"8313546","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:56.989Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions"}],"ArrayOperations.IntegerArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stdout","backendStatus":"Running","commandLine":"        #
        Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in 1 2 3 4 5; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\" > combined.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"additional_numbers":[6,7,8,9,10],"numbers":[1,2,3,4,5]},"jobId":"8313545","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:58.009Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps"}],"ArrayOperations.ValidateIndex":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"0\" > first_index.txt  # First index\necho \"2\" > last_index.txt  # Last
        index","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"]},"jobId":"8313544","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex"}],"ArrayOperations.Uppercase":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"hello\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"hello"},"jobId":"8313548","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"world\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"world"},"jobId":"8313550","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"test\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"test"},"jobId":"8313547","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-06T05:27:54.867Z","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{"input_files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"],"additional_strings":["foo","bar"],"numbers":[1,2,3,4,5],"strings":["hello","world","test"],"nested_arrays":[["nested1","nested2"],["nested3","nested4"]]},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:28:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '18082'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"ArrayOperations","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:27:54.866Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow ArrayOperations {\n    input {\n        # Input arrays for
        different tests\n        Array[String] strings\n        Array[String] additional_strings
        = []  # For testing array concatenation\n        Array[Array[String]] nested_arrays
        = []  # For testing nested arrays\n        Array[Int] numbers = [1, 2, 3,
        4, 5]  # Default integer array for numeric operations\n        Array[File]
        input_files = [] # Array of files to test file operations\n    }\n    \n    #
        Scatter operation to test processing of each element in an array\n    # Test
        empty arrays (original operation still works with empty input)\n    scatter
        (str in strings) {\n        call Uppercase { input: text = str }\n    }\n    \n    #
        Test array indexing (accessing first and last elements)\n    if (length(strings)
        > 0) {\n        call ValidateIndex { input: arr = strings }\n    }\n    \n    #
        Test array functions like sorting, length calculation, and flattening\n    call
        ArrayFunctions { \n        input: \n            arr = strings,\n            nested
        = nested_arrays\n    }\n    \n    # Test array concatenation and verify the
        combined length\n    Array[String] combined = flatten([strings, additional_strings])\n    call
        ArrayConcat {\n        input: \n            arr1 = strings,\n            arr2
        = additional_strings,\n            expected_length = length(combined)\n    }\n    \n    #
        Test integer array operations like summation and combining arrays\n    Array[Int]
        more_numbers = [6, 7, 8, 9, 10]  # Intermediate array declaration\n    call
        IntegerArrayOps {\n        input:\n            numbers = numbers,\n            additional_numbers
        = more_numbers\n    }\n\n    # Test file array operations like localization
        and content reading\n    if (length(input_files) > 0) {\n        call FileArrayOps
        {\n            input:\n                files = input_files\n        }\n    }\n    #
        Outputs to capture results of the tests\n    output {\n        Array[String]
        uppercased = Uppercase.out # Outputs from scatter task\n        Int? first_index
        = ValidateIndex.first_index # First index in string array\n        Int? last_index
        = ValidateIndex.last_index # Last index in string array\n        Array[String]
        sorted_array = ArrayFunctions.sorted # Sorted array\n        Array[Array[String]]
        processed_nested = ArrayFunctions.processed_nested # Processed nested array\n        Boolean
        concat_test_passed = ArrayConcat.test_passed # Result of concatenation test\n        Int
        array_length = ArrayFunctions.arr_length # Length of input array\n        Array[String]
        flattened = ArrayFunctions.flattened # Flattened nested arrays\n        #
        New outputs for integer array operations \n        Int sum_result = IntegerArrayOps.sum
        # Sum of integer array\n        Array[Int] combined_numbers = IntegerArrayOps.combined
        # Combined integer arrays\n        # New outputs for file array operations\n        Array[String]?
        file_contents = FileArrayOps.contents # Contents of files\n        Boolean?
        files_localized = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{"ArrayOperations.ArrayConcat":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stdout","backendStatus":"Running","commandLine":"actual_length=$((
        3 + 2 ))\nif [ \"$actual_length\" -eq 5 ]; then\n    echo \"true\"\nelse\n    echo
        \"false\"\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"expected_length":5,"arr1":["hello","world","test"],"arr2":["foo","bar"]},"jobId":"8313543","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:58.008Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat"}],"ArrayOperations.FileArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stdout","backendStatus":"Running","commandLine":"#
        Test file localization by reading contents\nfor file in /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test1.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test2.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test3.txt;
        do\n    if [ -f \"$file\" ]; then\n        cat \"$file\" >> all_contents.txt\n        echo
        \"---\" >> all_contents.txt  # Separator between files\n    else\n        echo
        \"false\" > localization_success.txt\n        exit 1\n    fi\ndone\necho \"true\"
        > localization_success.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"]},"jobId":"8313549","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps"}],"ArrayOperations.ArrayFunctions":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stdout","backendStatus":"Running","commandLine":"#
        Sort the input array using bash\necho \"hello\nworld\ntest\" | sort > sorted.txt\n\n#
        Get array length\necho \"3\" > length.txt\n\n# Process nested arrays (flatten
        them)\necho \"nested1\nnested2\nnested3\nnested4\" > flattened.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"],"nested":[["nested1","nested2"],["nested3","nested4"]]},"jobId":"8313546","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:56.989Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions"}],"ArrayOperations.IntegerArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stdout","backendStatus":"Running","commandLine":"        #
        Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in 1 2 3 4 5; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\" > combined.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"additional_numbers":[6,7,8,9,10],"numbers":[1,2,3,4,5]},"jobId":"8313545","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:58.009Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps"}],"ArrayOperations.ValidateIndex":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"0\" > first_index.txt  # First index\necho \"2\" > last_index.txt  # Last
        index","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"]},"jobId":"8313544","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex"}],"ArrayOperations.Uppercase":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"hello\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"hello"},"jobId":"8313548","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"world\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"world"},"jobId":"8313550","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"test\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"test"},"jobId":"8313547","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-06T05:27:54.867Z","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{"input_files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"],"additional_strings":["foo","bar"],"numbers":[1,2,3,4,5],"strings":["hello","world","test"],"nested_arrays":[["nested1","nested2"],["nested3","nested4"]]},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:28:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '18082'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"ArrayOperations","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:27:54.866Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow ArrayOperations {\n    input {\n        # Input arrays for
        different tests\n        Array[String] strings\n        Array[String] additional_strings
        = []  # For testing array concatenation\n        Array[Array[String]] nested_arrays
        = []  # For testing nested arrays\n        Array[Int] numbers = [1, 2, 3,
        4, 5]  # Default integer array for numeric operations\n        Array[File]
        input_files = [] # Array of files to test file operations\n    }\n    \n    #
        Scatter operation to test processing of each element in an array\n    # Test
        empty arrays (original operation still works with empty input)\n    scatter
        (str in strings) {\n        call Uppercase { input: text = str }\n    }\n    \n    #
        Test array indexing (accessing first and last elements)\n    if (length(strings)
        > 0) {\n        call ValidateIndex { input: arr = strings }\n    }\n    \n    #
        Test array functions like sorting, length calculation, and flattening\n    call
        ArrayFunctions { \n        input: \n            arr = strings,\n            nested
        = nested_arrays\n    }\n    \n    # Test array concatenation and verify the
        combined length\n    Array[String] combined = flatten([strings, additional_strings])\n    call
        ArrayConcat {\n        input: \n            arr1 = strings,\n            arr2
        = additional_strings,\n            expected_length = length(combined)\n    }\n    \n    #
        Test integer array operations like summation and combining arrays\n    Array[Int]
        more_numbers = [6, 7, 8, 9, 10]  # Intermediate array declaration\n    call
        IntegerArrayOps {\n        input:\n            numbers = numbers,\n            additional_numbers
        = more_numbers\n    }\n\n    # Test file array operations like localization
        and content reading\n    if (length(input_files) > 0) {\n        call FileArrayOps
        {\n            input:\n                files = input_files\n        }\n    }\n    #
        Outputs to capture results of the tests\n    output {\n        Array[String]
        uppercased = Uppercase.out # Outputs from scatter task\n        Int? first_index
        = ValidateIndex.first_index # First index in string array\n        Int? last_index
        = ValidateIndex.last_index # Last index in string array\n        Array[String]
        sorted_array = ArrayFunctions.sorted # Sorted array\n        Array[Array[String]]
        processed_nested = ArrayFunctions.processed_nested # Processed nested array\n        Boolean
        concat_test_passed = ArrayConcat.test_passed # Result of concatenation test\n        Int
        array_length = ArrayFunctions.arr_length # Length of input array\n        Array[String]
        flattened = ArrayFunctions.flattened # Flattened nested arrays\n        #
        New outputs for integer array operations \n        Int sum_result = IntegerArrayOps.sum
        # Sum of integer array\n        Array[Int] combined_numbers = IntegerArrayOps.combined
        # Combined integer arrays\n        # New outputs for file array operations\n        Array[String]?
        file_contents = FileArrayOps.contents # Contents of files\n        Boolean?
        files_localized = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{"ArrayOperations.ArrayConcat":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stdout","backendStatus":"Running","commandLine":"actual_length=$((
        3 + 2 ))\nif [ \"$actual_length\" -eq 5 ]; then\n    echo \"true\"\nelse\n    echo
        \"false\"\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"expected_length":5,"arr1":["hello","world","test"],"arr2":["foo","bar"]},"jobId":"8313543","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:58.008Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat"}],"ArrayOperations.FileArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stdout","backendStatus":"Running","commandLine":"#
        Test file localization by reading contents\nfor file in /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test1.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test2.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test3.txt;
        do\n    if [ -f \"$file\" ]; then\n        cat \"$file\" >> all_contents.txt\n        echo
        \"---\" >> all_contents.txt  # Separator between files\n    else\n        echo
        \"false\" > localization_success.txt\n        exit 1\n    fi\ndone\necho \"true\"
        > localization_success.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"]},"jobId":"8313549","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps"}],"ArrayOperations.ArrayFunctions":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stdout","backendStatus":"Running","commandLine":"#
        Sort the input array using bash\necho \"hello\nworld\ntest\" | sort > sorted.txt\n\n#
        Get array length\necho \"3\" > length.txt\n\n# Process nested arrays (flatten
        them)\necho \"nested1\nnested2\nnested3\nnested4\" > flattened.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"],"nested":[["nested1","nested2"],["nested3","nested4"]]},"jobId":"8313546","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:56.989Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions"}],"ArrayOperations.IntegerArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stdout","backendStatus":"Running","commandLine":"        #
        Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in 1 2 3 4 5; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\" > combined.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"additional_numbers":[6,7,8,9,10],"numbers":[1,2,3,4,5]},"jobId":"8313545","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:58.009Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps"}],"ArrayOperations.ValidateIndex":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"0\" > first_index.txt  # First index\necho \"2\" > last_index.txt  # Last
        index","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"]},"jobId":"8313544","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex"}],"ArrayOperations.Uppercase":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"hello\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"hello"},"jobId":"8313548","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"world\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"world"},"jobId":"8313550","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"test\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"test"},"jobId":"8313547","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-06T05:27:54.867Z","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{"input_files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"],"additional_strings":["foo","bar"],"numbers":[1,2,3,4,5],"strings":["hello","world","test"],"nested_arrays":[["nested1","nested2"],["nested3","nested4"]]},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:28:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '18082'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"ArrayOperations","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:27:54.866Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow ArrayOperations {\n    input {\n        # Input arrays for
        different tests\n        Array[String] strings\n        Array[String] additional_strings
        = []  # For testing array concatenation\n        Array[Array[String]] nested_arrays
        = []  # For testing nested arrays\n        Array[Int] numbers = [1, 2, 3,
        4, 5]  # Default integer array for numeric operations\n        Array[File]
        input_files = [] # Array of files to test file operations\n    }\n    \n    #
        Scatter operation to test processing of each element in an array\n    # Test
        empty arrays (original operation still works with empty input)\n    scatter
        (str in strings) {\n        call Uppercase { input: text = str }\n    }\n    \n    #
        Test array indexing (accessing first and last elements)\n    if (length(strings)
        > 0) {\n        call ValidateIndex { input: arr = strings }\n    }\n    \n    #
        Test array functions like sorting, length calculation, and flattening\n    call
        ArrayFunctions { \n        input: \n            arr = strings,\n            nested
        = nested_arrays\n    }\n    \n    # Test array concatenation and verify the
        combined length\n    Array[String] combined = flatten([strings, additional_strings])\n    call
        ArrayConcat {\n        input: \n            arr1 = strings,\n            arr2
        = additional_strings,\n            expected_length = length(combined)\n    }\n    \n    #
        Test integer array operations like summation and combining arrays\n    Array[Int]
        more_numbers = [6, 7, 8, 9, 10]  # Intermediate array declaration\n    call
        IntegerArrayOps {\n        input:\n            numbers = numbers,\n            additional_numbers
        = more_numbers\n    }\n\n    # Test file array operations like localization
        and content reading\n    if (length(input_files) > 0) {\n        call FileArrayOps
        {\n            input:\n                files = input_files\n        }\n    }\n    #
        Outputs to capture results of the tests\n    output {\n        Array[String]
        uppercased = Uppercase.out # Outputs from scatter task\n        Int? first_index
        = ValidateIndex.first_index # First index in string array\n        Int? last_index
        = ValidateIndex.last_index # Last index in string array\n        Array[String]
        sorted_array = ArrayFunctions.sorted # Sorted array\n        Array[Array[String]]
        processed_nested = ArrayFunctions.processed_nested # Processed nested array\n        Boolean
        concat_test_passed = ArrayConcat.test_passed # Result of concatenation test\n        Int
        array_length = ArrayFunctions.arr_length # Length of input array\n        Array[String]
        flattened = ArrayFunctions.flattened # Flattened nested arrays\n        #
        New outputs for integer array operations \n        Int sum_result = IntegerArrayOps.sum
        # Sum of integer array\n        Array[Int] combined_numbers = IntegerArrayOps.combined
        # Combined integer arrays\n        # New outputs for file array operations\n        Array[String]?
        file_contents = FileArrayOps.contents # Contents of files\n        Boolean?
        files_localized = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{"ArrayOperations.ArrayConcat":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stdout","backendStatus":"Running","commandLine":"actual_length=$((
        3 + 2 ))\nif [ \"$actual_length\" -eq 5 ]; then\n    echo \"true\"\nelse\n    echo
        \"false\"\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"expected_length":5,"arr1":["hello","world","test"],"arr2":["foo","bar"]},"jobId":"8313543","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:58.008Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat"}],"ArrayOperations.FileArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stdout","backendStatus":"Running","commandLine":"#
        Test file localization by reading contents\nfor file in /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test1.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test2.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test3.txt;
        do\n    if [ -f \"$file\" ]; then\n        cat \"$file\" >> all_contents.txt\n        echo
        \"---\" >> all_contents.txt  # Separator between files\n    else\n        echo
        \"false\" > localization_success.txt\n        exit 1\n    fi\ndone\necho \"true\"
        > localization_success.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"]},"jobId":"8313549","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps"}],"ArrayOperations.ArrayFunctions":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stdout","backendStatus":"Running","commandLine":"#
        Sort the input array using bash\necho \"hello\nworld\ntest\" | sort > sorted.txt\n\n#
        Get array length\necho \"3\" > length.txt\n\n# Process nested arrays (flatten
        them)\necho \"nested1\nnested2\nnested3\nnested4\" > flattened.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"],"nested":[["nested1","nested2"],["nested3","nested4"]]},"jobId":"8313546","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:56.989Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions"}],"ArrayOperations.IntegerArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stdout","backendStatus":"Running","commandLine":"        #
        Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in 1 2 3 4 5; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\" > combined.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"additional_numbers":[6,7,8,9,10],"numbers":[1,2,3,4,5]},"jobId":"8313545","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:58.009Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps"}],"ArrayOperations.ValidateIndex":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"0\" > first_index.txt  # First index\necho \"2\" > last_index.txt  # Last
        index","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"]},"jobId":"8313544","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex"}],"ArrayOperations.Uppercase":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"hello\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"hello"},"jobId":"8313548","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"world\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"world"},"jobId":"8313550","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"test\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"test"},"jobId":"8313547","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-06T05:27:54.867Z","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{"input_files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"],"additional_strings":["foo","bar"],"numbers":[1,2,3,4,5],"strings":["hello","world","test"],"nested_arrays":[["nested1","nested2"],["nested3","nested4"]]},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:28:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '18082'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"ArrayOperations","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:27:54.866Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow ArrayOperations {\n    input {\n        # Input arrays for
        different tests\n        Array[String] strings\n        Array[String] additional_strings
        = []  # For testing array concatenation\n        Array[Array[String]] nested_arrays
        = []  # For testing nested arrays\n        Array[Int] numbers = [1, 2, 3,
        4, 5]  # Default integer array for numeric operations\n        Array[File]
        input_files = [] # Array of files to test file operations\n    }\n    \n    #
        Scatter operation to test processing of each element in an array\n    # Test
        empty arrays (original operation still works with empty input)\n    scatter
        (str in strings) {\n        call Uppercase { input: text = str }\n    }\n    \n    #
        Test array indexing (accessing first and last elements)\n    if (length(strings)
        > 0) {\n        call ValidateIndex { input: arr = strings }\n    }\n    \n    #
        Test array functions like sorting, length calculation, and flattening\n    call
        ArrayFunctions { \n        input: \n            arr = strings,\n            nested
        = nested_arrays\n    }\n    \n    # Test array concatenation and verify the
        combined length\n    Array[String] combined = flatten([strings, additional_strings])\n    call
        ArrayConcat {\n        input: \n            arr1 = strings,\n            arr2
        = additional_strings,\n            expected_length = length(combined)\n    }\n    \n    #
        Test integer array operations like summation and combining arrays\n    Array[Int]
        more_numbers = [6, 7, 8, 9, 10]  # Intermediate array declaration\n    call
        IntegerArrayOps {\n        input:\n            numbers = numbers,\n            additional_numbers
        = more_numbers\n    }\n\n    # Test file array operations like localization
        and content reading\n    if (length(input_files) > 0) {\n        call FileArrayOps
        {\n            input:\n                files = input_files\n        }\n    }\n    #
        Outputs to capture results of the tests\n    output {\n        Array[String]
        uppercased = Uppercase.out # Outputs from scatter task\n        Int? first_index
        = ValidateIndex.first_index # First index in string array\n        Int? last_index
        = ValidateIndex.last_index # Last index in string array\n        Array[String]
        sorted_array = ArrayFunctions.sorted # Sorted array\n        Array[Array[String]]
        processed_nested = ArrayFunctions.processed_nested # Processed nested array\n        Boolean
        concat_test_passed = ArrayConcat.test_passed # Result of concatenation test\n        Int
        array_length = ArrayFunctions.arr_length # Length of input array\n        Array[String]
        flattened = ArrayFunctions.flattened # Flattened nested arrays\n        #
        New outputs for integer array operations \n        Int sum_result = IntegerArrayOps.sum
        # Sum of integer array\n        Array[Int] combined_numbers = IntegerArrayOps.combined
        # Combined integer arrays\n        # New outputs for file array operations\n        Array[String]?
        file_contents = FileArrayOps.contents # Contents of files\n        Boolean?
        files_localized = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{"ArrayOperations.ArrayConcat":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stdout","backendStatus":"Done","commandLine":"actual_length=$((
        3 + 2 ))\nif [ \"$actual_length\" -eq 5 ]; then\n    echo \"true\"\nelse\n    echo
        \"false\"\nfi","shardIndex":-1,"outputs":{"test_passed":true},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"expected_length":5,"arr1":["hello","world","test"],"arr2":["foo","bar"]},"returnCode":0,"jobId":"8313543","backend":"gizmo","end":"2025-02-06T05:28:34.332Z","start":"2025-02-06T05:27:58.008Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:27:58.009Z","description":"Pending","endTime":"2025-02-06T05:27:58.009Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.700Z"},{"startTime":"2025-02-06T05:27:58.009Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:33.600Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:34.332Z"},{"startTime":"2025-02-06T05:28:02.700Z","description":"RunningJob","endTime":"2025-02-06T05:28:33.600Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.678Z"}]}],"ArrayOperations.FileArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stdout","backendStatus":"Running","commandLine":"#
        Test file localization by reading contents\nfor file in /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test1.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test2.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test3.txt;
        do\n    if [ -f \"$file\" ]; then\n        cat \"$file\" >> all_contents.txt\n        echo
        \"---\" >> all_contents.txt  # Separator between files\n    else\n        echo
        \"false\" > localization_success.txt\n        exit 1\n    fi\ndone\necho \"true\"
        > localization_success.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"]},"jobId":"8313549","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps"}],"ArrayOperations.ArrayFunctions":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stdout","backendStatus":"Done","commandLine":"#
        Sort the input array using bash\necho \"hello\nworld\ntest\" | sort > sorted.txt\n\n#
        Get array length\necho \"3\" > length.txt\n\n# Process nested arrays (flatten
        them)\necho \"nested1\nnested2\nnested3\nnested4\" > flattened.txt","shardIndex":-1,"outputs":{"arr_length":3,"sorted":["hello","test","world"],"flattened":["nested1","nested2","nested3","nested4"],"processed_nested":[["nested1","nested2"],["nested3","nested4"]]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"],"nested":[["nested1","nested2"],["nested3","nested4"]]},"returnCode":0,"jobId":"8313546","backend":"gizmo","end":"2025-02-06T05:28:35.333Z","start":"2025-02-06T05:27:56.989Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:27:56.989Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:34.821Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:35.333Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.704Z"},{"startTime":"2025-02-06T05:27:56.989Z","description":"Pending","endTime":"2025-02-06T05:27:56.989Z"},{"startTime":"2025-02-06T05:28:02.704Z","description":"RunningJob","endTime":"2025-02-06T05:28:34.821Z"}]}],"ArrayOperations.IntegerArrayOps":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stdout","backendStatus":"Done","commandLine":"        #
        Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in 1 2 3 4 5; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\" > combined.txt","shardIndex":-1,"outputs":{"sum":15,"combined":[1,2,3,4,5,6,7,8,9,10]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"additional_numbers":[6,7,8,9,10],"numbers":[1,2,3,4,5]},"returnCode":0,"jobId":"8313545","backend":"gizmo","end":"2025-02-06T05:28:35.334Z","start":"2025-02-06T05:27:58.009Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:28:34.888Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:35.333Z"},{"startTime":"2025-02-06T05:27:58.009Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.715Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:27:58.009Z","description":"Pending","endTime":"2025-02-06T05:27:58.009Z"},{"startTime":"2025-02-06T05:28:02.715Z","description":"RunningJob","endTime":"2025-02-06T05:28:34.888Z"}]}],"ArrayOperations.ValidateIndex":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"0\" > first_index.txt  # First index\necho \"2\" > last_index.txt  # Last
        index","shardIndex":-1,"outputs":{"last_index":2,"first_index":0},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"]},"returnCode":0,"jobId":"8313544","backend":"gizmo","end":"2025-02-06T05:28:35.333Z","start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:28:34.399Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:35.333Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.685Z"},{"startTime":"2025-02-06T05:28:02.719Z","description":"RunningJob","endTime":"2025-02-06T05:28:34.399Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"Pending","endTime":"2025-02-06T05:27:59.028Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:02.685Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.719Z"}]}],"ArrayOperations.Uppercase":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"hello\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"hello"},"jobId":"8313548","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"world\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"world"},"jobId":"8313550","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"test\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"test"},"jobId":"8313547","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-06T05:27:54.867Z","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{"input_files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"],"additional_strings":["foo","bar"],"numbers":[1,2,3,4,5],"strings":["hello","world","test"],"nested_arrays":[["nested1","nested2"],["nested3","nested4"]]},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:28:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '21269'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"ArrayOperations","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:27:54.866Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow ArrayOperations {\n    input {\n        # Input arrays for
        different tests\n        Array[String] strings\n        Array[String] additional_strings
        = []  # For testing array concatenation\n        Array[Array[String]] nested_arrays
        = []  # For testing nested arrays\n        Array[Int] numbers = [1, 2, 3,
        4, 5]  # Default integer array for numeric operations\n        Array[File]
        input_files = [] # Array of files to test file operations\n    }\n    \n    #
        Scatter operation to test processing of each element in an array\n    # Test
        empty arrays (original operation still works with empty input)\n    scatter
        (str in strings) {\n        call Uppercase { input: text = str }\n    }\n    \n    #
        Test array indexing (accessing first and last elements)\n    if (length(strings)
        > 0) {\n        call ValidateIndex { input: arr = strings }\n    }\n    \n    #
        Test array functions like sorting, length calculation, and flattening\n    call
        ArrayFunctions { \n        input: \n            arr = strings,\n            nested
        = nested_arrays\n    }\n    \n    # Test array concatenation and verify the
        combined length\n    Array[String] combined = flatten([strings, additional_strings])\n    call
        ArrayConcat {\n        input: \n            arr1 = strings,\n            arr2
        = additional_strings,\n            expected_length = length(combined)\n    }\n    \n    #
        Test integer array operations like summation and combining arrays\n    Array[Int]
        more_numbers = [6, 7, 8, 9, 10]  # Intermediate array declaration\n    call
        IntegerArrayOps {\n        input:\n            numbers = numbers,\n            additional_numbers
        = more_numbers\n    }\n\n    # Test file array operations like localization
        and content reading\n    if (length(input_files) > 0) {\n        call FileArrayOps
        {\n            input:\n                files = input_files\n        }\n    }\n    #
        Outputs to capture results of the tests\n    output {\n        Array[String]
        uppercased = Uppercase.out # Outputs from scatter task\n        Int? first_index
        = ValidateIndex.first_index # First index in string array\n        Int? last_index
        = ValidateIndex.last_index # Last index in string array\n        Array[String]
        sorted_array = ArrayFunctions.sorted # Sorted array\n        Array[Array[String]]
        processed_nested = ArrayFunctions.processed_nested # Processed nested array\n        Boolean
        concat_test_passed = ArrayConcat.test_passed # Result of concatenation test\n        Int
        array_length = ArrayFunctions.arr_length # Length of input array\n        Array[String]
        flattened = ArrayFunctions.flattened # Flattened nested arrays\n        #
        New outputs for integer array operations \n        Int sum_result = IntegerArrayOps.sum
        # Sum of integer array\n        Array[Int] combined_numbers = IntegerArrayOps.combined
        # Combined integer arrays\n        # New outputs for file array operations\n        Array[String]?
        file_contents = FileArrayOps.contents # Contents of files\n        Boolean?
        files_localized = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{"ArrayOperations.ArrayConcat":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stdout","backendStatus":"Done","commandLine":"actual_length=$((
        3 + 2 ))\nif [ \"$actual_length\" -eq 5 ]; then\n    echo \"true\"\nelse\n    echo
        \"false\"\nfi","shardIndex":-1,"outputs":{"test_passed":true},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"expected_length":5,"arr1":["hello","world","test"],"arr2":["foo","bar"]},"returnCode":0,"jobId":"8313543","backend":"gizmo","end":"2025-02-06T05:28:34.332Z","start":"2025-02-06T05:27:58.008Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:27:58.009Z","description":"Pending","endTime":"2025-02-06T05:27:58.009Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.700Z"},{"startTime":"2025-02-06T05:27:58.009Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:33.600Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:34.332Z"},{"startTime":"2025-02-06T05:28:02.700Z","description":"RunningJob","endTime":"2025-02-06T05:28:33.600Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.678Z"}]}],"ArrayOperations.FileArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stdout","backendStatus":"Done","commandLine":"#
        Test file localization by reading contents\nfor file in /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test1.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test2.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test3.txt;
        do\n    if [ -f \"$file\" ]; then\n        cat \"$file\" >> all_contents.txt\n        echo
        \"---\" >> all_contents.txt  # Separator between files\n    else\n        echo
        \"false\" > localization_success.txt\n        exit 1\n    fi\ndone\necho \"true\"
        > localization_success.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"]},"jobId":"8313549","backend":"gizmo","attempt":1,"start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps"}],"ArrayOperations.ArrayFunctions":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stdout","backendStatus":"Done","commandLine":"#
        Sort the input array using bash\necho \"hello\nworld\ntest\" | sort > sorted.txt\n\n#
        Get array length\necho \"3\" > length.txt\n\n# Process nested arrays (flatten
        them)\necho \"nested1\nnested2\nnested3\nnested4\" > flattened.txt","shardIndex":-1,"outputs":{"arr_length":3,"sorted":["hello","test","world"],"flattened":["nested1","nested2","nested3","nested4"],"processed_nested":[["nested1","nested2"],["nested3","nested4"]]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"],"nested":[["nested1","nested2"],["nested3","nested4"]]},"returnCode":0,"jobId":"8313546","backend":"gizmo","end":"2025-02-06T05:28:35.333Z","start":"2025-02-06T05:27:56.989Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:27:56.989Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:34.821Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:35.333Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.704Z"},{"startTime":"2025-02-06T05:27:56.989Z","description":"Pending","endTime":"2025-02-06T05:27:56.989Z"},{"startTime":"2025-02-06T05:28:02.704Z","description":"RunningJob","endTime":"2025-02-06T05:28:34.821Z"}]}],"ArrayOperations.IntegerArrayOps":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stdout","backendStatus":"Done","commandLine":"        #
        Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in 1 2 3 4 5; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\" > combined.txt","shardIndex":-1,"outputs":{"sum":15,"combined":[1,2,3,4,5,6,7,8,9,10]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"additional_numbers":[6,7,8,9,10],"numbers":[1,2,3,4,5]},"returnCode":0,"jobId":"8313545","backend":"gizmo","end":"2025-02-06T05:28:35.334Z","start":"2025-02-06T05:27:58.009Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:28:34.888Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:35.333Z"},{"startTime":"2025-02-06T05:27:58.009Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.715Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:27:58.009Z","description":"Pending","endTime":"2025-02-06T05:27:58.009Z"},{"startTime":"2025-02-06T05:28:02.715Z","description":"RunningJob","endTime":"2025-02-06T05:28:34.888Z"}]}],"ArrayOperations.ValidateIndex":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"0\" > first_index.txt  # First index\necho \"2\" > last_index.txt  # Last
        index","shardIndex":-1,"outputs":{"last_index":2,"first_index":0},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"]},"returnCode":0,"jobId":"8313544","backend":"gizmo","end":"2025-02-06T05:28:35.333Z","start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:28:34.399Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:35.333Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.685Z"},{"startTime":"2025-02-06T05:28:02.719Z","description":"RunningJob","endTime":"2025-02-06T05:28:34.399Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"Pending","endTime":"2025-02-06T05:27:59.028Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:02.685Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.719Z"}]}],"ArrayOperations.Uppercase":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"hello\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":0,"outputs":{"out":"HELLO"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"hello"},"returnCode":0,"jobId":"8313548","backend":"gizmo","end":"2025-02-06T05:28:37.332Z","start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:28:02.692Z","description":"RunningJob","endTime":"2025-02-06T05:28:36.457Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"Pending","endTime":"2025-02-06T05:27:59.028Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.692Z"},{"startTime":"2025-02-06T05:28:36.457Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:37.332Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"world\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":1,"outputs":{"out":"WORLD"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"world"},"returnCode":0,"jobId":"8313550","backend":"gizmo","end":"2025-02-06T05:28:37.333Z","start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:28:36.785Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:37.332Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.687Z"},{"startTime":"2025-02-06T05:28:02.722Z","description":"RunningJob","endTime":"2025-02-06T05:28:36.785Z"},{"startTime":"2025-02-06T05:28:02.687Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.722Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"Pending","endTime":"2025-02-06T05:27:59.028Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"test\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":2,"outputs":{"out":"TEST"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"test"},"returnCode":0,"jobId":"8313547","backend":"gizmo","end":"2025-02-06T05:28:39.332Z","start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:28:02.708Z","description":"RunningJob","endTime":"2025-02-06T05:28:38.856Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.708Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"Pending","endTime":"2025-02-06T05:27:59.028Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:38.856Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:39.332Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-06T05:27:54.867Z","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{"input_files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"],"additional_strings":["foo","bar"],"numbers":[1,2,3,4,5],"strings":["hello","world","test"],"nested_arrays":[["nested1","nested2"],["nested3","nested4"]]},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:28:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '23512'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/853c45f5-5f55-4e8b-bd93-a42a40db12f1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"ArrayOperations","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:27:54.866Z","cromwellVersion":"87"},{"cromwellId":"cromid-fd06105","description":"Finished","timestamp":"2025-02-06T05:28:44.930Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow ArrayOperations {\n    input {\n        # Input arrays for
        different tests\n        Array[String] strings\n        Array[String] additional_strings
        = []  # For testing array concatenation\n        Array[Array[String]] nested_arrays
        = []  # For testing nested arrays\n        Array[Int] numbers = [1, 2, 3,
        4, 5]  # Default integer array for numeric operations\n        Array[File]
        input_files = [] # Array of files to test file operations\n    }\n    \n    #
        Scatter operation to test processing of each element in an array\n    # Test
        empty arrays (original operation still works with empty input)\n    scatter
        (str in strings) {\n        call Uppercase { input: text = str }\n    }\n    \n    #
        Test array indexing (accessing first and last elements)\n    if (length(strings)
        > 0) {\n        call ValidateIndex { input: arr = strings }\n    }\n    \n    #
        Test array functions like sorting, length calculation, and flattening\n    call
        ArrayFunctions { \n        input: \n            arr = strings,\n            nested
        = nested_arrays\n    }\n    \n    # Test array concatenation and verify the
        combined length\n    Array[String] combined = flatten([strings, additional_strings])\n    call
        ArrayConcat {\n        input: \n            arr1 = strings,\n            arr2
        = additional_strings,\n            expected_length = length(combined)\n    }\n    \n    #
        Test integer array operations like summation and combining arrays\n    Array[Int]
        more_numbers = [6, 7, 8, 9, 10]  # Intermediate array declaration\n    call
        IntegerArrayOps {\n        input:\n            numbers = numbers,\n            additional_numbers
        = more_numbers\n    }\n\n    # Test file array operations like localization
        and content reading\n    if (length(input_files) > 0) {\n        call FileArrayOps
        {\n            input:\n                files = input_files\n        }\n    }\n    #
        Outputs to capture results of the tests\n    output {\n        Array[String]
        uppercased = Uppercase.out # Outputs from scatter task\n        Int? first_index
        = ValidateIndex.first_index # First index in string array\n        Int? last_index
        = ValidateIndex.last_index # Last index in string array\n        Array[String]
        sorted_array = ArrayFunctions.sorted # Sorted array\n        Array[Array[String]]
        processed_nested = ArrayFunctions.processed_nested # Processed nested array\n        Boolean
        concat_test_passed = ArrayConcat.test_passed # Result of concatenation test\n        Int
        array_length = ArrayFunctions.arr_length # Length of input array\n        Array[String]
        flattened = ArrayFunctions.flattened # Flattened nested arrays\n        #
        New outputs for integer array operations \n        Int sum_result = IntegerArrayOps.sum
        # Sum of integer array\n        Array[Int] combined_numbers = IntegerArrayOps.combined
        # Combined integer arrays\n        # New outputs for file array operations\n        Array[String]?
        file_contents = FileArrayOps.contents # Contents of files\n        Boolean?
        files_localized = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{"ArrayOperations.ArrayConcat":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stdout","backendStatus":"Done","commandLine":"actual_length=$((
        3 + 2 ))\nif [ \"$actual_length\" -eq 5 ]; then\n    echo \"true\"\nelse\n    echo
        \"false\"\nfi","shardIndex":-1,"outputs":{"test_passed":true},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"expected_length":5,"arr1":["hello","world","test"],"arr2":["foo","bar"]},"returnCode":0,"jobId":"8313543","backend":"gizmo","end":"2025-02-06T05:28:34.332Z","start":"2025-02-06T05:27:58.008Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayConcat","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:27:58.009Z","description":"Pending","endTime":"2025-02-06T05:27:58.009Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.700Z"},{"startTime":"2025-02-06T05:27:58.009Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:33.600Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:34.332Z"},{"startTime":"2025-02-06T05:28:02.700Z","description":"RunningJob","endTime":"2025-02-06T05:28:33.600Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.678Z"}]}],"ArrayOperations.FileArrayOps":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stdout","backendStatus":"Done","commandLine":"#
        Test file localization by reading contents\nfor file in /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test1.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test2.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/inputs/1330878614/test3.txt;
        do\n    if [ -f \"$file\" ]; then\n        cat \"$file\" >> all_contents.txt\n        echo
        \"---\" >> all_contents.txt  # Separator between files\n    else\n        echo
        \"false\" > localization_success.txt\n        exit 1\n    fi\ndone\necho \"true\"
        > localization_success.txt","shardIndex":-1,"outputs":{"localization_success":true,"contents":["Hello...---","...
        is it me you''re ...---","... looking for???---"]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"]},"returnCode":0,"jobId":"8313549","backend":"gizmo","end":"2025-02-06T05:28:42.332Z","start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-FileArrayOps","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.685Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"Pending","endTime":"2025-02-06T05:27:59.028Z"},{"startTime":"2025-02-06T05:28:02.730Z","description":"RunningJob","endTime":"2025-02-06T05:28:41.899Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:41.899Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:42.332Z"},{"startTime":"2025-02-06T05:28:02.685Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.730Z"}]}],"ArrayOperations.ArrayFunctions":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stdout","backendStatus":"Done","commandLine":"#
        Sort the input array using bash\necho \"hello\nworld\ntest\" | sort > sorted.txt\n\n#
        Get array length\necho \"3\" > length.txt\n\n# Process nested arrays (flatten
        them)\necho \"nested1\nnested2\nnested3\nnested4\" > flattened.txt","shardIndex":-1,"outputs":{"arr_length":3,"sorted":["hello","test","world"],"flattened":["nested1","nested2","nested3","nested4"],"processed_nested":[["nested1","nested2"],["nested3","nested4"]]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"],"nested":[["nested1","nested2"],["nested3","nested4"]]},"returnCode":0,"jobId":"8313546","backend":"gizmo","end":"2025-02-06T05:28:35.333Z","start":"2025-02-06T05:27:56.989Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ArrayFunctions","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:27:56.989Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:34.821Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:35.333Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.704Z"},{"startTime":"2025-02-06T05:27:56.989Z","description":"Pending","endTime":"2025-02-06T05:27:56.989Z"},{"startTime":"2025-02-06T05:28:02.704Z","description":"RunningJob","endTime":"2025-02-06T05:28:34.821Z"}]}],"ArrayOperations.IntegerArrayOps":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stdout","backendStatus":"Done","commandLine":"        #
        Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in 1 2 3 4 5; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\" > combined.txt","shardIndex":-1,"outputs":{"sum":15,"combined":[1,2,3,4,5,6,7,8,9,10]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"additional_numbers":[6,7,8,9,10],"numbers":[1,2,3,4,5]},"returnCode":0,"jobId":"8313545","backend":"gizmo","end":"2025-02-06T05:28:35.334Z","start":"2025-02-06T05:27:58.009Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-IntegerArrayOps","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:28:34.888Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:35.333Z"},{"startTime":"2025-02-06T05:27:58.009Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.715Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:27:58.009Z","description":"Pending","endTime":"2025-02-06T05:27:58.009Z"},{"startTime":"2025-02-06T05:28:02.715Z","description":"RunningJob","endTime":"2025-02-06T05:28:34.888Z"}]}],"ArrayOperations.ValidateIndex":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"0\" > first_index.txt  # First index\necho \"2\" > last_index.txt  # Last
        index","shardIndex":-1,"outputs":{"last_index":2,"first_index":0},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"]},"returnCode":0,"jobId":"8313544","backend":"gizmo","end":"2025-02-06T05:28:35.333Z","start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-ValidateIndex","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:28:34.399Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:35.333Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.685Z"},{"startTime":"2025-02-06T05:28:02.719Z","description":"RunningJob","endTime":"2025-02-06T05:28:34.399Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"Pending","endTime":"2025-02-06T05:27:59.028Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:02.685Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.719Z"}]}],"ArrayOperations.Uppercase":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"hello\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":0,"outputs":{"out":"HELLO"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"hello"},"returnCode":0,"jobId":"8313548","backend":"gizmo","end":"2025-02-06T05:28:37.332Z","start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:28:02.692Z","description":"RunningJob","endTime":"2025-02-06T05:28:36.457Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"Pending","endTime":"2025-02-06T05:27:59.028Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.692Z"},{"startTime":"2025-02-06T05:28:36.457Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:37.332Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"world\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":1,"outputs":{"out":"WORLD"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"world"},"returnCode":0,"jobId":"8313550","backend":"gizmo","end":"2025-02-06T05:28:37.333Z","start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:28:36.785Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:37.332Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.687Z"},{"startTime":"2025-02-06T05:28:02.722Z","description":"RunningJob","endTime":"2025-02-06T05:28:36.785Z"},{"startTime":"2025-02-06T05:28:02.687Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.722Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"Pending","endTime":"2025-02-06T05:27:59.028Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"test\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":2,"outputs":{"out":"TEST"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"test"},"returnCode":0,"jobId":"8313547","backend":"gizmo","end":"2025-02-06T05:28:39.332Z","start":"2025-02-06T05:27:59.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1/call-Uppercase/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:28:02.708Z","description":"RunningJob","endTime":"2025-02-06T05:28:38.856Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"PreparingJob","endTime":"2025-02-06T05:28:02.708Z"},{"startTime":"2025-02-06T05:27:59.028Z","description":"Pending","endTime":"2025-02-06T05:27:59.028Z"},{"startTime":"2025-02-06T05:28:02.678Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:02.678Z"},{"startTime":"2025-02-06T05:28:38.856Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:39.332Z"}]}]},"outputs":{"ArrayOperations.first_index":0,"ArrayOperations.processed_nested":[["nested1","nested2"],["nested3","nested4"]],"ArrayOperations.uppercased":["HELLO","WORLD","TEST"],"ArrayOperations.files_localized":true,"ArrayOperations.concat_test_passed":true,"ArrayOperations.last_index":2,"ArrayOperations.file_contents":["Hello...---","...
        is it me you''re ...---","... looking for???---"],"ArrayOperations.flattened":["nested1","nested2","nested3","nested4"],"ArrayOperations.sorted_array":["hello","test","world"],"ArrayOperations.combined_numbers":[1,2,3,4,5,6,7,8,9,10],"ArrayOperations.array_length":3,"ArrayOperations.sum_result":15},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/853c45f5-5f55-4e8b-bd93-a42a40db12f1","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-06T05:28:44.930Z","start":"2025-02-06T05:27:54.867Z","id":"853c45f5-5f55-4e8b-bd93-a42a40db12f1","inputs":{"input_files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"],"additional_strings":["foo","bar"],"numbers":[1,2,3,4,5],"strings":["hello","world","test"],"nested_arrays":[["nested1","nested2"],["nested3","nested4"]]},"labels":{"cromwell-workflow-id":"cromwell-853c45f5-5f55-4e8b-bd93-a42a40db12f1"},"submission":"2025-02-06T05:26:59.846Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:28:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '25138'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/39f5b465-0acb-4e34-bdbc-a0fd47bb771a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloHostname","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:27:14.825Z","cromwellVersion":"87"},{"cromwellId":"cromid-fd06105","description":"Finished","timestamp":"2025-02-06T05:27:57.702Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the hostname of the node \n##
        the job is submitted to as a test for the Gizmo backend. \n\n#### WORKFLOW
        DEFINITION\n\nworkflow HelloHostname {\n  call Hostname {\n  }\n\n  output
        {\n    File stdout = Hostname.out\n  }\n\n  parameter_meta {\n    stdout:
        \"hostname of the node the job was submitted to\"\n  }\n}\n\n#### TASK DEFINITIONS\n\ntask
        Hostname {\n  command <<<\n    echo $(hostname)\n  >>>\n\n  output {\n    File
        out = stdout()\n  }\n  \n  runtime {\n    cpu: 1\n    memory: \"1 GB\"\n  }\n\n  parameter_meta
        {\n    out: \"hostname of the node the job was submitted to\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"HelloHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloHostname/39f5b465-0acb-4e34-bdbc-a0fd47bb771a/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"echo
        $(hostname)","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloHostname/39f5b465-0acb-4e34-bdbc-a0fd47bb771a/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"8313512","backend":"gizmo","end":"2025-02-06T05:27:56.332Z","start":"2025-02-06T05:27:15.883Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloHostname/39f5b465-0acb-4e34-bdbc-a0fd47bb771a/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloHostname/39f5b465-0acb-4e34-bdbc-a0fd47bb771a/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:27:22.677Z","description":"PreparingJob","endTime":"2025-02-06T05:27:22.685Z"},{"startTime":"2025-02-06T05:27:15.884Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:27:22.677Z"},{"startTime":"2025-02-06T05:27:15.883Z","description":"Pending","endTime":"2025-02-06T05:27:15.884Z"},{"startTime":"2025-02-06T05:27:56.126Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:27:56.332Z"},{"startTime":"2025-02-06T05:27:22.685Z","description":"RunningJob","endTime":"2025-02-06T05:27:56.126Z"},{"startTime":"2025-02-06T05:27:22.677Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:27:22.677Z"}]}]},"outputs":{"HelloHostname.stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloHostname/39f5b465-0acb-4e34-bdbc-a0fd47bb771a/call-Hostname/execution/stdout"},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloHostname/39f5b465-0acb-4e34-bdbc-a0fd47bb771a","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-06T05:27:57.702Z","start":"2025-02-06T05:27:14.826Z","id":"39f5b465-0acb-4e34-bdbc-a0fd47bb771a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-39f5b465-0acb-4e34-bdbc-a0fd47bb771a"},"submission":"2025-02-06T05:26:59.887Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:28:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3579'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/f6e7d88b-f62a-4004-892c-5b6bb27872f5/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:28:34.905Z","cromwellVersion":"87"},{"cromwellId":"cromid-fd06105","description":"Finished","timestamp":"2025-02-06T05:28:34.920Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n# This workflow takes a tab separated file where each row is a set of
        data to be used in each \n# of the independent scattered task series that
        you have as your workflow process.  This file \n# will, for example, have
        column names `sampleName`, `bamLocation`, and `bedlocation`.  This\n# allows
        you to know that regardless of the order of the columns in your batch file,
        the correct\n# inputs will be used for the tasks you define.  \nworkflow parseBatchFile
        {\n  input {\n  File batchFile\n  }\n    Array[Object] batchInfo = read_objects(batchFile)\n  scatter
        (job in batchInfo){\n    String sampleName = job.sampleName\n    File bamFile
        = job.bamLocation\n    File bedFile = job.bedLocation\n\n    ## INSERT YOUR
        WORKFLOW TO RUN PER LINE IN YOUR BATCH FILE HERE!!!!\n    call test {\n        input:
        in1=sampleName, in2=bamFile, in3=bedFile\n    }\n\n  }  # End Scatter over
        the batch file\n# Outputs that will be retained when execution is complete\n  output
        {\n    Array[File] outputArray = test.item_out\n    }\n# End workflow\n}\n\n####
        TASK DEFINITIONS\n# echo some text to stdout, treats files as strings just
        to echo them as a dummy example\ntask test {\n  input {\n    String in1\n    String
        in2\n    String in3\n  }\n    command {\n    echo ~{in1}\n    echo ~{in2}\n    echo
        ~{in3}\n    }\n    output {\n        File item_out = stdout()\n    }\n}","root":"","options":"{\n\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"actualWorkflowLanguage":"WDL","status":"Failed","failures":[{"causedBy":[{"causedBy":[],"message":"Required
        workflow input ''parseBatchFile.batchFile'' not specified"}],"message":"Workflow
        input processing failed"}],"end":"2025-02-06T05:28:34.920Z","start":"2025-02-06T05:28:34.905Z","id":"f6e7d88b-f62a-4004-892c-5b6bb27872f5","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-f6e7d88b-f62a-4004-892c-5b6bb27872f5"},"submission":"2025-02-06T05:26:59.924Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:29:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2267'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/8d02c8a1-7467-45d1-8115-ab7bc3e23cf3/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloModuleHostname","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"Finished","timestamp":"2025-02-06T05:28:54.689Z","cromwellVersion":"87"},{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:28:14.886Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the hostname of the node \n##
        the job is submitted to as a test for module functionality on Gizmo.\n\n####
        WORKFLOW DEFINITION\n\nworkflow HelloModuleHostname {\n  call Hostname {\n  }\n\n  output
        {\n    File stdout = Hostname.out\n  }\n\n  parameter_meta {\n    stdout:
        \"hostname of the node the job was submitted to\"\n  }\n}\n\n#### TASK DEFINITIONS\n\ntask
        Hostname {\n  command <<<\n    echo $(hostname)\n  >>>\n\n  output {\n    File
        out = stdout()\n  }\n\n  runtime {\n    cpu: 1\n    memory: \"1 GB\"\n    modules:
        \"Python/3.7.4-foss-2019b-fh1\"\n  }\n\n  parameter_meta {\n    out: \"hostname
        of the node the job was submitted to\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"HelloModuleHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloModuleHostname/8d02c8a1-7467-45d1-8115-ab7bc3e23cf3/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"echo
        $(hostname)","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloModuleHostname/8d02c8a1-7467-45d1-8115-ab7bc3e23cf3/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"Python/3.7.4-foss-2019b-fh1","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"8313574","backend":"gizmo","end":"2025-02-06T05:28:53.332Z","start":"2025-02-06T05:28:15.929Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloModuleHostname/8d02c8a1-7467-45d1-8115-ab7bc3e23cf3/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloModuleHostname/8d02c8a1-7467-45d1-8115-ab7bc3e23cf3/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:28:22.688Z","description":"RunningJob","endTime":"2025-02-06T05:28:53.116Z"},{"startTime":"2025-02-06T05:28:15.929Z","description":"Pending","endTime":"2025-02-06T05:28:15.929Z"},{"startTime":"2025-02-06T05:28:15.929Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:28:22.677Z"},{"startTime":"2025-02-06T05:28:22.678Z","description":"PreparingJob","endTime":"2025-02-06T05:28:22.688Z"},{"startTime":"2025-02-06T05:28:22.677Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:28:22.678Z"},{"startTime":"2025-02-06T05:28:53.116Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:28:53.332Z"}]}]},"outputs":{"HelloModuleHostname.stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloModuleHostname/8d02c8a1-7467-45d1-8115-ab7bc3e23cf3/call-Hostname/execution/stdout"},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloModuleHostname/8d02c8a1-7467-45d1-8115-ab7bc3e23cf3","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-06T05:28:54.689Z","start":"2025-02-06T05:28:14.886Z","id":"8d02c8a1-7467-45d1-8115-ab7bc3e23cf3","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-8d02c8a1-7467-45d1-8115-ab7bc3e23cf3"},"submission":"2025-02-06T05:26:59.958Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:29:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3721'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/48e6bcde-1645-4733-93d6-4aeca77e341c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:27:34.845Z","cromwellVersion":"87"},{"cromwellId":"cromid-fd06105","description":"Finished","timestamp":"2025-02-06T05:27:34.870Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that fails against womtool.\n## From https://github.com/broadinstitute/cromwell\n\n####
        WORKFLOW DEFINITION\n\nworkflow oops {\n  call oopsie\n}\n\n#### TASK DEFINITIONS\n\ntask
        oopsie {\n  input {\n    String str\n  }\n  command { echo ${str} }\n  runtime
        { docker: docker_image }\n}\n","root":"","options":"{\n\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"actualWorkflowLanguage":"WDL","status":"Failed","failures":[{"causedBy":[{"causedBy":[],"message":"Failed
        to process task definition ''oopsie'' (reason 1 of 1): Cannot lookup value
        ''docker_image'', it is never declared. Available values are: [''str'']"}],"message":"Workflow
        input processing failed"}],"end":"2025-02-06T05:27:34.870Z","start":"2025-02-06T05:27:34.846Z","id":"48e6bcde-1645-4733-93d6-4aeca77e341c","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-48e6bcde-1645-4733-93d6-4aeca77e341c"},"submission":"2025-02-06T05:26:59.995Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:29:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1307'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/c2872953-849c-4109-bd33-2d0e8c450da2/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow WildcardsandConditions
        {\n    input {\n        String prefix  # Required input for the file prefix
        (no default value)\n    }\n\n    call wildcard_and_conditions_test {\n        input:\n            prefix
        = prefix  # Explicitly pass the workflow input to the task\n    }\n\n    output
        {\n        Array[File] txt_files = wildcard_and_conditions_test.txt_files\n        String
        conditional_result = wildcard_and_conditions_test.conditional_output\n    }\n}\n\ntask
        wildcard_and_conditions_test {\n    input {\n        String prefix  # Required
        input for file creation\n        Boolean create_extra_file = true  # Default
        value for conditional logic\n    }\n\n    command <<<\n        # Create multiple
        .txt files to test wildcard resolution\n        for i in {1..3}; do\n            echo
        \"File content $i\" > \"~{prefix}_$i.txt\"\n        done\n\n        # Create
        an extra file conditionally\n        if [[ ~{create_extra_file} == \"true\"
        ]]; then\n            echo \"Extra file content\" > ~{prefix}_extra.txt\n        fi\n\n        #
        Parse inputs directly in the command\n        echo \"Parsed prefix: ~{prefix}\"
        > parsed_output.txt\n    >>>\n\n    output {\n        Array[File] txt_files
        = glob(\"*.txt\")  # Test wildcard resolution\n        String conditional_output
        = read_string(\"parsed_output.txt\")  # Verify input parsing\n    }\n\n    runtime
        {\n        docker: \"ubuntu:20.04\"\n    }\n}\n","root":"","options":"{\n\n}","inputs":"{\"WildcardsandConditions.prefix\":\"testfile\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"c2872953-849c-4109-bd33-2d0e8c450da2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-c2872953-849c-4109-bd33-2d0e8c450da2"},"submission":"2025-02-06T05:27:00.030Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:29:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1802'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/c2872953-849c-4109-bd33-2d0e8c450da2/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow WildcardsandConditions
        {\n    input {\n        String prefix  # Required input for the file prefix
        (no default value)\n    }\n\n    call wildcard_and_conditions_test {\n        input:\n            prefix
        = prefix  # Explicitly pass the workflow input to the task\n    }\n\n    output
        {\n        Array[File] txt_files = wildcard_and_conditions_test.txt_files\n        String
        conditional_result = wildcard_and_conditions_test.conditional_output\n    }\n}\n\ntask
        wildcard_and_conditions_test {\n    input {\n        String prefix  # Required
        input for file creation\n        Boolean create_extra_file = true  # Default
        value for conditional logic\n    }\n\n    command <<<\n        # Create multiple
        .txt files to test wildcard resolution\n        for i in {1..3}; do\n            echo
        \"File content $i\" > \"~{prefix}_$i.txt\"\n        done\n\n        # Create
        an extra file conditionally\n        if [[ ~{create_extra_file} == \"true\"
        ]]; then\n            echo \"Extra file content\" > ~{prefix}_extra.txt\n        fi\n\n        #
        Parse inputs directly in the command\n        echo \"Parsed prefix: ~{prefix}\"
        > parsed_output.txt\n    >>>\n\n    output {\n        Array[File] txt_files
        = glob(\"*.txt\")  # Test wildcard resolution\n        String conditional_output
        = read_string(\"parsed_output.txt\")  # Verify input parsing\n    }\n\n    runtime
        {\n        docker: \"ubuntu:20.04\"\n    }\n}\n","root":"","options":"{\n\n}","inputs":"{\"WildcardsandConditions.prefix\":\"testfile\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"c2872953-849c-4109-bd33-2d0e8c450da2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-c2872953-849c-4109-bd33-2d0e8c450da2"},"submission":"2025-02-06T05:27:00.030Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:29:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1802'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/c2872953-849c-4109-bd33-2d0e8c450da2/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow WildcardsandConditions
        {\n    input {\n        String prefix  # Required input for the file prefix
        (no default value)\n    }\n\n    call wildcard_and_conditions_test {\n        input:\n            prefix
        = prefix  # Explicitly pass the workflow input to the task\n    }\n\n    output
        {\n        Array[File] txt_files = wildcard_and_conditions_test.txt_files\n        String
        conditional_result = wildcard_and_conditions_test.conditional_output\n    }\n}\n\ntask
        wildcard_and_conditions_test {\n    input {\n        String prefix  # Required
        input for file creation\n        Boolean create_extra_file = true  # Default
        value for conditional logic\n    }\n\n    command <<<\n        # Create multiple
        .txt files to test wildcard resolution\n        for i in {1..3}; do\n            echo
        \"File content $i\" > \"~{prefix}_$i.txt\"\n        done\n\n        # Create
        an extra file conditionally\n        if [[ ~{create_extra_file} == \"true\"
        ]]; then\n            echo \"Extra file content\" > ~{prefix}_extra.txt\n        fi\n\n        #
        Parse inputs directly in the command\n        echo \"Parsed prefix: ~{prefix}\"
        > parsed_output.txt\n    >>>\n\n    output {\n        Array[File] txt_files
        = glob(\"*.txt\")  # Test wildcard resolution\n        String conditional_output
        = read_string(\"parsed_output.txt\")  # Verify input parsing\n    }\n\n    runtime
        {\n        docker: \"ubuntu:20.04\"\n    }\n}\n","root":"","options":"{\n\n}","inputs":"{\"WildcardsandConditions.prefix\":\"testfile\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"c2872953-849c-4109-bd33-2d0e8c450da2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-c2872953-849c-4109-bd33-2d0e8c450da2"},"submission":"2025-02-06T05:27:00.030Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:29:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1802'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/c2872953-849c-4109-bd33-2d0e8c450da2/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow WildcardsandConditions
        {\n    input {\n        String prefix  # Required input for the file prefix
        (no default value)\n    }\n\n    call wildcard_and_conditions_test {\n        input:\n            prefix
        = prefix  # Explicitly pass the workflow input to the task\n    }\n\n    output
        {\n        Array[File] txt_files = wildcard_and_conditions_test.txt_files\n        String
        conditional_result = wildcard_and_conditions_test.conditional_output\n    }\n}\n\ntask
        wildcard_and_conditions_test {\n    input {\n        String prefix  # Required
        input for file creation\n        Boolean create_extra_file = true  # Default
        value for conditional logic\n    }\n\n    command <<<\n        # Create multiple
        .txt files to test wildcard resolution\n        for i in {1..3}; do\n            echo
        \"File content $i\" > \"~{prefix}_$i.txt\"\n        done\n\n        # Create
        an extra file conditionally\n        if [[ ~{create_extra_file} == \"true\"
        ]]; then\n            echo \"Extra file content\" > ~{prefix}_extra.txt\n        fi\n\n        #
        Parse inputs directly in the command\n        echo \"Parsed prefix: ~{prefix}\"
        > parsed_output.txt\n    >>>\n\n    output {\n        Array[File] txt_files
        = glob(\"*.txt\")  # Test wildcard resolution\n        String conditional_output
        = read_string(\"parsed_output.txt\")  # Verify input parsing\n    }\n\n    runtime
        {\n        docker: \"ubuntu:20.04\"\n    }\n}\n","root":"","options":"{\n\n}","inputs":"{\"WildcardsandConditions.prefix\":\"testfile\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"c2872953-849c-4109-bd33-2d0e8c450da2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-c2872953-849c-4109-bd33-2d0e8c450da2"},"submission":"2025-02-06T05:27:00.030Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:29:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1802'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/c2872953-849c-4109-bd33-2d0e8c450da2/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow WildcardsandConditions
        {\n    input {\n        String prefix  # Required input for the file prefix
        (no default value)\n    }\n\n    call wildcard_and_conditions_test {\n        input:\n            prefix
        = prefix  # Explicitly pass the workflow input to the task\n    }\n\n    output
        {\n        Array[File] txt_files = wildcard_and_conditions_test.txt_files\n        String
        conditional_result = wildcard_and_conditions_test.conditional_output\n    }\n}\n\ntask
        wildcard_and_conditions_test {\n    input {\n        String prefix  # Required
        input for file creation\n        Boolean create_extra_file = true  # Default
        value for conditional logic\n    }\n\n    command <<<\n        # Create multiple
        .txt files to test wildcard resolution\n        for i in {1..3}; do\n            echo
        \"File content $i\" > \"~{prefix}_$i.txt\"\n        done\n\n        # Create
        an extra file conditionally\n        if [[ ~{create_extra_file} == \"true\"
        ]]; then\n            echo \"Extra file content\" > ~{prefix}_extra.txt\n        fi\n\n        #
        Parse inputs directly in the command\n        echo \"Parsed prefix: ~{prefix}\"
        > parsed_output.txt\n    >>>\n\n    output {\n        Array[File] txt_files
        = glob(\"*.txt\")  # Test wildcard resolution\n        String conditional_output
        = read_string(\"parsed_output.txt\")  # Verify input parsing\n    }\n\n    runtime
        {\n        docker: \"ubuntu:20.04\"\n    }\n}\n","root":"","options":"{\n\n}","inputs":"{\"WildcardsandConditions.prefix\":\"testfile\"}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"c2872953-849c-4109-bd33-2d0e8c450da2","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-c2872953-849c-4109-bd33-2d0e8c450da2"},"submission":"2025-02-06T05:27:00.030Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:29:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1802'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/c2872953-849c-4109-bd33-2d0e8c450da2/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"WildcardsandConditions","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:29:34.965Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow WildcardsandConditions {\n    input {\n        String prefix  #
        Required input for the file prefix (no default value)\n    }\n\n    call wildcard_and_conditions_test
        {\n        input:\n            prefix = prefix  # Explicitly pass the workflow
        input to the task\n    }\n\n    output {\n        Array[File] txt_files =
        wildcard_and_conditions_test.txt_files\n        String conditional_result
        = wildcard_and_conditions_test.conditional_output\n    }\n}\n\ntask wildcard_and_conditions_test
        {\n    input {\n        String prefix  # Required input for file creation\n        Boolean
        create_extra_file = true  # Default value for conditional logic\n    }\n\n    command
        <<<\n        # Create multiple .txt files to test wildcard resolution\n        for
        i in {1..3}; do\n            echo \"File content $i\" > \"~{prefix}_$i.txt\"\n        done\n\n        #
        Create an extra file conditionally\n        if [[ ~{create_extra_file} ==
        \"true\" ]]; then\n            echo \"Extra file content\" > ~{prefix}_extra.txt\n        fi\n\n        #
        Parse inputs directly in the command\n        echo \"Parsed prefix: ~{prefix}\"
        > parsed_output.txt\n    >>>\n\n    output {\n        Array[File] txt_files
        = glob(\"*.txt\")  # Test wildcard resolution\n        String conditional_output
        = read_string(\"parsed_output.txt\")  # Verify input parsing\n    }\n\n    runtime
        {\n        docker: \"ubuntu:20.04\"\n    }\n}\n","root":"","options":"{\n\n}","inputs":"{\"WildcardsandConditions.prefix\":\"testfile\"}","workflowUrl":"","labels":"{}"},"calls":{"WildcardsandConditions.wildcard_and_conditions_test":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-02-06T05:29:37.028Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/c2872953-849c-4109-bd33-2d0e8c450da2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-06T05:29:34.965Z","id":"c2872953-849c-4109-bd33-2d0e8c450da2","inputs":{"prefix":"testfile","WildcardsandConditions.wildcard_and_conditions_test.create_extra_file":true},"labels":{"cromwell-workflow-id":"cromwell-c2872953-849c-4109-bd33-2d0e8c450da2"},"submission":"2025-02-06T05:27:00.030Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:29:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2493'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/c2872953-849c-4109-bd33-2d0e8c450da2/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"WildcardsandConditions","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:29:34.965Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow WildcardsandConditions {\n    input {\n        String prefix  #
        Required input for the file prefix (no default value)\n    }\n\n    call wildcard_and_conditions_test
        {\n        input:\n            prefix = prefix  # Explicitly pass the workflow
        input to the task\n    }\n\n    output {\n        Array[File] txt_files =
        wildcard_and_conditions_test.txt_files\n        String conditional_result
        = wildcard_and_conditions_test.conditional_output\n    }\n}\n\ntask wildcard_and_conditions_test
        {\n    input {\n        String prefix  # Required input for file creation\n        Boolean
        create_extra_file = true  # Default value for conditional logic\n    }\n\n    command
        <<<\n        # Create multiple .txt files to test wildcard resolution\n        for
        i in {1..3}; do\n            echo \"File content $i\" > \"~{prefix}_$i.txt\"\n        done\n\n        #
        Create an extra file conditionally\n        if [[ ~{create_extra_file} ==
        \"true\" ]]; then\n            echo \"Extra file content\" > ~{prefix}_extra.txt\n        fi\n\n        #
        Parse inputs directly in the command\n        echo \"Parsed prefix: ~{prefix}\"
        > parsed_output.txt\n    >>>\n\n    output {\n        Array[File] txt_files
        = glob(\"*.txt\")  # Test wildcard resolution\n        String conditional_output
        = read_string(\"parsed_output.txt\")  # Verify input parsing\n    }\n\n    runtime
        {\n        docker: \"ubuntu:20.04\"\n    }\n}\n","root":"","options":"{\n\n}","inputs":"{\"WildcardsandConditions.prefix\":\"testfile\"}","workflowUrl":"","labels":"{}"},"calls":{"WildcardsandConditions.wildcard_and_conditions_test":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-02-06T05:29:37.028Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/c2872953-849c-4109-bd33-2d0e8c450da2","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-06T05:29:34.965Z","id":"c2872953-849c-4109-bd33-2d0e8c450da2","inputs":{"prefix":"testfile","WildcardsandConditions.wildcard_and_conditions_test.create_extra_file":true},"labels":{"cromwell-workflow-id":"cromwell-c2872953-849c-4109-bd33-2d0e8c450da2"},"submission":"2025-02-06T05:27:00.030Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:29:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2493'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/c2872953-849c-4109-bd33-2d0e8c450da2/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"WildcardsandConditions","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:29:34.965Z","cromwellVersion":"87"},{"cromwellId":"cromid-fd06105","description":"Finished","timestamp":"2025-02-06T05:29:46.209Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow WildcardsandConditions {\n    input {\n        String prefix  #
        Required input for the file prefix (no default value)\n    }\n\n    call wildcard_and_conditions_test
        {\n        input:\n            prefix = prefix  # Explicitly pass the workflow
        input to the task\n    }\n\n    output {\n        Array[File] txt_files =
        wildcard_and_conditions_test.txt_files\n        String conditional_result
        = wildcard_and_conditions_test.conditional_output\n    }\n}\n\ntask wildcard_and_conditions_test
        {\n    input {\n        String prefix  # Required input for file creation\n        Boolean
        create_extra_file = true  # Default value for conditional logic\n    }\n\n    command
        <<<\n        # Create multiple .txt files to test wildcard resolution\n        for
        i in {1..3}; do\n            echo \"File content $i\" > \"~{prefix}_$i.txt\"\n        done\n\n        #
        Create an extra file conditionally\n        if [[ ~{create_extra_file} ==
        \"true\" ]]; then\n            echo \"Extra file content\" > ~{prefix}_extra.txt\n        fi\n\n        #
        Parse inputs directly in the command\n        echo \"Parsed prefix: ~{prefix}\"
        > parsed_output.txt\n    >>>\n\n    output {\n        Array[File] txt_files
        = glob(\"*.txt\")  # Test wildcard resolution\n        String conditional_output
        = read_string(\"parsed_output.txt\")  # Verify input parsing\n    }\n\n    runtime
        {\n        docker: \"ubuntu:20.04\"\n    }\n}\n","root":"","options":"{\n\n}","inputs":"{\"WildcardsandConditions.prefix\":\"testfile\"}","workflowUrl":"","labels":"{}"},"calls":{"WildcardsandConditions.wildcard_and_conditions_test":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/c2872953-849c-4109-bd33-2d0e8c450da2/call-wildcard_and_conditions_test/execution/stdout","shardIndex":-1,"outputs":{"txt_files":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/c2872953-849c-4109-bd33-2d0e8c450da2/call-wildcard_and_conditions_test/cacheCopy/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/parsed_output.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/c2872953-849c-4109-bd33-2d0e8c450da2/call-wildcard_and_conditions_test/cacheCopy/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/testfile_1.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/c2872953-849c-4109-bd33-2d0e8c450da2/call-wildcard_and_conditions_test/cacheCopy/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/testfile_2.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/c2872953-849c-4109-bd33-2d0e8c450da2/call-wildcard_and_conditions_test/cacheCopy/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/testfile_3.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/c2872953-849c-4109-bd33-2d0e8c450da2/call-wildcard_and_conditions_test/cacheCopy/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/testfile_extra.txt"],"conditional_output":"Parsed
        prefix: testfile"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":true,"hashes":{"output count":"C81E728D9D4C2F636F067F89CC14862C","runtime
        attribute":{"docker":"04F140687C399478C9AF991349F97438","continueOnReturnCode":"CFCD208495D565EF66E7DFF9F98764DA","failOnStderr":"68934A3E9455FA72420237EB05902327"},"output
        expression":{"Array(File) txt_files":"F29F66E79A2A473E5D1A51AFD7E9ECD1","String
        conditional_output":"8F91FD90C11979B03A2731EDE5C4E85F"},"input count":"C81E728D9D4C2F636F067F89CC14862C","backend
        name":"00B6EE220EFAF25B88D10126BC21D1FA","command template":"7FE503A9A91FAA2A951DA172D79F0AC2","input":{"String
        prefix":"454FB5D80073C7F20F9D964CCC6439AB","Boolean create_extra_file":"B326B5062B2F0E69046810717534CB09"}},"effectiveCallCachingMode":"ReadAndWriteCache","hit":true,"result":"Cache
        Hit: 44b9a12f-d38f-4f70-97ba-7dcab086bc08:WildcardsandConditions.wildcard_and_conditions_test:-1"},"inputs":{"prefix":"testfile","create_extra_file":true},"returnCode":0,"backend":"gizmo","end":"2025-02-06T05:29:44.333Z","start":"2025-02-06T05:29:37.028Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/c2872953-849c-4109-bd33-2d0e8c450da2/call-wildcard_and_conditions_test/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/c2872953-849c-4109-bd33-2d0e8c450da2/call-wildcard_and_conditions_test","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:29:37.029Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:29:42.677Z"},{"startTime":"2025-02-06T05:29:42.690Z","description":"CallCacheReading","endTime":"2025-02-06T05:29:42.750Z"},{"startTime":"2025-02-06T05:29:42.677Z","description":"PreparingJob","endTime":"2025-02-06T05:29:42.690Z"},{"startTime":"2025-02-06T05:29:37.029Z","description":"Pending","endTime":"2025-02-06T05:29:37.029Z"},{"startTime":"2025-02-06T05:29:42.750Z","description":"UpdatingCallCache","endTime":"2025-02-06T05:29:43.345Z"},{"startTime":"2025-02-06T05:29:42.677Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:29:42.677Z"},{"startTime":"2025-02-06T05:29:43.345Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:29:44.333Z"}]}]},"outputs":{"WildcardsandConditions.conditional_result":"Parsed
        prefix: testfile","WildcardsandConditions.txt_files":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/c2872953-849c-4109-bd33-2d0e8c450da2/call-wildcard_and_conditions_test/cacheCopy/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/parsed_output.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/c2872953-849c-4109-bd33-2d0e8c450da2/call-wildcard_and_conditions_test/cacheCopy/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/testfile_1.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/c2872953-849c-4109-bd33-2d0e8c450da2/call-wildcard_and_conditions_test/cacheCopy/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/testfile_2.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/c2872953-849c-4109-bd33-2d0e8c450da2/call-wildcard_and_conditions_test/cacheCopy/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/testfile_3.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/c2872953-849c-4109-bd33-2d0e8c450da2/call-wildcard_and_conditions_test/cacheCopy/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/testfile_extra.txt"]},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/c2872953-849c-4109-bd33-2d0e8c450da2","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-06T05:29:46.209Z","start":"2025-02-06T05:29:34.965Z","id":"c2872953-849c-4109-bd33-2d0e8c450da2","inputs":{"prefix":"testfile","WildcardsandConditions.wildcard_and_conditions_test.create_extra_file":true},"labels":{"cromwell-workflow-id":"cromwell-c2872953-849c-4109-bd33-2d0e8c450da2"},"submission":"2025-02-06T05:27:00.030Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:29:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7522'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/d03c6a28-b1b0-4dc4-819c-7677e6754418/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow testFileoperations
        {\n    call file_operations\n\n    output {\n        File created_file1 =
        file_operations.created_file1\n        File moved_file = file_operations.moved_file\n        File
        renamed_file = file_operations.renamed_file\n    }\n}\n\ntask file_operations
        {\n    command <<<\n        # Create three different files\n        echo \"This
        is the first created file.\" > file1.txt\n        echo \"This is the second
        file that will be moved.\" > file2.txt\n        echo \"This is the third file
        that will be renamed.\" > file3.txt\n        \n        # Move the second file
        to a new directory\n        mkdir -p output_dir\n        mv file2.txt output_dir/\n        \n        #
        Rename the third file\n        mv file3.txt file3_renamed.txt\n    >>>\n\n    output
        {\n        # Output the actual existing files\n        File created_file1
        = \"file1.txt\"                  # The first file remains unchanged\n        File
        moved_file = \"output_dir/file2.txt\"          # The second file after being
        moved\n        File renamed_file = \"file3_renamed.txt\"           # The third
        file after being renamed\n    }\n\n    runtime {\n        docker: \"ubuntu:20.04\"\n    }\n}\n","root":"","options":"{\n\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"d03c6a28-b1b0-4dc4-819c-7677e6754418","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-d03c6a28-b1b0-4dc4-819c-7677e6754418"},"submission":"2025-02-06T05:27:00.067Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:29:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1530'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/d03c6a28-b1b0-4dc4-819c-7677e6754418/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"testFileoperations","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:29:54.985Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow testFileoperations {\n    call file_operations\n\n    output
        {\n        File created_file1 = file_operations.created_file1\n        File
        moved_file = file_operations.moved_file\n        File renamed_file = file_operations.renamed_file\n    }\n}\n\ntask
        file_operations {\n    command <<<\n        # Create three different files\n        echo
        \"This is the first created file.\" > file1.txt\n        echo \"This is the
        second file that will be moved.\" > file2.txt\n        echo \"This is the
        third file that will be renamed.\" > file3.txt\n        \n        # Move the
        second file to a new directory\n        mkdir -p output_dir\n        mv file2.txt
        output_dir/\n        \n        # Rename the third file\n        mv file3.txt
        file3_renamed.txt\n    >>>\n\n    output {\n        # Output the actual existing
        files\n        File created_file1 = \"file1.txt\"                  # The first
        file remains unchanged\n        File moved_file = \"output_dir/file2.txt\"          #
        The second file after being moved\n        File renamed_file = \"file3_renamed.txt\"           #
        The third file after being renamed\n    }\n\n    runtime {\n        docker:
        \"ubuntu:20.04\"\n    }\n}\n","root":"","options":"{\n\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"testFileoperations.file_operations":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-02-06T05:29:56.029Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/d03c6a28-b1b0-4dc4-819c-7677e6754418","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-06T05:29:54.985Z","id":"d03c6a28-b1b0-4dc4-819c-7677e6754418","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-d03c6a28-b1b0-4dc4-819c-7677e6754418"},"submission":"2025-02-06T05:27:00.067Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:30:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2100'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/d03c6a28-b1b0-4dc4-819c-7677e6754418/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"testFileoperations","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"Finished","timestamp":"2025-02-06T05:30:07.250Z","cromwellVersion":"87"},{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:29:54.985Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow testFileoperations {\n    call file_operations\n\n    output
        {\n        File created_file1 = file_operations.created_file1\n        File
        moved_file = file_operations.moved_file\n        File renamed_file = file_operations.renamed_file\n    }\n}\n\ntask
        file_operations {\n    command <<<\n        # Create three different files\n        echo
        \"This is the first created file.\" > file1.txt\n        echo \"This is the
        second file that will be moved.\" > file2.txt\n        echo \"This is the
        third file that will be renamed.\" > file3.txt\n        \n        # Move the
        second file to a new directory\n        mkdir -p output_dir\n        mv file2.txt
        output_dir/\n        \n        # Rename the third file\n        mv file3.txt
        file3_renamed.txt\n    >>>\n\n    output {\n        # Output the actual existing
        files\n        File created_file1 = \"file1.txt\"                  # The first
        file remains unchanged\n        File moved_file = \"output_dir/file2.txt\"          #
        The second file after being moved\n        File renamed_file = \"file3_renamed.txt\"           #
        The third file after being renamed\n    }\n\n    runtime {\n        docker:
        \"ubuntu:20.04\"\n    }\n}\n","root":"","options":"{\n\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"testFileoperations.file_operations":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/d03c6a28-b1b0-4dc4-819c-7677e6754418/call-file_operations/execution/stdout","shardIndex":-1,"outputs":{"renamed_file":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/d03c6a28-b1b0-4dc4-819c-7677e6754418/call-file_operations/cacheCopy/execution/file3_renamed.txt","moved_file":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/d03c6a28-b1b0-4dc4-819c-7677e6754418/call-file_operations/cacheCopy/execution/output_dir/file2.txt","created_file1":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/d03c6a28-b1b0-4dc4-819c-7677e6754418/call-file_operations/cacheCopy/execution/file1.txt"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":true,"hashes":{"output count":"ECCBC87E4B5CE2FE28308FD9F2A7BAF3","runtime
        attribute":{"docker":"04F140687C399478C9AF991349F97438","continueOnReturnCode":"CFCD208495D565EF66E7DFF9F98764DA","failOnStderr":"68934A3E9455FA72420237EB05902327"},"output
        expression":{"File created_file1":"30858D03CABDAFBE6C1AF1D08B0C218C","File
        moved_file":"E15E84B07B8723120530E87896941CEB","File renamed_file":"8E19DAF4C496F1D4EF93F1DD11DB48E8"},"input
        count":"CFCD208495D565EF66E7DFF9F98764DA","backend name":"00B6EE220EFAF25B88D10126BC21D1FA","command
        template":"871F60E3384EFFB6FF3EA0DF67DDBE41"},"effectiveCallCachingMode":"ReadAndWriteCache","hit":true,"result":"Cache
        Hit: 781859cf-2a53-4898-8c2e-34cc2314d14b:testFileoperations.file_operations:-1"},"inputs":{},"returnCode":0,"backend":"gizmo","end":"2025-02-06T05:30:05.332Z","start":"2025-02-06T05:29:56.029Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/d03c6a28-b1b0-4dc4-819c-7677e6754418/call-file_operations/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/d03c6a28-b1b0-4dc4-819c-7677e6754418/call-file_operations","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:30:02.677Z","description":"PreparingJob","endTime":"2025-02-06T05:30:02.699Z"},{"startTime":"2025-02-06T05:30:02.677Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:30:02.677Z"},{"startTime":"2025-02-06T05:30:04.345Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:30:05.332Z"},{"startTime":"2025-02-06T05:30:02.699Z","description":"CallCacheReading","endTime":"2025-02-06T05:30:02.748Z"},{"startTime":"2025-02-06T05:30:02.748Z","description":"UpdatingCallCache","endTime":"2025-02-06T05:30:04.345Z"},{"startTime":"2025-02-06T05:29:56.029Z","description":"Pending","endTime":"2025-02-06T05:29:56.029Z"},{"startTime":"2025-02-06T05:29:56.029Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:30:02.677Z"}]}]},"outputs":{"testFileoperations.moved_file":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/d03c6a28-b1b0-4dc4-819c-7677e6754418/call-file_operations/cacheCopy/execution/output_dir/file2.txt","testFileoperations.renamed_file":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/d03c6a28-b1b0-4dc4-819c-7677e6754418/call-file_operations/cacheCopy/execution/file3_renamed.txt","testFileoperations.created_file1":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/d03c6a28-b1b0-4dc4-819c-7677e6754418/call-file_operations/cacheCopy/execution/file1.txt"},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/d03c6a28-b1b0-4dc4-819c-7677e6754418","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-06T05:30:07.250Z","start":"2025-02-06T05:29:54.985Z","id":"d03c6a28-b1b0-4dc4-819c-7677e6754418","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-d03c6a28-b1b0-4dc4-819c-7677e6754418"},"submission":"2025-02-06T05:27:00.067Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:30:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5688'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/37b0729f-9647-4991-a715-4c60ecce2591/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"basicTaskTest","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:28:54.926Z","cromwellVersion":"87"},{"cromwellId":"cromid-fd06105","description":"Finished","timestamp":"2025-02-06T05:29:06.190Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# The basicTaskTest workflow calls a task named simpleTask, which takes
        a string input and writes it to a file called output.txt. It demonstrates
        a basic execution of a task with file output.\n\n# This tests basic task execution,
        input handling, and file output functionality. It ensures that a task can
        successfully take an input and generate an output.\n\nworkflow basicTaskTest
        {\n  input {\n    String text = \"Hello, World!\"\n  }\n\n  call simpleTask
        {\n    input:\n      message = text\n  }\n}\n\ntask simpleTask {\n  input
        {\n    String message\n  }\n\n  command <<<\n    echo \"${message}\" > output.txt\n    >>>\n\n  output
        {\n    File outputFile = \"output.txt\"\n  }\n\n  runtime {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"basicTaskTest.simpleTask":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicTaskTest/37b0729f-9647-4991-a715-4c60ecce2591/call-simpleTask/execution/stdout","shardIndex":-1,"outputs":{"outputFile":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicTaskTest/37b0729f-9647-4991-a715-4c60ecce2591/call-simpleTask/cacheCopy/execution/output.txt"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":true,"hashes":{"output count":"C4CA4238A0B923820DCC509A6F75849B","runtime
        attribute":{"docker":"04F140687C399478C9AF991349F97438","continueOnReturnCode":"CFCD208495D565EF66E7DFF9F98764DA","failOnStderr":"68934A3E9455FA72420237EB05902327"},"output
        expression":{"File outputFile":"EF1B47FFA9990E8D058D177073939DF7"},"input
        count":"C4CA4238A0B923820DCC509A6F75849B","backend name":"00B6EE220EFAF25B88D10126BC21D1FA","command
        template":"60686A67B7335CFF2AC7232921C47137","input":{"String message":"7959B2C4AF2FD6D142BA32BABD30CEB7"}},"effectiveCallCachingMode":"ReadAndWriteCache","hit":true,"result":"Cache
        Hit: 8c6dc092-d0ed-432a-be1c-ae6f59117581:basicTaskTest.simpleTask:-1"},"inputs":{"message":"Hello,
        World!"},"returnCode":0,"backend":"gizmo","end":"2025-02-06T05:29:05.333Z","start":"2025-02-06T05:28:57.008Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicTaskTest/37b0729f-9647-4991-a715-4c60ecce2591/call-simpleTask/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicTaskTest/37b0729f-9647-4991-a715-4c60ecce2591/call-simpleTask","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:29:02.688Z","description":"CallCacheReading","endTime":"2025-02-06T05:29:02.732Z"},{"startTime":"2025-02-06T05:29:02.677Z","description":"PreparingJob","endTime":"2025-02-06T05:29:02.688Z"},{"startTime":"2025-02-06T05:29:02.732Z","description":"UpdatingCallCache","endTime":"2025-02-06T05:29:04.343Z"},{"startTime":"2025-02-06T05:29:02.677Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:29:02.677Z"},{"startTime":"2025-02-06T05:28:57.008Z","description":"Pending","endTime":"2025-02-06T05:28:57.008Z"},{"startTime":"2025-02-06T05:29:04.343Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:29:05.333Z"},{"startTime":"2025-02-06T05:28:57.008Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:29:02.677Z"}]}]},"outputs":{"basicTaskTest.simpleTask.outputFile":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicTaskTest/37b0729f-9647-4991-a715-4c60ecce2591/call-simpleTask/cacheCopy/execution/output.txt"},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicTaskTest/37b0729f-9647-4991-a715-4c60ecce2591","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-06T05:29:06.190Z","start":"2025-02-06T05:28:54.926Z","id":"37b0729f-9647-4991-a715-4c60ecce2591","inputs":{"text":"Hello,
        World!"},"labels":{"cromwell-workflow-id":"cromwell-37b0729f-9647-4991-a715-4c60ecce2591"},"submission":"2025-02-06T05:27:00.100Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:30:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4377'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmoj32.fhcrc.org:35541
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmoj32.fhcrc.org:35541/api/workflows/v1/528cf3cc-7089-4e85-89b6-60f64dbc0403/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-fd06105","description":"Finished","timestamp":"2025-02-06T05:30:00.879Z","cromwellVersion":"87"},{"cromwellId":"cromid-fd06105","description":"PickedUp","timestamp":"2025-02-06T05:29:14.944Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the hostname of the node \n##
        the job is submitted to as a test for Docker functionality on Gizmo.\n\n####
        WORKFLOW DEFINITION\n\nworkflow HelloDockerHostname {\n  call Hostname {\n  }\n\n  output
        {\n    File stdout = Hostname.out\n  }\n\n  parameter_meta {\n    stdout:
        \"hostname of the node the job was submitted to\"\n  }\n}\n\n#### TASK DEFINITIONS\n\ntask
        Hostname {\n  command <<<\n    echo $(hostname)\n  >>>\n\n  output {\n    File
        out = stdout()\n  }\n\n  runtime {\n    cpu: 1\n    memory: \"1 GB\"\n    docker:
        \"ubuntu:20.04\"\n  }\n\n  parameter_meta {\n    out: \"hostname of the node
        the job was submitted to\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/528cf3cc-7089-4e85-89b6-60f64dbc0403/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"echo
        $(hostname)","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/528cf3cc-7089-4e85-89b6-60f64dbc0403/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"8313794","backend":"gizmo","start":"2025-02-06T05:29:15.999Z","end":"2025-02-06T05:29:59.332Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/528cf3cc-7089-4e85-89b6-60f64dbc0403/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/528cf3cc-7089-4e85-89b6-60f64dbc0403/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-02-06T05:29:15.999Z","description":"RequestingExecutionToken","endTime":"2025-02-06T05:29:22.677Z"},{"startTime":"2025-02-06T05:29:22.688Z","description":"RunningJob","endTime":"2025-02-06T05:29:59.164Z"},{"startTime":"2025-02-06T05:29:59.164Z","description":"UpdatingJobStore","endTime":"2025-02-06T05:29:59.332Z"},{"startTime":"2025-02-06T05:29:22.677Z","description":"PreparingJob","endTime":"2025-02-06T05:29:22.688Z"},{"startTime":"2025-02-06T05:29:15.999Z","description":"Pending","endTime":"2025-02-06T05:29:15.999Z"},{"startTime":"2025-02-06T05:29:22.677Z","description":"WaitingForValueStore","endTime":"2025-02-06T05:29:22.677Z"}]}]},"outputs":{"HelloDockerHostname.stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/528cf3cc-7089-4e85-89b6-60f64dbc0403/call-Hostname/execution/stdout"},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/528cf3cc-7089-4e85-89b6-60f64dbc0403","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-06T05:30:00.879Z","start":"2025-02-06T05:29:14.945Z","id":"528cf3cc-7089-4e85-89b6-60f64dbc0403","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-528cf3cc-7089-4e85-89b6-60f64dbc0403"},"submission":"2025-02-06T05:27:00.139Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 06 Feb 2025 05:30:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3801'
    status:
      code: 200
      message: OK
version: 1
