interactions:
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:35:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:35:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:35:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:35:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:35:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:35:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:35:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:35:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:35:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:35:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:36:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:36:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:36:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:36:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:18.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:20.014Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:18.963Z","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:36:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2496'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:18.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:20.014Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:18.963Z","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:36:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2496'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:18.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/stdout","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:20.014Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:18.963Z","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:36:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3731'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:18.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"11775588","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:20.014Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:18.963Z","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:36:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:18.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"11775588","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:20.014Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:18.963Z","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:36:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:18.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"11775588","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:20.014Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:18.963Z","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:36:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:18.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"11775588","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:20.014Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:18.963Z","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:36:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:18.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"11775588","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:20.014Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:18.963Z","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:36:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:18.962Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/stdout","backendStatus":"Done","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"outputs":{"symlink_output":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/link.txt","file_no_extension":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/datafile","nested_file":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/nested/dir/test.txt","pattern_files":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_1.out","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_2.out","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_3.out"],"file_special_chars":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/test@file#1.txt"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"11775588","backend":"gizmo","start":"2025-02-27T15:36:20.014Z","end":"2025-02-27T15:37:02.570Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:20.014Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:28.854Z"},{"startTime":"2025-02-27T15:36:29.476Z","description":"RunningJob","endTime":"2025-02-27T15:37:02.106Z"},{"startTime":"2025-02-27T15:36:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:29.476Z"},{"startTime":"2025-02-27T15:36:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:28.854Z"},{"startTime":"2025-02-27T15:37:02.106Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:02.570Z"},{"startTime":"2025-02-27T15:36:20.014Z","description":"Pending","endTime":"2025-02-27T15:36:20.014Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:18.963Z","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:37:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '6007'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/73122dc8-2de8-4668-8529-426cfc94a0be/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:18.962Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:37:03.878Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/stdout","backendStatus":"Done","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"outputs":{"symlink_output":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/link.txt","file_no_extension":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/datafile","nested_file":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/nested/dir/test.txt","pattern_files":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_1.out","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_2.out","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_3.out"],"file_special_chars":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/test@file#1.txt"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"11775588","backend":"gizmo","start":"2025-02-27T15:36:20.014Z","end":"2025-02-27T15:37:02.570Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:20.014Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:28.854Z"},{"startTime":"2025-02-27T15:36:29.476Z","description":"RunningJob","endTime":"2025-02-27T15:37:02.106Z"},{"startTime":"2025-02-27T15:36:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:29.476Z"},{"startTime":"2025-02-27T15:36:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:28.854Z"},{"startTime":"2025-02-27T15:37:02.106Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:02.570Z"},{"startTime":"2025-02-27T15:36:20.014Z","description":"Pending","endTime":"2025-02-27T15:36:20.014Z"}]}]},"outputs":{"test_nonstandard_outputs.symlink_file":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/link.txt","test_nonstandard_outputs.nested_output":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/nested/dir/test.txt","test_nonstandard_outputs.glob_files":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_1.out","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_2.out","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_3.out"],"test_nonstandard_outputs.no_extension":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/datafile","test_nonstandard_outputs.special_chars":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be/call-generate_diverse_outputs/execution/test@file#1.txt"},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/73122dc8-2de8-4668-8529-426cfc94a0be","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-27T15:37:03.878Z","start":"2025-02-27T15:36:18.963Z","id":"73122dc8-2de8-4668-8529-426cfc94a0be","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-73122dc8-2de8-4668-8529-426cfc94a0be"},"submission":"2025-02-27T15:35:02.581Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:37:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7671'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"ArrayOperations","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:38.983Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow ArrayOperations {\n    input {\n        # Input arrays for
        different tests\n        Array[String] strings\n        Array[String] additional_strings
        = []  # For testing array concatenation\n        Array[Array[String]] nested_arrays
        = []  # For testing nested arrays\n        Array[Int] numbers = [1, 2, 3,
        4, 5]  # Default integer array for numeric operations\n        Array[File]
        input_files = [] # Array of files to test file operations\n    }\n    \n    #
        Scatter operation to test processing of each element in an array\n    # Test
        empty arrays (original operation still works with empty input)\n    scatter
        (str in strings) {\n        call Uppercase { input: text = str }\n    }\n    \n    #
        Test array indexing (accessing first and last elements)\n    if (length(strings)
        > 0) {\n        call ValidateIndex { input: arr = strings }\n    }\n    \n    #
        Test array functions like sorting, length calculation, and flattening\n    call
        ArrayFunctions { \n        input: \n            arr = strings,\n            nested
        = nested_arrays\n    }\n    \n    # Test array concatenation and verify the
        combined length\n    Array[String] combined = flatten([strings, additional_strings])\n    call
        ArrayConcat {\n        input: \n            arr1 = strings,\n            arr2
        = additional_strings,\n            expected_length = length(combined)\n    }\n    \n    #
        Test integer array operations like summation and combining arrays\n    Array[Int]
        more_numbers = [6, 7, 8, 9, 10]  # Intermediate array declaration\n    call
        IntegerArrayOps {\n        input:\n            numbers = numbers,\n            additional_numbers
        = more_numbers\n    }\n\n    # Test file array operations like localization
        and content reading\n    if (length(input_files) > 0) {\n        call FileArrayOps
        {\n            input:\n                files = input_files\n        }\n    }\n    #
        Outputs to capture results of the tests\n    output {\n        Array[String]
        uppercased = Uppercase.out # Outputs from scatter task\n        Int? first_index
        = ValidateIndex.first_index # First index in string array\n        Int? last_index
        = ValidateIndex.last_index # Last index in string array\n        Array[String]
        sorted_array = ArrayFunctions.sorted # Sorted array\n        Array[Array[String]]
        processed_nested = ArrayFunctions.processed_nested # Processed nested array\n        Boolean
        concat_test_passed = ArrayConcat.test_passed # Result of concatenation test\n        Int
        array_length = ArrayFunctions.arr_length # Length of input array\n        Array[String]
        flattened = ArrayFunctions.flattened # Flattened nested arrays\n        #
        New outputs for integer array operations \n        Int sum_result = IntegerArrayOps.sum
        # Sum of integer array\n        Array[Int] combined_numbers = IntegerArrayOps.combined
        # Combined integer arrays\n        # New outputs for file array operations\n        Array[String]?
        file_contents = FileArrayOps.contents # Contents of files\n        Boolean?
        files_localized = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{"ArrayOperations.ArrayConcat":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayConcat/execution/stdout","backendStatus":"Running","commandLine":"actual_length=$((
        3 + 2 ))\nif [ \"$actual_length\" -eq 5 ]; then\n    echo \"true\"\nelse\n    echo
        \"false\"\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"expected_length":5,"arr1":["hello","world","test"],"arr2":["foo","bar"]},"jobId":"11775616","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:42.145Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayConcat/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayConcat"}],"ArrayOperations.FileArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/execution/stdout","backendStatus":"Running","commandLine":"#
        Test file localization by reading contents\nfor file in /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/inputs/1330878614/test1.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/inputs/1330878614/test2.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/inputs/1330878614/test3.txt;
        do\n    if [ -f \"$file\" ]; then\n        cat \"$file\" >> all_contents.txt\n        echo
        \"---\" >> all_contents.txt  # Separator between files\n    else\n        echo
        \"false\" > localization_success.txt\n        exit 1\n    fi\ndone\necho \"true\"
        > localization_success.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"]},"jobId":"11775617","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps"}],"ArrayOperations.ArrayFunctions":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayFunctions/execution/stdout","backendStatus":"Running","commandLine":"#
        Sort the input array using bash\necho \"hello\nworld\ntest\" | sort > sorted.txt\n\n#
        Get array length\necho \"3\" > length.txt\n\n# Process nested arrays (flatten
        them)\necho \"nested1\nnested2\nnested3\nnested4\" > flattened.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"],"nested":[["nested1","nested2"],["nested3","nested4"]]},"jobId":"11775621","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:41.127Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayFunctions/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayFunctions"}],"ArrayOperations.IntegerArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-IntegerArrayOps/execution/stdout","backendStatus":"Running","commandLine":"        #
        Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in 1 2 3 4 5; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\" > combined.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"additional_numbers":[6,7,8,9,10],"numbers":[1,2,3,4,5]},"jobId":"11775619","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:42.144Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-IntegerArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-IntegerArrayOps"}],"ArrayOperations.ValidateIndex":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ValidateIndex/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"0\" > first_index.txt  # First index\necho \"2\" > last_index.txt  # Last
        index","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"]},"jobId":"11775620","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ValidateIndex/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ValidateIndex"}],"ArrayOperations.Uppercase":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"hello\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"hello"},"jobId":"11775615","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"world\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"world"},"jobId":"11775618","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-1"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"test\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"test"},"jobId":"11775614","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:38.983Z","id":"9f62a4cf-e243-4b41-b87e-e7b5a1cc853b","inputs":{"input_files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"],"additional_strings":["foo","bar"],"numbers":[1,2,3,4,5],"strings":["hello","world","test"],"nested_arrays":[["nested1","nested2"],["nested3","nested4"]]},"labels":{"cromwell-workflow-id":"cromwell-9f62a4cf-e243-4b41-b87e-e7b5a1cc853b"},"submission":"2025-02-27T15:35:02.630Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:37:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '18090'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"ArrayOperations","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:38.983Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow ArrayOperations {\n    input {\n        # Input arrays for
        different tests\n        Array[String] strings\n        Array[String] additional_strings
        = []  # For testing array concatenation\n        Array[Array[String]] nested_arrays
        = []  # For testing nested arrays\n        Array[Int] numbers = [1, 2, 3,
        4, 5]  # Default integer array for numeric operations\n        Array[File]
        input_files = [] # Array of files to test file operations\n    }\n    \n    #
        Scatter operation to test processing of each element in an array\n    # Test
        empty arrays (original operation still works with empty input)\n    scatter
        (str in strings) {\n        call Uppercase { input: text = str }\n    }\n    \n    #
        Test array indexing (accessing first and last elements)\n    if (length(strings)
        > 0) {\n        call ValidateIndex { input: arr = strings }\n    }\n    \n    #
        Test array functions like sorting, length calculation, and flattening\n    call
        ArrayFunctions { \n        input: \n            arr = strings,\n            nested
        = nested_arrays\n    }\n    \n    # Test array concatenation and verify the
        combined length\n    Array[String] combined = flatten([strings, additional_strings])\n    call
        ArrayConcat {\n        input: \n            arr1 = strings,\n            arr2
        = additional_strings,\n            expected_length = length(combined)\n    }\n    \n    #
        Test integer array operations like summation and combining arrays\n    Array[Int]
        more_numbers = [6, 7, 8, 9, 10]  # Intermediate array declaration\n    call
        IntegerArrayOps {\n        input:\n            numbers = numbers,\n            additional_numbers
        = more_numbers\n    }\n\n    # Test file array operations like localization
        and content reading\n    if (length(input_files) > 0) {\n        call FileArrayOps
        {\n            input:\n                files = input_files\n        }\n    }\n    #
        Outputs to capture results of the tests\n    output {\n        Array[String]
        uppercased = Uppercase.out # Outputs from scatter task\n        Int? first_index
        = ValidateIndex.first_index # First index in string array\n        Int? last_index
        = ValidateIndex.last_index # Last index in string array\n        Array[String]
        sorted_array = ArrayFunctions.sorted # Sorted array\n        Array[Array[String]]
        processed_nested = ArrayFunctions.processed_nested # Processed nested array\n        Boolean
        concat_test_passed = ArrayConcat.test_passed # Result of concatenation test\n        Int
        array_length = ArrayFunctions.arr_length # Length of input array\n        Array[String]
        flattened = ArrayFunctions.flattened # Flattened nested arrays\n        #
        New outputs for integer array operations \n        Int sum_result = IntegerArrayOps.sum
        # Sum of integer array\n        Array[Int] combined_numbers = IntegerArrayOps.combined
        # Combined integer arrays\n        # New outputs for file array operations\n        Array[String]?
        file_contents = FileArrayOps.contents # Contents of files\n        Boolean?
        files_localized = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{"ArrayOperations.ArrayConcat":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayConcat/execution/stdout","backendStatus":"Running","commandLine":"actual_length=$((
        3 + 2 ))\nif [ \"$actual_length\" -eq 5 ]; then\n    echo \"true\"\nelse\n    echo
        \"false\"\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"expected_length":5,"arr1":["hello","world","test"],"arr2":["foo","bar"]},"jobId":"11775616","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:42.145Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayConcat/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayConcat"}],"ArrayOperations.FileArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/execution/stdout","backendStatus":"Running","commandLine":"#
        Test file localization by reading contents\nfor file in /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/inputs/1330878614/test1.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/inputs/1330878614/test2.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/inputs/1330878614/test3.txt;
        do\n    if [ -f \"$file\" ]; then\n        cat \"$file\" >> all_contents.txt\n        echo
        \"---\" >> all_contents.txt  # Separator between files\n    else\n        echo
        \"false\" > localization_success.txt\n        exit 1\n    fi\ndone\necho \"true\"
        > localization_success.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"]},"jobId":"11775617","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps"}],"ArrayOperations.ArrayFunctions":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayFunctions/execution/stdout","backendStatus":"Running","commandLine":"#
        Sort the input array using bash\necho \"hello\nworld\ntest\" | sort > sorted.txt\n\n#
        Get array length\necho \"3\" > length.txt\n\n# Process nested arrays (flatten
        them)\necho \"nested1\nnested2\nnested3\nnested4\" > flattened.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"],"nested":[["nested1","nested2"],["nested3","nested4"]]},"jobId":"11775621","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:41.127Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayFunctions/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayFunctions"}],"ArrayOperations.IntegerArrayOps":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-IntegerArrayOps/execution/stdout","backendStatus":"Running","commandLine":"        #
        Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in 1 2 3 4 5; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\" > combined.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"additional_numbers":[6,7,8,9,10],"numbers":[1,2,3,4,5]},"jobId":"11775619","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:42.144Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-IntegerArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-IntegerArrayOps"}],"ArrayOperations.ValidateIndex":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ValidateIndex/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"0\" > first_index.txt  # First index\necho \"2\" > last_index.txt  # Last
        index","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"]},"jobId":"11775620","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ValidateIndex/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ValidateIndex"}],"ArrayOperations.Uppercase":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"hello\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"hello"},"jobId":"11775615","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"world\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"world"},"jobId":"11775618","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-1"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"test\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"test"},"jobId":"11775614","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:38.983Z","id":"9f62a4cf-e243-4b41-b87e-e7b5a1cc853b","inputs":{"input_files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"],"additional_strings":["foo","bar"],"numbers":[1,2,3,4,5],"strings":["hello","world","test"],"nested_arrays":[["nested1","nested2"],["nested3","nested4"]]},"labels":{"cromwell-workflow-id":"cromwell-9f62a4cf-e243-4b41-b87e-e7b5a1cc853b"},"submission":"2025-02-27T15:35:02.630Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:37:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '18090'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"ArrayOperations","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:38.983Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow ArrayOperations {\n    input {\n        # Input arrays for
        different tests\n        Array[String] strings\n        Array[String] additional_strings
        = []  # For testing array concatenation\n        Array[Array[String]] nested_arrays
        = []  # For testing nested arrays\n        Array[Int] numbers = [1, 2, 3,
        4, 5]  # Default integer array for numeric operations\n        Array[File]
        input_files = [] # Array of files to test file operations\n    }\n    \n    #
        Scatter operation to test processing of each element in an array\n    # Test
        empty arrays (original operation still works with empty input)\n    scatter
        (str in strings) {\n        call Uppercase { input: text = str }\n    }\n    \n    #
        Test array indexing (accessing first and last elements)\n    if (length(strings)
        > 0) {\n        call ValidateIndex { input: arr = strings }\n    }\n    \n    #
        Test array functions like sorting, length calculation, and flattening\n    call
        ArrayFunctions { \n        input: \n            arr = strings,\n            nested
        = nested_arrays\n    }\n    \n    # Test array concatenation and verify the
        combined length\n    Array[String] combined = flatten([strings, additional_strings])\n    call
        ArrayConcat {\n        input: \n            arr1 = strings,\n            arr2
        = additional_strings,\n            expected_length = length(combined)\n    }\n    \n    #
        Test integer array operations like summation and combining arrays\n    Array[Int]
        more_numbers = [6, 7, 8, 9, 10]  # Intermediate array declaration\n    call
        IntegerArrayOps {\n        input:\n            numbers = numbers,\n            additional_numbers
        = more_numbers\n    }\n\n    # Test file array operations like localization
        and content reading\n    if (length(input_files) > 0) {\n        call FileArrayOps
        {\n            input:\n                files = input_files\n        }\n    }\n    #
        Outputs to capture results of the tests\n    output {\n        Array[String]
        uppercased = Uppercase.out # Outputs from scatter task\n        Int? first_index
        = ValidateIndex.first_index # First index in string array\n        Int? last_index
        = ValidateIndex.last_index # Last index in string array\n        Array[String]
        sorted_array = ArrayFunctions.sorted # Sorted array\n        Array[Array[String]]
        processed_nested = ArrayFunctions.processed_nested # Processed nested array\n        Boolean
        concat_test_passed = ArrayConcat.test_passed # Result of concatenation test\n        Int
        array_length = ArrayFunctions.arr_length # Length of input array\n        Array[String]
        flattened = ArrayFunctions.flattened # Flattened nested arrays\n        #
        New outputs for integer array operations \n        Int sum_result = IntegerArrayOps.sum
        # Sum of integer array\n        Array[Int] combined_numbers = IntegerArrayOps.combined
        # Combined integer arrays\n        # New outputs for file array operations\n        Array[String]?
        file_contents = FileArrayOps.contents # Contents of files\n        Boolean?
        files_localized = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{"ArrayOperations.ArrayConcat":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayConcat/execution/stdout","backendStatus":"Running","commandLine":"actual_length=$((
        3 + 2 ))\nif [ \"$actual_length\" -eq 5 ]; then\n    echo \"true\"\nelse\n    echo
        \"false\"\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"expected_length":5,"arr1":["hello","world","test"],"arr2":["foo","bar"]},"jobId":"11775616","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:42.145Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayConcat/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayConcat"}],"ArrayOperations.FileArrayOps":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/execution/stdout","backendStatus":"Done","commandLine":"#
        Test file localization by reading contents\nfor file in /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/inputs/1330878614/test1.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/inputs/1330878614/test2.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/inputs/1330878614/test3.txt;
        do\n    if [ -f \"$file\" ]; then\n        cat \"$file\" >> all_contents.txt\n        echo
        \"---\" >> all_contents.txt  # Separator between files\n    else\n        echo
        \"false\" > localization_success.txt\n        exit 1\n    fi\ndone\necho \"true\"
        > localization_success.txt","shardIndex":-1,"outputs":{"localization_success":true,"contents":["Hello...---","...
        is it me you''re ...---","... looking for???---"]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"]},"returnCode":0,"jobId":"11775617","backend":"gizmo","end":"2025-02-27T15:37:20.608Z","start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:43.164Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:37:20.377Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:20.608Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"Pending","endTime":"2025-02-27T15:36:43.164Z"},{"startTime":"2025-02-27T15:36:48.889Z","description":"RunningJob","endTime":"2025-02-27T15:37:20.377Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.889Z"}]}],"ArrayOperations.ArrayFunctions":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayFunctions/execution/stdout","backendStatus":"Done","commandLine":"#
        Sort the input array using bash\necho \"hello\nworld\ntest\" | sort > sorted.txt\n\n#
        Get array length\necho \"3\" > length.txt\n\n# Process nested arrays (flatten
        them)\necho \"nested1\nnested2\nnested3\nnested4\" > flattened.txt","shardIndex":-1,"outputs":{"arr_length":3,"sorted":["hello","test","world"],"flattened":["nested1","nested2","nested3","nested4"],"processed_nested":[["nested1","nested2"],["nested3","nested4"]]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"],"nested":[["nested1","nested2"],["nested3","nested4"]]},"returnCode":0,"jobId":"11775621","backend":"gizmo","end":"2025-02-27T15:37:20.607Z","start":"2025-02-27T15:36:41.127Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayFunctions/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayFunctions","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:48.874Z","description":"RunningJob","endTime":"2025-02-27T15:37:20.537Z"},{"startTime":"2025-02-27T15:36:41.127Z","description":"Pending","endTime":"2025-02-27T15:36:41.127Z"},{"startTime":"2025-02-27T15:36:41.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.853Z"},{"startTime":"2025-02-27T15:36:48.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.874Z"},{"startTime":"2025-02-27T15:37:20.537Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:20.608Z"}]}],"ArrayOperations.IntegerArrayOps":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-IntegerArrayOps/execution/stdout","backendStatus":"Done","commandLine":"        #
        Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in 1 2 3 4 5; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\" > combined.txt","shardIndex":-1,"outputs":{"sum":15,"combined":[1,2,3,4,5,6,7,8,9,10]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"additional_numbers":[6,7,8,9,10],"numbers":[1,2,3,4,5]},"returnCode":0,"jobId":"11775619","backend":"gizmo","end":"2025-02-27T15:37:21.601Z","start":"2025-02-27T15:36:42.144Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-IntegerArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-IntegerArrayOps","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:48.871Z","description":"RunningJob","endTime":"2025-02-27T15:37:21.495Z"},{"startTime":"2025-02-27T15:36:42.144Z","description":"Pending","endTime":"2025-02-27T15:36:42.145Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.871Z"},{"startTime":"2025-02-27T15:36:42.145Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:37:21.495Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:21.601Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"}]}],"ArrayOperations.ValidateIndex":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ValidateIndex/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"0\" > first_index.txt  # First index\necho \"2\" > last_index.txt  # Last
        index","shardIndex":-1,"outputs":{"last_index":2,"first_index":0},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"]},"returnCode":0,"jobId":"11775620","backend":"gizmo","end":"2025-02-27T15:37:20.608Z","start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ValidateIndex/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ValidateIndex","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:37:19.706Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:20.608Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"Pending","endTime":"2025-02-27T15:36:43.164Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.877Z","description":"RunningJob","endTime":"2025-02-27T15:37:19.706Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.877Z"}]}],"ArrayOperations.Uppercase":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"hello\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"hello"},"jobId":"11775615","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-0"},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"world\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":1,"outputs":{"out":"WORLD"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"world"},"returnCode":0,"jobId":"11775618","backend":"gizmo","end":"2025-02-27T15:37:19.579Z","start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:48.881Z","description":"RunningJob","endTime":"2025-02-27T15:37:19.072Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.881Z"},{"startTime":"2025-02-27T15:37:19.072Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:19.579Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"Pending","endTime":"2025-02-27T15:36:43.164Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"}]},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"test\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"test"},"jobId":"11775614","backend":"gizmo","attempt":1,"start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:38.983Z","id":"9f62a4cf-e243-4b41-b87e-e7b5a1cc853b","inputs":{"input_files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"],"additional_strings":["foo","bar"],"numbers":[1,2,3,4,5],"strings":["hello","world","test"],"nested_arrays":[["nested1","nested2"],["nested3","nested4"]]},"labels":{"cromwell-workflow-id":"cromwell-9f62a4cf-e243-4b41-b87e-e7b5a1cc853b"},"submission":"2025-02-27T15:35:02.630Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:37:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '22119'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"ArrayOperations","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:38.983Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow ArrayOperations {\n    input {\n        # Input arrays for
        different tests\n        Array[String] strings\n        Array[String] additional_strings
        = []  # For testing array concatenation\n        Array[Array[String]] nested_arrays
        = []  # For testing nested arrays\n        Array[Int] numbers = [1, 2, 3,
        4, 5]  # Default integer array for numeric operations\n        Array[File]
        input_files = [] # Array of files to test file operations\n    }\n    \n    #
        Scatter operation to test processing of each element in an array\n    # Test
        empty arrays (original operation still works with empty input)\n    scatter
        (str in strings) {\n        call Uppercase { input: text = str }\n    }\n    \n    #
        Test array indexing (accessing first and last elements)\n    if (length(strings)
        > 0) {\n        call ValidateIndex { input: arr = strings }\n    }\n    \n    #
        Test array functions like sorting, length calculation, and flattening\n    call
        ArrayFunctions { \n        input: \n            arr = strings,\n            nested
        = nested_arrays\n    }\n    \n    # Test array concatenation and verify the
        combined length\n    Array[String] combined = flatten([strings, additional_strings])\n    call
        ArrayConcat {\n        input: \n            arr1 = strings,\n            arr2
        = additional_strings,\n            expected_length = length(combined)\n    }\n    \n    #
        Test integer array operations like summation and combining arrays\n    Array[Int]
        more_numbers = [6, 7, 8, 9, 10]  # Intermediate array declaration\n    call
        IntegerArrayOps {\n        input:\n            numbers = numbers,\n            additional_numbers
        = more_numbers\n    }\n\n    # Test file array operations like localization
        and content reading\n    if (length(input_files) > 0) {\n        call FileArrayOps
        {\n            input:\n                files = input_files\n        }\n    }\n    #
        Outputs to capture results of the tests\n    output {\n        Array[String]
        uppercased = Uppercase.out # Outputs from scatter task\n        Int? first_index
        = ValidateIndex.first_index # First index in string array\n        Int? last_index
        = ValidateIndex.last_index # Last index in string array\n        Array[String]
        sorted_array = ArrayFunctions.sorted # Sorted array\n        Array[Array[String]]
        processed_nested = ArrayFunctions.processed_nested # Processed nested array\n        Boolean
        concat_test_passed = ArrayConcat.test_passed # Result of concatenation test\n        Int
        array_length = ArrayFunctions.arr_length # Length of input array\n        Array[String]
        flattened = ArrayFunctions.flattened # Flattened nested arrays\n        #
        New outputs for integer array operations \n        Int sum_result = IntegerArrayOps.sum
        # Sum of integer array\n        Array[Int] combined_numbers = IntegerArrayOps.combined
        # Combined integer arrays\n        # New outputs for file array operations\n        Array[String]?
        file_contents = FileArrayOps.contents # Contents of files\n        Boolean?
        files_localized = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{"ArrayOperations.ArrayConcat":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayConcat/execution/stdout","backendStatus":"Done","commandLine":"actual_length=$((
        3 + 2 ))\nif [ \"$actual_length\" -eq 5 ]; then\n    echo \"true\"\nelse\n    echo
        \"false\"\nfi","shardIndex":-1,"outputs":{"test_passed":true},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"expected_length":5,"arr1":["hello","world","test"],"arr2":["foo","bar"]},"returnCode":0,"jobId":"11775616","backend":"gizmo","end":"2025-02-27T15:37:26.569Z","start":"2025-02-27T15:36:42.145Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayConcat/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayConcat","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:42.145Z","description":"Pending","endTime":"2025-02-27T15:36:42.145Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.895Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:37:25.612Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:26.569Z"},{"startTime":"2025-02-27T15:36:48.895Z","description":"RunningJob","endTime":"2025-02-27T15:37:25.612Z"},{"startTime":"2025-02-27T15:36:42.145Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"}]}],"ArrayOperations.FileArrayOps":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/execution/stdout","backendStatus":"Done","commandLine":"#
        Test file localization by reading contents\nfor file in /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/inputs/1330878614/test1.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/inputs/1330878614/test2.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/inputs/1330878614/test3.txt;
        do\n    if [ -f \"$file\" ]; then\n        cat \"$file\" >> all_contents.txt\n        echo
        \"---\" >> all_contents.txt  # Separator between files\n    else\n        echo
        \"false\" > localization_success.txt\n        exit 1\n    fi\ndone\necho \"true\"
        > localization_success.txt","shardIndex":-1,"outputs":{"localization_success":true,"contents":["Hello...---","...
        is it me you''re ...---","... looking for???---"]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"]},"returnCode":0,"jobId":"11775617","backend":"gizmo","end":"2025-02-27T15:37:20.608Z","start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:43.164Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:37:20.377Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:20.608Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"Pending","endTime":"2025-02-27T15:36:43.164Z"},{"startTime":"2025-02-27T15:36:48.889Z","description":"RunningJob","endTime":"2025-02-27T15:37:20.377Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.889Z"}]}],"ArrayOperations.ArrayFunctions":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayFunctions/execution/stdout","backendStatus":"Done","commandLine":"#
        Sort the input array using bash\necho \"hello\nworld\ntest\" | sort > sorted.txt\n\n#
        Get array length\necho \"3\" > length.txt\n\n# Process nested arrays (flatten
        them)\necho \"nested1\nnested2\nnested3\nnested4\" > flattened.txt","shardIndex":-1,"outputs":{"arr_length":3,"sorted":["hello","test","world"],"flattened":["nested1","nested2","nested3","nested4"],"processed_nested":[["nested1","nested2"],["nested3","nested4"]]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"],"nested":[["nested1","nested2"],["nested3","nested4"]]},"returnCode":0,"jobId":"11775621","backend":"gizmo","end":"2025-02-27T15:37:20.607Z","start":"2025-02-27T15:36:41.127Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayFunctions/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayFunctions","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:48.874Z","description":"RunningJob","endTime":"2025-02-27T15:37:20.537Z"},{"startTime":"2025-02-27T15:36:41.127Z","description":"Pending","endTime":"2025-02-27T15:36:41.127Z"},{"startTime":"2025-02-27T15:36:41.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.853Z"},{"startTime":"2025-02-27T15:36:48.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.874Z"},{"startTime":"2025-02-27T15:37:20.537Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:20.608Z"}]}],"ArrayOperations.IntegerArrayOps":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-IntegerArrayOps/execution/stdout","backendStatus":"Done","commandLine":"        #
        Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in 1 2 3 4 5; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\" > combined.txt","shardIndex":-1,"outputs":{"sum":15,"combined":[1,2,3,4,5,6,7,8,9,10]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"additional_numbers":[6,7,8,9,10],"numbers":[1,2,3,4,5]},"returnCode":0,"jobId":"11775619","backend":"gizmo","end":"2025-02-27T15:37:21.601Z","start":"2025-02-27T15:36:42.144Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-IntegerArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-IntegerArrayOps","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:48.871Z","description":"RunningJob","endTime":"2025-02-27T15:37:21.495Z"},{"startTime":"2025-02-27T15:36:42.144Z","description":"Pending","endTime":"2025-02-27T15:36:42.145Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.871Z"},{"startTime":"2025-02-27T15:36:42.145Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:37:21.495Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:21.601Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"}]}],"ArrayOperations.ValidateIndex":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ValidateIndex/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"0\" > first_index.txt  # First index\necho \"2\" > last_index.txt  # Last
        index","shardIndex":-1,"outputs":{"last_index":2,"first_index":0},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"]},"returnCode":0,"jobId":"11775620","backend":"gizmo","end":"2025-02-27T15:37:20.608Z","start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ValidateIndex/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ValidateIndex","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:37:19.706Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:20.608Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"Pending","endTime":"2025-02-27T15:36:43.164Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.877Z","description":"RunningJob","endTime":"2025-02-27T15:37:19.706Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.877Z"}]}],"ArrayOperations.Uppercase":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"hello\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":0,"outputs":{"out":"HELLO"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"hello"},"returnCode":0,"jobId":"11775615","backend":"gizmo","end":"2025-02-27T15:37:27.569Z","start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:27.413Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:27.569Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.866Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"Pending","endTime":"2025-02-27T15:36:43.164Z"},{"startTime":"2025-02-27T15:36:48.866Z","description":"RunningJob","endTime":"2025-02-27T15:37:27.413Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"world\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":1,"outputs":{"out":"WORLD"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"world"},"returnCode":0,"jobId":"11775618","backend":"gizmo","end":"2025-02-27T15:37:19.579Z","start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:48.881Z","description":"RunningJob","endTime":"2025-02-27T15:37:19.072Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.881Z"},{"startTime":"2025-02-27T15:37:19.072Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:19.579Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"Pending","endTime":"2025-02-27T15:36:43.164Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"test\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":2,"outputs":{"out":"TEST"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"test"},"returnCode":0,"jobId":"11775614","backend":"gizmo","end":"2025-02-27T15:37:24.580Z","start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:43.164Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.885Z","description":"RunningJob","endTime":"2025-02-27T15:37:23.743Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.885Z"},{"startTime":"2025-02-27T15:37:23.743Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:24.580Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"Pending","endTime":"2025-02-27T15:36:43.164Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:38.983Z","id":"9f62a4cf-e243-4b41-b87e-e7b5a1cc853b","inputs":{"input_files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"],"additional_strings":["foo","bar"],"numbers":[1,2,3,4,5],"strings":["hello","world","test"],"nested_arrays":[["nested1","nested2"],["nested3","nested4"]]},"labels":{"cromwell-workflow-id":"cromwell-9f62a4cf-e243-4b41-b87e-e7b5a1cc853b"},"submission":"2025-02-27T15:35:02.630Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:37:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '24364'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"ArrayOperations","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:38.983Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:37:30.087Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow ArrayOperations {\n    input {\n        # Input arrays for
        different tests\n        Array[String] strings\n        Array[String] additional_strings
        = []  # For testing array concatenation\n        Array[Array[String]] nested_arrays
        = []  # For testing nested arrays\n        Array[Int] numbers = [1, 2, 3,
        4, 5]  # Default integer array for numeric operations\n        Array[File]
        input_files = [] # Array of files to test file operations\n    }\n    \n    #
        Scatter operation to test processing of each element in an array\n    # Test
        empty arrays (original operation still works with empty input)\n    scatter
        (str in strings) {\n        call Uppercase { input: text = str }\n    }\n    \n    #
        Test array indexing (accessing first and last elements)\n    if (length(strings)
        > 0) {\n        call ValidateIndex { input: arr = strings }\n    }\n    \n    #
        Test array functions like sorting, length calculation, and flattening\n    call
        ArrayFunctions { \n        input: \n            arr = strings,\n            nested
        = nested_arrays\n    }\n    \n    # Test array concatenation and verify the
        combined length\n    Array[String] combined = flatten([strings, additional_strings])\n    call
        ArrayConcat {\n        input: \n            arr1 = strings,\n            arr2
        = additional_strings,\n            expected_length = length(combined)\n    }\n    \n    #
        Test integer array operations like summation and combining arrays\n    Array[Int]
        more_numbers = [6, 7, 8, 9, 10]  # Intermediate array declaration\n    call
        IntegerArrayOps {\n        input:\n            numbers = numbers,\n            additional_numbers
        = more_numbers\n    }\n\n    # Test file array operations like localization
        and content reading\n    if (length(input_files) > 0) {\n        call FileArrayOps
        {\n            input:\n                files = input_files\n        }\n    }\n    #
        Outputs to capture results of the tests\n    output {\n        Array[String]
        uppercased = Uppercase.out # Outputs from scatter task\n        Int? first_index
        = ValidateIndex.first_index # First index in string array\n        Int? last_index
        = ValidateIndex.last_index # Last index in string array\n        Array[String]
        sorted_array = ArrayFunctions.sorted # Sorted array\n        Array[Array[String]]
        processed_nested = ArrayFunctions.processed_nested # Processed nested array\n        Boolean
        concat_test_passed = ArrayConcat.test_passed # Result of concatenation test\n        Int
        array_length = ArrayFunctions.arr_length # Length of input array\n        Array[String]
        flattened = ArrayFunctions.flattened # Flattened nested arrays\n        #
        New outputs for integer array operations \n        Int sum_result = IntegerArrayOps.sum
        # Sum of integer array\n        Array[Int] combined_numbers = IntegerArrayOps.combined
        # Combined integer arrays\n        # New outputs for file array operations\n        Array[String]?
        file_contents = FileArrayOps.contents # Contents of files\n        Boolean?
        files_localized = FileArrayOps.localization_success # File localization status\n    }\n\n    parameter_meta
        {\n        # Descriptions for inputs\n        strings: \"Primary array of
        input strings\"\n        additional_strings: \"Secondary array for testing
        concatenation\"\n        nested_arrays: \"Array of arrays for testing nested
        array operations\"\n        numbers: \"Array of integers for testing numeric
        operations\"\n        input_files: \"Array of input files for testing file
        localization\"\n    }\n}\n\n# Task to convert string to uppercase (tests per-element
        processing)\ntask Uppercase {\n    input {\n        String text\n    }\n    \n    command
        <<<\n        echo \"~{text}\" | tr ''[:lower:]'' ''[:upper:]''\n    >>>\n    \n    output
        {\n        String out = read_string(stdout())\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n\n# Task to test indexing operations\ntask
        ValidateIndex {\n    input {\n        Array[String] arr\n    }\n    \n    command
        <<<\n        echo \"0\" > first_index.txt  # First index\n        echo \"~{length(arr)-1}\"
        > last_index.txt  # Last index\n    >>>\n    \n    output {\n        Int first_index
        = read_int(\"first_index.txt\")\n        Int last_index = read_int(\"last_index.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test array
        functions\ntask ArrayFunctions {\n    input {\n        Array[String] arr\n        Array[Array[String]]
        nested\n    }\n    \n    command <<<\n        # Sort the input array using
        bash\n        echo \"~{sep=''\\n'' arr}\" | sort > sorted.txt\n        \n        #
        Get array length\n        echo \"~{length(arr)}\" > length.txt\n        \n        #
        Process nested arrays (flatten them)\n        echo \"~{sep=''\\n'' flatten(nested)}\"
        > flattened.txt\n    >>>\n    \n    output {\n        Array[String] sorted
        = read_lines(\"sorted.txt\")\n        Int arr_length = read_int(\"length.txt\")\n        Array[String]
        flattened = read_lines(\"flattened.txt\")\n        Array[Array[String]] processed_nested
        = nested  # Return the original nested array\n    }\n    \n    runtime {\n        cpu:
        1\n        memory: \"1 GB\"\n    }\n}\n\n# Task to test concatenation of two
        arrays\ntask ArrayConcat {\n    input {\n        Array[String] arr1\n        Array[String]
        arr2\n        Int expected_length\n    }\n    \n    command <<<\n        actual_length=$((
        ~{length(arr1)} + ~{length(arr2)} ))\n        if [ \"$actual_length\" -eq
        ~{expected_length} ]; then\n            echo \"true\"\n        else\n            echo
        \"false\"\n        fi\n    >>>\n    \n    output {\n        Boolean test_passed
        = read_boolean(stdout())\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test integer array operations\ntask IntegerArrayOps
        {\n    input {\n        Array[Int] numbers\n        Array[Int] additional_numbers\n    }\n    \n    command
        <<<\n        # Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in ~{sep='' '' numbers}; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"~{sep=''\\n'' flatten([numbers, additional_numbers])}\" > combined.txt\n    >>>\n    \n    output
        {\n        Int sum = read_int(\"sum.txt\")\n        Array[Int] combined =
        read_lines(\"combined.txt\")\n    }\n    \n    runtime {\n        cpu: 1\n        memory:
        \"1 GB\"\n    }\n}\n\n# Task to test file array operations\ntask FileArrayOps
        {\n    input {\n        Array[File] files\n    }\n    \n    command <<<\n        #
        Test file localization by reading contents\n        for file in ~{sep='' ''
        files}; do\n            if [ -f \"$file\" ]; then\n                cat \"$file\"
        >> all_contents.txt\n                echo \"---\" >> all_contents.txt  # Separator
        between files\n            else\n                echo \"false\" > localization_success.txt\n                exit
        1\n            fi\n        done\n        echo \"true\" > localization_success.txt\n    >>>\n    \n    output
        {\n        Array[String] contents = read_lines(\"all_contents.txt\")\n        Boolean
        localization_success = read_boolean(\"localization_success.txt\")\n    }\n    \n    runtime
        {\n        cpu: 1\n        memory: \"1 GB\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"ArrayOperations.additional_strings\":[\"foo\",\"bar\"],\"ArrayOperations.input_files\":[\"arrayOperations/data/test1.txt\",\"arrayOperations/data/test2.txt\",\"arrayOperations/data/test3.txt\"],\"ArrayOperations.nested_arrays\":[[\"nested1\",\"nested2\"],[\"nested3\",\"nested4\"]],\"ArrayOperations.numbers\":[1,2,3,4,5],\"ArrayOperations.strings\":[\"hello\",\"world\",\"test\"]}","workflowUrl":"","labels":"{}"},"calls":{"ArrayOperations.ArrayConcat":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayConcat/execution/stdout","backendStatus":"Done","commandLine":"actual_length=$((
        3 + 2 ))\nif [ \"$actual_length\" -eq 5 ]; then\n    echo \"true\"\nelse\n    echo
        \"false\"\nfi","shardIndex":-1,"outputs":{"test_passed":true},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"expected_length":5,"arr1":["hello","world","test"],"arr2":["foo","bar"]},"returnCode":0,"jobId":"11775616","backend":"gizmo","end":"2025-02-27T15:37:26.569Z","start":"2025-02-27T15:36:42.145Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayConcat/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayConcat","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:42.145Z","description":"Pending","endTime":"2025-02-27T15:36:42.145Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.895Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:37:25.612Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:26.569Z"},{"startTime":"2025-02-27T15:36:48.895Z","description":"RunningJob","endTime":"2025-02-27T15:37:25.612Z"},{"startTime":"2025-02-27T15:36:42.145Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"}]}],"ArrayOperations.FileArrayOps":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/execution/stdout","backendStatus":"Done","commandLine":"#
        Test file localization by reading contents\nfor file in /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/inputs/1330878614/test1.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/inputs/1330878614/test2.txt
        /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/inputs/1330878614/test3.txt;
        do\n    if [ -f \"$file\" ]; then\n        cat \"$file\" >> all_contents.txt\n        echo
        \"---\" >> all_contents.txt  # Separator between files\n    else\n        echo
        \"false\" > localization_success.txt\n        exit 1\n    fi\ndone\necho \"true\"
        > localization_success.txt","shardIndex":-1,"outputs":{"localization_success":true,"contents":["Hello...---","...
        is it me you''re ...---","... looking for???---"]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"]},"returnCode":0,"jobId":"11775617","backend":"gizmo","end":"2025-02-27T15:37:20.608Z","start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-FileArrayOps","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:43.164Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:37:20.377Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:20.608Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"Pending","endTime":"2025-02-27T15:36:43.164Z"},{"startTime":"2025-02-27T15:36:48.889Z","description":"RunningJob","endTime":"2025-02-27T15:37:20.377Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.889Z"}]}],"ArrayOperations.ArrayFunctions":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayFunctions/execution/stdout","backendStatus":"Done","commandLine":"#
        Sort the input array using bash\necho \"hello\nworld\ntest\" | sort > sorted.txt\n\n#
        Get array length\necho \"3\" > length.txt\n\n# Process nested arrays (flatten
        them)\necho \"nested1\nnested2\nnested3\nnested4\" > flattened.txt","shardIndex":-1,"outputs":{"arr_length":3,"sorted":["hello","test","world"],"flattened":["nested1","nested2","nested3","nested4"],"processed_nested":[["nested1","nested2"],["nested3","nested4"]]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"],"nested":[["nested1","nested2"],["nested3","nested4"]]},"returnCode":0,"jobId":"11775621","backend":"gizmo","end":"2025-02-27T15:37:20.607Z","start":"2025-02-27T15:36:41.127Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayFunctions/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ArrayFunctions","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:48.874Z","description":"RunningJob","endTime":"2025-02-27T15:37:20.537Z"},{"startTime":"2025-02-27T15:36:41.127Z","description":"Pending","endTime":"2025-02-27T15:36:41.127Z"},{"startTime":"2025-02-27T15:36:41.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.853Z"},{"startTime":"2025-02-27T15:36:48.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.874Z"},{"startTime":"2025-02-27T15:37:20.537Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:20.608Z"}]}],"ArrayOperations.IntegerArrayOps":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-IntegerArrayOps/execution/stdout","backendStatus":"Done","commandLine":"        #
        Calculate sum of numbers to verify proper parsing\n        total=0\n        for
        num in 1 2 3 4 5; do\n            total=$((total + num))\n        done\n        echo
        $total > sum.txt\n\n        # Combine arrays and write to file\n        echo
        \"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\" > combined.txt","shardIndex":-1,"outputs":{"sum":15,"combined":[1,2,3,4,5,6,7,8,9,10]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"additional_numbers":[6,7,8,9,10],"numbers":[1,2,3,4,5]},"returnCode":0,"jobId":"11775619","backend":"gizmo","end":"2025-02-27T15:37:21.601Z","start":"2025-02-27T15:36:42.144Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-IntegerArrayOps/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-IntegerArrayOps","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:48.871Z","description":"RunningJob","endTime":"2025-02-27T15:37:21.495Z"},{"startTime":"2025-02-27T15:36:42.144Z","description":"Pending","endTime":"2025-02-27T15:36:42.145Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.871Z"},{"startTime":"2025-02-27T15:36:42.145Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:37:21.495Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:21.601Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"}]}],"ArrayOperations.ValidateIndex":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ValidateIndex/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"0\" > first_index.txt  # First index\necho \"2\" > last_index.txt  # Last
        index","shardIndex":-1,"outputs":{"last_index":2,"first_index":0},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"arr":["hello","world","test"]},"returnCode":0,"jobId":"11775620","backend":"gizmo","end":"2025-02-27T15:37:20.608Z","start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ValidateIndex/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-ValidateIndex","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:37:19.706Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:20.608Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"Pending","endTime":"2025-02-27T15:36:43.164Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.877Z","description":"RunningJob","endTime":"2025-02-27T15:37:19.706Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.877Z"}]}],"ArrayOperations.Uppercase":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"hello\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":0,"outputs":{"out":"HELLO"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"hello"},"returnCode":0,"jobId":"11775615","backend":"gizmo","end":"2025-02-27T15:37:27.569Z","start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:27.413Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:27.569Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.866Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"Pending","endTime":"2025-02-27T15:36:43.164Z"},{"startTime":"2025-02-27T15:36:48.866Z","description":"RunningJob","endTime":"2025-02-27T15:37:27.413Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"world\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":1,"outputs":{"out":"WORLD"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"world"},"returnCode":0,"jobId":"11775618","backend":"gizmo","end":"2025-02-27T15:37:19.579Z","start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:48.881Z","description":"RunningJob","endTime":"2025-02-27T15:37:19.072Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.881Z"},{"startTime":"2025-02-27T15:37:19.072Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:19.579Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"Pending","endTime":"2025-02-27T15:36:43.164Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"test\" | tr ''[:lower:]'' ''[:upper:]''","shardIndex":2,"outputs":{"out":"TEST"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"text":"test"},"returnCode":0,"jobId":"11775614","backend":"gizmo","end":"2025-02-27T15:37:24.580Z","start":"2025-02-27T15:36:43.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b/call-Uppercase/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:43.164Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.885Z","description":"RunningJob","endTime":"2025-02-27T15:37:23.743Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:48.854Z"},{"startTime":"2025-02-27T15:36:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:48.885Z"},{"startTime":"2025-02-27T15:37:23.743Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:24.580Z"},{"startTime":"2025-02-27T15:36:43.164Z","description":"Pending","endTime":"2025-02-27T15:36:43.164Z"}]}]},"outputs":{"ArrayOperations.first_index":0,"ArrayOperations.processed_nested":[["nested1","nested2"],["nested3","nested4"]],"ArrayOperations.uppercased":["HELLO","WORLD","TEST"],"ArrayOperations.files_localized":true,"ArrayOperations.concat_test_passed":true,"ArrayOperations.last_index":2,"ArrayOperations.file_contents":["Hello...---","...
        is it me you''re ...---","... looking for???---"],"ArrayOperations.flattened":["nested1","nested2","nested3","nested4"],"ArrayOperations.sorted_array":["hello","test","world"],"ArrayOperations.combined_numbers":[1,2,3,4,5,6,7,8,9,10],"ArrayOperations.array_length":3,"ArrayOperations.sum_result":15},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/ArrayOperations/9f62a4cf-e243-4b41-b87e-e7b5a1cc853b","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-27T15:37:30.087Z","start":"2025-02-27T15:36:38.983Z","id":"9f62a4cf-e243-4b41-b87e-e7b5a1cc853b","inputs":{"input_files":["arrayOperations/data/test1.txt","arrayOperations/data/test2.txt","arrayOperations/data/test3.txt"],"additional_strings":["foo","bar"],"numbers":[1,2,3,4,5],"strings":["hello","world","test"],"nested_arrays":[["nested1","nested2"],["nested3","nested4"]]},"labels":{"cromwell-workflow-id":"cromwell-9f62a4cf-e243-4b41-b87e-e7b5a1cc853b"},"submission":"2025-02-27T15:35:02.630Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:37:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '25146'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:59.003Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_nested_map":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"jobId":"11775640","backend":"gizmo","attempt":1,"start":"2025-02-27T15:37:03.127Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"jobId":"11775638","backend":"gizmo","attempt":1,"start":"2025-02-27T15:37:03.127Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1"}],"enhanced_map_test.process_sample":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"jobId":"11775636","backend":"gizmo","attempt":1,"start":"2025-02-27T15:37:03.127Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"jobId":"11775637","backend":"gizmo","attempt":1,"start":"2025-02-27T15:37:03.127Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"jobId":"11775639","backend":"gizmo","attempt":1,"start":"2025-02-27T15:37:03.127Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:59.003Z","id":"ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-ca9b4ed0-980e-417e-9da4-9b6eda72fe3f"},"submission":"2025-02-27T15:35:02.688Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:37:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11076'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:59.003Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"11775640","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:42.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:42.293Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:42.569Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.868Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:08.868Z","description":"RunningJob","endTime":"2025-02-27T15:37:42.293Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"jobId":"11775638","backend":"gizmo","attempt":1,"start":"2025-02-27T15:37:03.127Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1"}],"enhanced_map_test.process_sample":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"jobId":"11775636","backend":"gizmo","attempt":1,"start":"2025-02-27T15:37:03.127Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"jobId":"11775637","backend":"gizmo","attempt":1,"start":"2025-02-27T15:37:03.127Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1"},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"11775639","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:40.580Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.872Z","description":"RunningJob","endTime":"2025-02-27T15:37:40.475Z"},{"startTime":"2025-02-27T15:37:40.475Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:40.580Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.872Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:59.003Z","id":"ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-ca9b4ed0-980e-417e-9da4-9b6eda72fe3f"},"submission":"2025-02-27T15:35:02.688Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:37:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:59.003Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"11775636","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:45.373Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.877Z","description":"RunningJob","endTime":"2025-02-27T15:37:45.373Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.877Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"11775637","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:44.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.882Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:43.964Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:44.570Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.882Z","description":"RunningJob","endTime":"2025-02-27T15:37:43.964Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"11775639","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:40.580Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.872Z","description":"RunningJob","endTime":"2025-02-27T15:37:40.475Z"},{"startTime":"2025-02-27T15:37:40.475Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:40.580Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.872Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"11775640","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:42.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:42.293Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:42.569Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.868Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:08.868Z","description":"RunningJob","endTime":"2025-02-27T15:37:42.293Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"11775638","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.880Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.880Z","description":"RunningJob","endTime":"2025-02-27T15:37:44.753Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:44.753Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-02-27T15:37:48.004Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:59.003Z","id":"ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-ca9b4ed0-980e-417e-9da4-9b6eda72fe3f"},"submission":"2025-02-27T15:35:02.688Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:37:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '15774'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:59.003Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"11775636","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:45.373Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.877Z","description":"RunningJob","endTime":"2025-02-27T15:37:45.373Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.877Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"11775637","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:44.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.882Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:43.964Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:44.570Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.882Z","description":"RunningJob","endTime":"2025-02-27T15:37:43.964Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"11775639","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:40.580Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.872Z","description":"RunningJob","endTime":"2025-02-27T15:37:40.475Z"},{"startTime":"2025-02-27T15:37:40.475Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:40.580Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.872Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"11775640","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:42.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:42.293Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:42.569Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.868Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:08.868Z","description":"RunningJob","endTime":"2025-02-27T15:37:42.293Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"11775638","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.880Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.880Z","description":"RunningJob","endTime":"2025-02-27T15:37:44.753Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:44.753Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map/execution/stdout","commandLine":"python
        <<CODE\nsamples = ''sample1,sample2,sample3''.split('','')\nmessages = ''Processing
        sample1 (normal) with read length 100,Processing sample2 (tumor) with read
        length 150,Processing sample3 (normal) with read length 100''.split('','')\nresult
        = dict(zip(samples, messages))\nwith open(''output.txt'', ''w'') as f:\n    for
        sample, message in result.items():\n        f.write(f\"{sample}\\t{message}\\n\")\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"python:3.8-slim","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_names":["sample1","sample2","sample3"],"processing_messages":["Processing
        sample1 (normal) with read length 100","Processing sample2 (tumor) with read
        length 150","Processing sample3 (normal) with read length 100"]},"backend":"gizmo","attempt":1,"start":"2025-02-27T15:37:48.004Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:59.003Z","id":"ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-ca9b4ed0-980e-417e-9da4-9b6eda72fe3f"},"submission":"2025-02-27T15:35:02.688Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:37:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '17165'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:59.003Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"11775636","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:45.373Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.877Z","description":"RunningJob","endTime":"2025-02-27T15:37:45.373Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.877Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"11775637","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:44.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.882Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:43.964Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:44.570Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.882Z","description":"RunningJob","endTime":"2025-02-27T15:37:43.964Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"11775639","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:40.580Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.872Z","description":"RunningJob","endTime":"2025-02-27T15:37:40.475Z"},{"startTime":"2025-02-27T15:37:40.475Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:40.580Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.872Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"11775640","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:42.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:42.293Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:42.569Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.868Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:08.868Z","description":"RunningJob","endTime":"2025-02-27T15:37:42.293Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"11775638","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.880Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.880Z","description":"RunningJob","endTime":"2025-02-27T15:37:44.753Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:44.753Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map/execution/stdout","backendStatus":"Running","commandLine":"python
        <<CODE\nsamples = ''sample1,sample2,sample3''.split('','')\nmessages = ''Processing
        sample1 (normal) with read length 100,Processing sample2 (tumor) with read
        length 150,Processing sample3 (normal) with read length 100''.split('','')\nresult
        = dict(zip(samples, messages))\nwith open(''output.txt'', ''w'') as f:\n    for
        sample, message in result.items():\n        f.write(f\"{sample}\\t{message}\\n\")\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"python:3.8-slim","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_names":["sample1","sample2","sample3"],"processing_messages":["Processing
        sample1 (normal) with read length 100","Processing sample2 (tumor) with read
        length 150","Processing sample3 (normal) with read length 100"]},"jobId":"11775672","backend":"gizmo","attempt":1,"start":"2025-02-27T15:37:48.004Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:59.003Z","id":"ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-ca9b4ed0-980e-417e-9da4-9b6eda72fe3f"},"submission":"2025-02-27T15:35:02.688Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:38:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '17210'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:59.003Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"11775636","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:45.373Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.877Z","description":"RunningJob","endTime":"2025-02-27T15:37:45.373Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.877Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"11775637","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:44.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.882Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:43.964Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:44.570Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.882Z","description":"RunningJob","endTime":"2025-02-27T15:37:43.964Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"11775639","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:40.580Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.872Z","description":"RunningJob","endTime":"2025-02-27T15:37:40.475Z"},{"startTime":"2025-02-27T15:37:40.475Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:40.580Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.872Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"11775640","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:42.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:42.293Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:42.569Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.868Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:08.868Z","description":"RunningJob","endTime":"2025-02-27T15:37:42.293Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"11775638","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.880Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.880Z","description":"RunningJob","endTime":"2025-02-27T15:37:44.753Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:44.753Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map/execution/stdout","backendStatus":"Running","commandLine":"python
        <<CODE\nsamples = ''sample1,sample2,sample3''.split('','')\nmessages = ''Processing
        sample1 (normal) with read length 100,Processing sample2 (tumor) with read
        length 150,Processing sample3 (normal) with read length 100''.split('','')\nresult
        = dict(zip(samples, messages))\nwith open(''output.txt'', ''w'') as f:\n    for
        sample, message in result.items():\n        f.write(f\"{sample}\\t{message}\\n\")\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"python:3.8-slim","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_names":["sample1","sample2","sample3"],"processing_messages":["Processing
        sample1 (normal) with read length 100","Processing sample2 (tumor) with read
        length 150","Processing sample3 (normal) with read length 100"]},"jobId":"11775672","backend":"gizmo","attempt":1,"start":"2025-02-27T15:37:48.004Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:59.003Z","id":"ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-ca9b4ed0-980e-417e-9da4-9b6eda72fe3f"},"submission":"2025-02-27T15:35:02.688Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:38:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '17210'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:59.003Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"11775636","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:45.373Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.877Z","description":"RunningJob","endTime":"2025-02-27T15:37:45.373Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.877Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"11775637","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:44.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.882Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:43.964Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:44.570Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.882Z","description":"RunningJob","endTime":"2025-02-27T15:37:43.964Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"11775639","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:40.580Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.872Z","description":"RunningJob","endTime":"2025-02-27T15:37:40.475Z"},{"startTime":"2025-02-27T15:37:40.475Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:40.580Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.872Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"11775640","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:42.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:42.293Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:42.569Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.868Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:08.868Z","description":"RunningJob","endTime":"2025-02-27T15:37:42.293Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"11775638","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.880Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.880Z","description":"RunningJob","endTime":"2025-02-27T15:37:44.753Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:44.753Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map/execution/stdout","backendStatus":"Running","commandLine":"python
        <<CODE\nsamples = ''sample1,sample2,sample3''.split('','')\nmessages = ''Processing
        sample1 (normal) with read length 100,Processing sample2 (tumor) with read
        length 150,Processing sample3 (normal) with read length 100''.split('','')\nresult
        = dict(zip(samples, messages))\nwith open(''output.txt'', ''w'') as f:\n    for
        sample, message in result.items():\n        f.write(f\"{sample}\\t{message}\\n\")\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"python:3.8-slim","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_names":["sample1","sample2","sample3"],"processing_messages":["Processing
        sample1 (normal) with read length 100","Processing sample2 (tumor) with read
        length 150","Processing sample3 (normal) with read length 100"]},"jobId":"11775672","backend":"gizmo","attempt":1,"start":"2025-02-27T15:37:48.004Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:59.003Z","id":"ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-ca9b4ed0-980e-417e-9da4-9b6eda72fe3f"},"submission":"2025-02-27T15:35:02.688Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:38:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '17210'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:59.003Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"11775636","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:45.373Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.877Z","description":"RunningJob","endTime":"2025-02-27T15:37:45.373Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.877Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"11775637","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:44.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.882Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:43.964Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:44.570Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.882Z","description":"RunningJob","endTime":"2025-02-27T15:37:43.964Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"11775639","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:40.580Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.872Z","description":"RunningJob","endTime":"2025-02-27T15:37:40.475Z"},{"startTime":"2025-02-27T15:37:40.475Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:40.580Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.872Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"11775640","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:42.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:42.293Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:42.569Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.868Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:08.868Z","description":"RunningJob","endTime":"2025-02-27T15:37:42.293Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"11775638","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.880Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.880Z","description":"RunningJob","endTime":"2025-02-27T15:37:44.753Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:44.753Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map/execution/stdout","backendStatus":"Running","commandLine":"python
        <<CODE\nsamples = ''sample1,sample2,sample3''.split('','')\nmessages = ''Processing
        sample1 (normal) with read length 100,Processing sample2 (tumor) with read
        length 150,Processing sample3 (normal) with read length 100''.split('','')\nresult
        = dict(zip(samples, messages))\nwith open(''output.txt'', ''w'') as f:\n    for
        sample, message in result.items():\n        f.write(f\"{sample}\\t{message}\\n\")\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"python:3.8-slim","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_names":["sample1","sample2","sample3"],"processing_messages":["Processing
        sample1 (normal) with read length 100","Processing sample2 (tumor) with read
        length 150","Processing sample3 (normal) with read length 100"]},"jobId":"11775672","backend":"gizmo","attempt":1,"start":"2025-02-27T15:37:48.004Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:59.003Z","id":"ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-ca9b4ed0-980e-417e-9da4-9b6eda72fe3f"},"submission":"2025-02-27T15:35:02.688Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:38:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '17210'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:59.003Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"11775636","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:45.373Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.877Z","description":"RunningJob","endTime":"2025-02-27T15:37:45.373Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.877Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"11775637","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:44.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.882Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:43.964Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:44.570Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.882Z","description":"RunningJob","endTime":"2025-02-27T15:37:43.964Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"11775639","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:40.580Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.872Z","description":"RunningJob","endTime":"2025-02-27T15:37:40.475Z"},{"startTime":"2025-02-27T15:37:40.475Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:40.580Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.872Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"11775640","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:42.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:42.293Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:42.569Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.868Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:08.868Z","description":"RunningJob","endTime":"2025-02-27T15:37:42.293Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"11775638","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.880Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.880Z","description":"RunningJob","endTime":"2025-02-27T15:37:44.753Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:44.753Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map/execution/stdout","backendStatus":"Running","commandLine":"python
        <<CODE\nsamples = ''sample1,sample2,sample3''.split('','')\nmessages = ''Processing
        sample1 (normal) with read length 100,Processing sample2 (tumor) with read
        length 150,Processing sample3 (normal) with read length 100''.split('','')\nresult
        = dict(zip(samples, messages))\nwith open(''output.txt'', ''w'') as f:\n    for
        sample, message in result.items():\n        f.write(f\"{sample}\\t{message}\\n\")\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"python:3.8-slim","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_names":["sample1","sample2","sample3"],"processing_messages":["Processing
        sample1 (normal) with read length 100","Processing sample2 (tumor) with read
        length 150","Processing sample3 (normal) with read length 100"]},"jobId":"11775672","backend":"gizmo","attempt":1,"start":"2025-02-27T15:37:48.004Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:59.003Z","id":"ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-ca9b4ed0-980e-417e-9da4-9b6eda72fe3f"},"submission":"2025-02-27T15:35:02.688Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:38:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '17210'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:59.003Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"11775636","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:45.373Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.877Z","description":"RunningJob","endTime":"2025-02-27T15:37:45.373Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.877Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"11775637","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:44.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.882Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:43.964Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:44.570Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.882Z","description":"RunningJob","endTime":"2025-02-27T15:37:43.964Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"11775639","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:40.580Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.872Z","description":"RunningJob","endTime":"2025-02-27T15:37:40.475Z"},{"startTime":"2025-02-27T15:37:40.475Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:40.580Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.872Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"11775640","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:42.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:42.293Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:42.569Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.868Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:08.868Z","description":"RunningJob","endTime":"2025-02-27T15:37:42.293Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"11775638","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.880Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.880Z","description":"RunningJob","endTime":"2025-02-27T15:37:44.753Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:44.753Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map/execution/stdout","backendStatus":"Done","commandLine":"python
        <<CODE\nsamples = ''sample1,sample2,sample3''.split('','')\nmessages = ''Processing
        sample1 (normal) with read length 100,Processing sample2 (tumor) with read
        length 150,Processing sample3 (normal) with read length 100''.split('','')\nresult
        = dict(zip(samples, messages))\nwith open(''output.txt'', ''w'') as f:\n    for
        sample, message in result.items():\n        f.write(f\"{sample}\\t{message}\\n\")\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"python:3.8-slim","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_names":["sample1","sample2","sample3"],"processing_messages":["Processing
        sample1 (normal) with read length 100","Processing sample2 (tumor) with read
        length 150","Processing sample3 (normal) with read length 100"]},"jobId":"11775672","backend":"gizmo","dockerImageUsed":"python@sha256:1d52838af602b4b5a831beb13a0e4d073280665ea7be7f69ce2382f29c5a613f","attempt":1,"start":"2025-02-27T15:37:48.004Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:36:59.003Z","id":"ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-ca9b4ed0-980e-417e-9da4-9b6eda72fe3f"},"submission":"2025-02-27T15:35:02.688Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:38:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '17306'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:36:59.003Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:38:24.726Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"11775636","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:45.373Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.877Z","description":"RunningJob","endTime":"2025-02-27T15:37:45.373Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.877Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"11775637","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:44.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.882Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:43.964Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:44.570Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.882Z","description":"RunningJob","endTime":"2025-02-27T15:37:43.964Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"11775639","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:40.580Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.872Z","description":"RunningJob","endTime":"2025-02-27T15:37:40.475Z"},{"startTime":"2025-02-27T15:37:40.475Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:40.580Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.872Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"11775640","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:42.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:42.293Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:42.569Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.868Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:08.868Z","description":"RunningJob","endTime":"2025-02-27T15:37:42.293Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"11775638","backend":"gizmo","start":"2025-02-27T15:37:03.127Z","end":"2025-02-27T15:37:45.569Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:08.880Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"Pending","endTime":"2025-02-27T15:37:03.127Z"},{"startTime":"2025-02-27T15:37:08.880Z","description":"RunningJob","endTime":"2025-02-27T15:37:44.753Z"},{"startTime":"2025-02-27T15:37:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:08.854Z"},{"startTime":"2025-02-27T15:37:44.753Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:45.569Z"},{"startTime":"2025-02-27T15:37:03.127Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:08.854Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map/execution/stdout","backendStatus":"Done","commandLine":"python
        <<CODE\nsamples = ''sample1,sample2,sample3''.split('','')\nmessages = ''Processing
        sample1 (normal) with read length 100,Processing sample2 (tumor) with read
        length 150,Processing sample3 (normal) with read length 100''.split('','')\nresult
        = dict(zip(samples, messages))\nwith open(''output.txt'', ''w'') as f:\n    for
        sample, message in result.items():\n        f.write(f\"{sample}\\t{message}\\n\")\nCODE","shardIndex":-1,"outputs":{"output_map":{"sample2":"Processing
        sample2 (tumor) with read length 150","sample1":"Processing sample1 (normal)
        with read length 100","sample3":"Processing sample3 (normal) with read length
        100"}},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"python:3.8-slim","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_names":["sample1","sample2","sample3"],"processing_messages":["Processing
        sample1 (normal) with read length 100","Processing sample2 (tumor) with read
        length 150","Processing sample3 (normal) with read length 100"]},"returnCode":0,"jobId":"11775672","backend":"gizmo","start":"2025-02-27T15:37:48.004Z","end":"2025-02-27T15:38:23.580Z","dockerImageUsed":"python@sha256:1d52838af602b4b5a831beb13a0e4d073280665ea7be7f69ce2382f29c5a613f","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f/call-create_result_map","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:49.486Z"},{"startTime":"2025-02-27T15:37:48.004Z","description":"Pending","endTime":"2025-02-27T15:37:48.004Z"},{"startTime":"2025-02-27T15:38:22.850Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:38:23.580Z"},{"startTime":"2025-02-27T15:37:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:48.854Z"},{"startTime":"2025-02-27T15:37:49.486Z","description":"RunningJob","endTime":"2025-02-27T15:38:22.850Z"},{"startTime":"2025-02-27T15:37:48.004Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:48.854Z"}]}]},"outputs":{"enhanced_map_test.result_map":{"sample2":"Processing
        sample2 (tumor) with read length 150","sample1":"Processing sample1 (normal)
        with read length 100","sample3":"Processing sample3 (normal) with read length
        100"},"enhanced_map_test.nested_map_results":["Processing patient patient1
        with sample type normal\nSample: sample1\nSample: sample2","Processing patient
        patient2 with sample type normal\nSample: sample3\nSample: sample4"]},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/enhanced_map_test/ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-27T15:38:24.726Z","start":"2025-02-27T15:36:59.003Z","id":"ca9b4ed0-980e-417e-9da4-9b6eda72fe3f","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-ca9b4ed0-980e-417e-9da4-9b6eda72fe3f"},"submission":"2025-02-27T15:35:02.688Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:38:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '18824'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/6ad31183-fca5-4c69-bfc4-a196ebe6c901/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"jsonTaskOrderTest","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:37:04.636Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:35:38.923Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow jsonTaskOrderTest {\n  input {\n    String input_json  # JSON
        string used as input for both tasks\n  }\n\n  call Task1 { input: input_json
        = input_json }\n  call Task2 { input: input_json = input_json, previous_output
        = Task1.output_file }\n\n  output {\n    File task1_output = Task1.output_file\n    File
        task2_output = Task2.output_file\n  }\n}\n\ntask Task1 {\n  input {\n    String
        input_json\n  }\n  \n  command <<<\n    echo \"Processing JSON in Task1: ~{input_json}\"
        > task1_output.txt\n    echo \"Task1 completed\" >> task1_output.txt\n  >>>\n  \n  output
        {\n    File output_file = \"task1_output.txt\"\n  }\n  \n  runtime {\n    cpu:
        1\n    memory: \"2G\"\n  }\n}\n\ntask Task2 {\n  input {\n    String input_json\n    File
        previous_output\n  }\n  \n  command <<<\n    echo \"Processing JSON in Task2:
        ~{input_json}\" > task2_output.txt\n    echo \"Task2 completed after Task1\"
        >> task2_output.txt\n    cat ~{previous_output} >> task2_output.txt\n  >>>\n  \n  output
        {\n    File output_file = \"task2_output.txt\"\n  }\n  \n  runtime {\n    cpu:
        1\n    memory: \"2G\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"jsonTaskOrderTest.input_json\":\"I am the text that
        from input.json\"}","workflowUrl":"","labels":"{}"},"calls":{"jsonTaskOrderTest.Task1":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonTaskOrderTest/6ad31183-fca5-4c69-bfc4-a196ebe6c901/call-Task1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing JSON in Task1: I am the text that from input.json\" > task1_output.txt\necho
        \"Task1 completed\" >> task1_output.txt","shardIndex":-1,"outputs":{"output_file":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonTaskOrderTest/6ad31183-fca5-4c69-bfc4-a196ebe6c901/call-Task1/execution/task1_output.txt"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"2
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"input_json":"I
        am the text that from input.json"},"returnCode":0,"jobId":"11775535","backend":"gizmo","end":"2025-02-27T15:36:20.579Z","start":"2025-02-27T15:35:40.995Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonTaskOrderTest/6ad31183-fca5-4c69-bfc4-a196ebe6c901/call-Task1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonTaskOrderTest/6ad31183-fca5-4c69-bfc4-a196ebe6c901/call-Task1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:35:40.996Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:35:48.854Z"},{"startTime":"2025-02-27T15:35:48.862Z","description":"RunningJob","endTime":"2025-02-27T15:36:19.843Z"},{"startTime":"2025-02-27T15:35:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:35:48.862Z"},{"startTime":"2025-02-27T15:36:19.843Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:36:20.579Z"},{"startTime":"2025-02-27T15:35:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:35:48.854Z"},{"startTime":"2025-02-27T15:35:40.995Z","description":"Pending","endTime":"2025-02-27T15:35:40.996Z"}]}],"jsonTaskOrderTest.Task2":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonTaskOrderTest/6ad31183-fca5-4c69-bfc4-a196ebe6c901/call-Task2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing JSON in Task2: I am the text that from input.json\" > task2_output.txt\necho
        \"Task2 completed after Task1\" >> task2_output.txt\ncat /redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonTaskOrderTest/6ad31183-fca5-4c69-bfc4-a196ebe6c901/call-Task2/inputs/-1264164016/task1_output.txt
        >> task2_output.txt","shardIndex":-1,"outputs":{"output_file":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonTaskOrderTest/6ad31183-fca5-4c69-bfc4-a196ebe6c901/call-Task2/execution/task2_output.txt"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"2
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"previous_output":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonTaskOrderTest/6ad31183-fca5-4c69-bfc4-a196ebe6c901/call-Task1/execution/task1_output.txt","input_json":"I
        am the text that from input.json"},"returnCode":0,"jobId":"11775586","backend":"gizmo","end":"2025-02-27T15:37:03.568Z","start":"2025-02-27T15:36:21.794Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonTaskOrderTest/6ad31183-fca5-4c69-bfc4-a196ebe6c901/call-Task2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonTaskOrderTest/6ad31183-fca5-4c69-bfc4-a196ebe6c901/call-Task2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:21.794Z","description":"Pending","endTime":"2025-02-27T15:36:21.794Z"},{"startTime":"2025-02-27T15:37:03.031Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:37:03.568Z"},{"startTime":"2025-02-27T15:36:28.864Z","description":"RunningJob","endTime":"2025-02-27T15:37:03.031Z"},{"startTime":"2025-02-27T15:36:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:28.854Z"},{"startTime":"2025-02-27T15:36:21.794Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:28.854Z"},{"startTime":"2025-02-27T15:36:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:28.864Z"}]}]},"outputs":{"jsonTaskOrderTest.task1_output":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonTaskOrderTest/6ad31183-fca5-4c69-bfc4-a196ebe6c901/call-Task1/execution/task1_output.txt","jsonTaskOrderTest.task2_output":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonTaskOrderTest/6ad31183-fca5-4c69-bfc4-a196ebe6c901/call-Task2/execution/task2_output.txt"},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/jsonTaskOrderTest/6ad31183-fca5-4c69-bfc4-a196ebe6c901","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-27T15:37:04.636Z","start":"2025-02-27T15:35:38.923Z","id":"6ad31183-fca5-4c69-bfc4-a196ebe6c901","inputs":{"input_json":"I
        am the text that from input.json"},"labels":{"cromwell-workflow-id":"cromwell-6ad31183-fca5-4c69-bfc4-a196ebe6c901"},"submission":"2025-02-27T15:35:02.736Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:38:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '6893'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/feccbe41-5fe5-46a8-959a-8c32a9e01102/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"globNonmatching","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:38:27.016Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:37:39.052Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow globNonmatching {\n    call create_files\n    output {\n        Array[File]
        unmatched_files = create_files.unmatched_files\n    }\n}\n\ntask create_files
        {\n    command <<<\n        echo \"Test file\" > test.txt\n    >>>\n    output
        {\n        Array[File] unmatched_files = glob(\"*.log\")\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"globNonmatching.create_files":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/globNonmatching/feccbe41-5fe5-46a8-959a-8c32a9e01102/call-create_files/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Test file\" > test.txt","shardIndex":-1,"outputs":{"unmatched_files":[]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"11775671","backend":"gizmo","end":"2025-02-27T15:38:25.579Z","start":"2025-02-27T15:37:40.094Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/globNonmatching/feccbe41-5fe5-46a8-959a-8c32a9e01102/call-create_files/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/globNonmatching/feccbe41-5fe5-46a8-959a-8c32a9e01102/call-create_files","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:40.094Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:48.854Z"},{"startTime":"2025-02-27T15:37:40.094Z","description":"Pending","endTime":"2025-02-27T15:37:40.094Z"},{"startTime":"2025-02-27T15:37:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:48.863Z"},{"startTime":"2025-02-27T15:37:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:48.854Z"},{"startTime":"2025-02-27T15:37:48.863Z","description":"RunningJob","endTime":"2025-02-27T15:38:24.754Z"},{"startTime":"2025-02-27T15:38:24.754Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:38:25.579Z"}]}]},"outputs":{"globNonmatching.unmatched_files":[]},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/globNonmatching/feccbe41-5fe5-46a8-959a-8c32a9e01102","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-27T15:38:27.016Z","start":"2025-02-27T15:37:39.052Z","id":"feccbe41-5fe5-46a8-959a-8c32a9e01102","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-feccbe41-5fe5-46a8-959a-8c32a9e01102"},"submission":"2025-02-27T15:35:02.791Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:38:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3064'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/d123e213-32e5-49f0-94ba-1e09a2a61989/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"basicGlobTest","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:38:02.916Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:37:19.032Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow basicGlobTest {\n    call create_files\n    output {\n        Array[File]
        matched_files = create_files.txt_files\n    }\n}\n\ntask create_files {\n    command
        <<<\n        echo \"File 1\" > file1.txt\n        echo \"File 2\" > file2.txt\n    >>>\n    output
        {\n        Array[File] txt_files = glob(\"*.txt\")\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"basicGlobTest.create_files":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicGlobTest/d123e213-32e5-49f0-94ba-1e09a2a61989/call-create_files/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"File 1\" > file1.txt\necho \"File 2\" > file2.txt","shardIndex":-1,"outputs":{"txt_files":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicGlobTest/d123e213-32e5-49f0-94ba-1e09a2a61989/call-create_files/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/file1.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicGlobTest/d123e213-32e5-49f0-94ba-1e09a2a61989/call-create_files/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/file2.txt"]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"11775655","backend":"gizmo","end":"2025-02-27T15:38:01.580Z","start":"2025-02-27T15:37:20.075Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicGlobTest/d123e213-32e5-49f0-94ba-1e09a2a61989/call-create_files/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicGlobTest/d123e213-32e5-49f0-94ba-1e09a2a61989/call-create_files","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:37:28.863Z","description":"RunningJob","endTime":"2025-02-27T15:38:01.144Z"},{"startTime":"2025-02-27T15:37:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:37:28.863Z"},{"startTime":"2025-02-27T15:37:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:37:28.854Z"},{"startTime":"2025-02-27T15:38:01.144Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:38:01.580Z"},{"startTime":"2025-02-27T15:37:20.075Z","description":"Pending","endTime":"2025-02-27T15:37:20.075Z"},{"startTime":"2025-02-27T15:37:20.075Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:37:28.854Z"}]}]},"outputs":{"basicGlobTest.matched_files":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicGlobTest/d123e213-32e5-49f0-94ba-1e09a2a61989/call-create_files/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/file1.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicGlobTest/d123e213-32e5-49f0-94ba-1e09a2a61989/call-create_files/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/file2.txt"]},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicGlobTest/d123e213-32e5-49f0-94ba-1e09a2a61989","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-27T15:38:02.916Z","start":"2025-02-27T15:37:19.033Z","id":"d123e213-32e5-49f0-94ba-1e09a2a61989","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-d123e213-32e5-49f0-94ba-1e09a2a61989"},"submission":"2025-02-27T15:35:02.855Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:38:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3814'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/026946a7-1838-4988-a93e-e38944bb0fd0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloHostname","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:35:18.894Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:36:07.916Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the hostname of the node \n##
        the job is submitted to as a test for the Gizmo backend. \n\n#### WORKFLOW
        DEFINITION\n\nworkflow HelloHostname {\n  call Hostname {\n  }\n\n  output
        {\n    File stdout = Hostname.out\n  }\n\n  parameter_meta {\n    stdout:
        \"hostname of the node the job was submitted to\"\n  }\n}\n\n#### TASK DEFINITIONS\n\ntask
        Hostname {\n  command <<<\n    echo $(hostname)\n  >>>\n\n  output {\n    File
        out = stdout()\n  }\n  \n  runtime {\n    cpu: 1\n    memory: \"1 GB\"\n  }\n\n  parameter_meta
        {\n    out: \"hostname of the node the job was submitted to\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"HelloHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloHostname/026946a7-1838-4988-a93e-e38944bb0fd0/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"echo
        $(hostname)","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloHostname/026946a7-1838-4988-a93e-e38944bb0fd0/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"11775527","backend":"gizmo","end":"2025-02-27T15:36:06.570Z","start":"2025-02-27T15:35:19.976Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloHostname/026946a7-1838-4988-a93e-e38944bb0fd0/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloHostname/026946a7-1838-4988-a93e-e38944bb0fd0/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:35:19.976Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:35:28.854Z"},{"startTime":"2025-02-27T15:35:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:35:28.854Z"},{"startTime":"2025-02-27T15:35:28.862Z","description":"RunningJob","endTime":"2025-02-27T15:36:06.114Z"},{"startTime":"2025-02-27T15:35:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:35:28.862Z"},{"startTime":"2025-02-27T15:35:19.976Z","description":"Pending","endTime":"2025-02-27T15:35:19.976Z"},{"startTime":"2025-02-27T15:36:06.114Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:36:06.570Z"}]}]},"outputs":{"HelloHostname.stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloHostname/026946a7-1838-4988-a93e-e38944bb0fd0/call-Hostname/execution/stdout"},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloHostname/026946a7-1838-4988-a93e-e38944bb0fd0","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-27T15:36:07.916Z","start":"2025-02-27T15:35:18.895Z","id":"026946a7-1838-4988-a93e-e38944bb0fd0","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-026946a7-1838-4988-a93e-e38944bb0fd0"},"submission":"2025-02-27T15:35:02.931Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:38:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3580'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/6bd75105-934d-4470-8c52-dcac47d3e1c0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"testNestedJsonArray","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:36:53.036Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:35:58.942Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# Define the structure for sampleDetails\nstruct sampleDetails {\n    String
        experimentType\n    String prepMethod\n    String tissueType\n}\n\n# Define
        the main structure for the single sample\nstruct singleSample {\n    String
        sampleName\n    String aboutSample\n    String sampleDescription\n    sampleDetails
        details  # Use the sampleDetails struct here\n}\n\nworkflow testNestedJsonArray
        {\n  input {\n    String cellNumber\n    Array[singleSample] batchOfSamples  #
        Array of objects representing each sample\n  }\n\n  scatter (sample in batchOfSamples)
        {\n    call processSample {\n      input:\n        sample = sample,\n        base_file_name
        = sample.sampleName \n    }\n  }\n\n  output {\n    # Collect all the fields
        together from each sample into one list\n    Array[File] result_allSampleInfo
        = processSample.allSampleInfo\n  }\n}\n\ntask processSample {\n  input {\n    singleSample
        sample  # Use singleSample type, not Object\n    String base_file_name\n  }\n\n  command
        <<<\n    # Format the sample information as a single string\n    allSampleInfo=\"~{sample.sampleName}
        | ~{sample.aboutSample} | ~{sample.sampleDescription} | ~{sample.details.experimentType}
        | ~{sample.details.prepMethod} | ~{sample.details.tissueType}\"\n    \n    #
        Output the concatenated sample info to a file\n    echo \"${allSampleInfo}\"
        > ~{base_file_name}.allSampleInfo.txt\n  >>>\n\n  output {\n    # Read all
        sample info from the file and output it as an Array of Strings\n    File allSampleInfo
        = \"${base_file_name}.allSampleInfo.txt\"\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"testNestedJsonArray.batchOfSamples\":[{\"aboutSample\":\"This
        is sample 1\",\"details\":{\"experimentType\":\"RNA-Seq\",\"prepMethod\":\"TruSeq\",\"tissueType\":\"blood\"},\"sampleDescription\":\"Description
        of sample 1: A detailed description of the first sample.\",\"sampleName\":\"Sample1\"},{\"aboutSample\":\"This
        is sample 2\",\"details\":{\"experimentType\":\"DNA-Seq\",\"prepMethod\":\"Nextera\",\"tissueType\":\"tissue
        biopsy\"},\"sampleDescription\":\"Description of sample 2: A detailed description
        of the second sample.\",\"sampleName\":\"Sample2\"},{\"aboutSample\":\"This
        is sample 3\",\"details\":{\"experimentType\":\"ChIP-Seq\",\"prepMethod\":\"Epigenome\",\"tissueType\":\"brain\"},\"sampleDescription\":\"Description
        of sample 3: A detailed description of the third sample.\",\"sampleName\":\"Sample3\"}],\"testNestedJsonArray.cellNumber\":\"10000\"}","workflowUrl":"","labels":"{}"},"calls":{"testNestedJsonArray.processSample":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/6bd75105-934d-4470-8c52-dcac47d3e1c0/call-processSample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"#
        Format the sample information as a single string\nallSampleInfo=\"Sample1
        | This is sample 1 | Description of sample 1: A detailed description of the
        first sample. | RNA-Seq | TruSeq | blood\"\n\n# Output the concatenated sample
        info to a file\necho \"${allSampleInfo}\" > Sample1.allSampleInfo.txt","shardIndex":0,"outputs":{"allSampleInfo":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/6bd75105-934d-4470-8c52-dcac47d3e1c0/call-processSample/shard-0/execution/Sample1.allSampleInfo.txt"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"base_file_name":"Sample1","sample":{"aboutSample":"This
        is sample 1","sampleName":"Sample1","sampleDescription":"Description of sample
        1: A detailed description of the first sample.","details":{"prepMethod":"TruSeq","experimentType":"RNA-Seq","tissueType":"blood"}}},"returnCode":0,"jobId":"11775552","backend":"gizmo","start":"2025-02-27T15:36:03.056Z","end":"2025-02-27T15:36:41.579Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/6bd75105-934d-4470-8c52-dcac47d3e1c0/call-processSample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/6bd75105-934d-4470-8c52-dcac47d3e1c0/call-processSample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:08.854Z"},{"startTime":"2025-02-27T15:36:41.503Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:36:41.579Z"},{"startTime":"2025-02-27T15:36:03.056Z","description":"Pending","endTime":"2025-02-27T15:36:03.056Z"},{"startTime":"2025-02-27T15:36:03.056Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:08.854Z"},{"startTime":"2025-02-27T15:36:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:09.508Z"},{"startTime":"2025-02-27T15:36:09.508Z","description":"RunningJob","endTime":"2025-02-27T15:36:41.503Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/6bd75105-934d-4470-8c52-dcac47d3e1c0/call-processSample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"#
        Format the sample information as a single string\nallSampleInfo=\"Sample2
        | This is sample 2 | Description of sample 2: A detailed description of the
        second sample. | DNA-Seq | Nextera | tissue biopsy\"\n\n# Output the concatenated
        sample info to a file\necho \"${allSampleInfo}\" > Sample2.allSampleInfo.txt","shardIndex":1,"outputs":{"allSampleInfo":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/6bd75105-934d-4470-8c52-dcac47d3e1c0/call-processSample/shard-1/execution/Sample2.allSampleInfo.txt"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"base_file_name":"Sample2","sample":{"aboutSample":"This
        is sample 2","sampleName":"Sample2","sampleDescription":"Description of sample
        2: A detailed description of the second sample.","details":{"prepMethod":"Nextera","experimentType":"DNA-Seq","tissueType":"tissue
        biopsy"}}},"returnCode":0,"jobId":"11775551","backend":"gizmo","start":"2025-02-27T15:36:03.056Z","end":"2025-02-27T15:36:50.578Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/6bd75105-934d-4470-8c52-dcac47d3e1c0/call-processSample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/6bd75105-934d-4470-8c52-dcac47d3e1c0/call-processSample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:09.510Z"},{"startTime":"2025-02-27T15:36:09.510Z","description":"RunningJob","endTime":"2025-02-27T15:36:50.471Z"},{"startTime":"2025-02-27T15:36:03.056Z","description":"Pending","endTime":"2025-02-27T15:36:03.056Z"},{"startTime":"2025-02-27T15:36:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:08.854Z"},{"startTime":"2025-02-27T15:36:03.056Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:08.854Z"},{"startTime":"2025-02-27T15:36:50.471Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:36:50.578Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/6bd75105-934d-4470-8c52-dcac47d3e1c0/call-processSample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"#
        Format the sample information as a single string\nallSampleInfo=\"Sample3
        | This is sample 3 | Description of sample 3: A detailed description of the
        third sample. | ChIP-Seq | Epigenome | brain\"\n\n# Output the concatenated
        sample info to a file\necho \"${allSampleInfo}\" > Sample3.allSampleInfo.txt","shardIndex":2,"outputs":{"allSampleInfo":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/6bd75105-934d-4470-8c52-dcac47d3e1c0/call-processSample/shard-2/execution/Sample3.allSampleInfo.txt"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"base_file_name":"Sample3","sample":{"aboutSample":"This
        is sample 3","sampleName":"Sample3","sampleDescription":"Description of sample
        3: A detailed description of the third sample.","details":{"prepMethod":"Epigenome","experimentType":"ChIP-Seq","tissueType":"brain"}}},"returnCode":0,"jobId":"11775553","backend":"gizmo","start":"2025-02-27T15:36:03.056Z","end":"2025-02-27T15:36:42.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/6bd75105-934d-4470-8c52-dcac47d3e1c0/call-processSample/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/6bd75105-934d-4470-8c52-dcac47d3e1c0/call-processSample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:36:03.056Z","description":"Pending","endTime":"2025-02-27T15:36:03.056Z"},{"startTime":"2025-02-27T15:36:09.499Z","description":"RunningJob","endTime":"2025-02-27T15:36:41.952Z"},{"startTime":"2025-02-27T15:36:41.952Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:36:42.580Z"},{"startTime":"2025-02-27T15:36:03.056Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:36:08.854Z"},{"startTime":"2025-02-27T15:36:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:36:08.854Z"},{"startTime":"2025-02-27T15:36:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:36:09.499Z"}]}]},"outputs":{"testNestedJsonArray.result_allSampleInfo":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/6bd75105-934d-4470-8c52-dcac47d3e1c0/call-processSample/shard-0/execution/Sample1.allSampleInfo.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/6bd75105-934d-4470-8c52-dcac47d3e1c0/call-processSample/shard-1/execution/Sample2.allSampleInfo.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/6bd75105-934d-4470-8c52-dcac47d3e1c0/call-processSample/shard-2/execution/Sample3.allSampleInfo.txt"]},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testNestedJsonArray/6bd75105-934d-4470-8c52-dcac47d3e1c0","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-27T15:36:53.036Z","start":"2025-02-27T15:35:58.942Z","id":"6bd75105-934d-4470-8c52-dcac47d3e1c0","inputs":{"batchOfSamples":[{"aboutSample":"This
        is sample 1","sampleName":"Sample1","sampleDescription":"Description of sample
        1: A detailed description of the first sample.","details":{"prepMethod":"TruSeq","experimentType":"RNA-Seq","tissueType":"blood"}},{"aboutSample":"This
        is sample 2","sampleName":"Sample2","sampleDescription":"Description of sample
        2: A detailed description of the second sample.","details":{"prepMethod":"Nextera","experimentType":"DNA-Seq","tissueType":"tissue
        biopsy"}},{"aboutSample":"This is sample 3","sampleName":"Sample3","sampleDescription":"Description
        of sample 3: A detailed description of the third sample.","details":{"prepMethod":"Epigenome","experimentType":"ChIP-Seq","tissueType":"brain"}}],"cellNumber":"10000"},"labels":{"cromwell-workflow-id":"cromwell-6bd75105-934d-4470-8c52-dcac47d3e1c0"},"submission":"2025-02-27T15:35:02.991Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:38:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12472'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This workflow demonstrates
        the usage of conditional statements in WDL\n## by selectively processing samples
        based on their properties\n\nstruct SampleInfo {\n    String name\n    Float
        quality_score\n    String type\n}\n\nworkflow conditional_example {\n    input
        {\n        Array[SampleInfo] samples\n        Float quality_threshold\n    }\n\n    #
        Demonstrate if statement in scatter\n    scatter (sample in samples) {\n        if
        (sample.quality_score >= quality_threshold) {\n            call process_high_quality
        {\n                input:\n                    sample = sample\n            }\n        }\n    }\n\n    #
        Create string arrays for the QC report\n    scatter (sample in samples) {\n        String
        sample_line = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:39:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3787'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This workflow demonstrates
        the usage of conditional statements in WDL\n## by selectively processing samples
        based on their properties\n\nstruct SampleInfo {\n    String name\n    Float
        quality_score\n    String type\n}\n\nworkflow conditional_example {\n    input
        {\n        Array[SampleInfo] samples\n        Float quality_threshold\n    }\n\n    #
        Demonstrate if statement in scatter\n    scatter (sample in samples) {\n        if
        (sample.quality_score >= quality_threshold) {\n            call process_high_quality
        {\n                input:\n                    sample = sample\n            }\n        }\n    }\n\n    #
        Create string arrays for the QC report\n    scatter (sample in samples) {\n        String
        sample_line = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:39:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3787'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This workflow demonstrates
        the usage of conditional statements in WDL\n## by selectively processing samples
        based on their properties\n\nstruct SampleInfo {\n    String name\n    Float
        quality_score\n    String type\n}\n\nworkflow conditional_example {\n    input
        {\n        Array[SampleInfo] samples\n        Float quality_threshold\n    }\n\n    #
        Demonstrate if statement in scatter\n    scatter (sample in samples) {\n        if
        (sample.quality_score >= quality_threshold) {\n            call process_high_quality
        {\n                input:\n                    sample = sample\n            }\n        }\n    }\n\n    #
        Create string arrays for the QC report\n    scatter (sample in samples) {\n        String
        sample_line = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:39:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3787'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This workflow demonstrates
        the usage of conditional statements in WDL\n## by selectively processing samples
        based on their properties\n\nstruct SampleInfo {\n    String name\n    Float
        quality_score\n    String type\n}\n\nworkflow conditional_example {\n    input
        {\n        Array[SampleInfo] samples\n        Float quality_threshold\n    }\n\n    #
        Demonstrate if statement in scatter\n    scatter (sample in samples) {\n        if
        (sample.quality_score >= quality_threshold) {\n            call process_high_quality
        {\n                input:\n                    sample = sample\n            }\n        }\n    }\n\n    #
        Create string arrays for the QC report\n    scatter (sample in samples) {\n        String
        sample_line = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:39:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3787'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This workflow demonstrates
        the usage of conditional statements in WDL\n## by selectively processing samples
        based on their properties\n\nstruct SampleInfo {\n    String name\n    Float
        quality_score\n    String type\n}\n\nworkflow conditional_example {\n    input
        {\n        Array[SampleInfo] samples\n        Float quality_threshold\n    }\n\n    #
        Demonstrate if statement in scatter\n    scatter (sample in samples) {\n        if
        (sample.quality_score >= quality_threshold) {\n            call process_high_quality
        {\n                input:\n                    sample = sample\n            }\n        }\n    }\n\n    #
        Create string arrays for the QC report\n    scatter (sample in samples) {\n        String
        sample_line = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:39:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3787'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:39:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4404'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"QueuedInCromwell","shardIndex":0,"backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z"},{"executionStatus":"QueuedInCromwell","shardIndex":2,"backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z"}],"conditional_example.run_qc_report":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:39:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4844'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2"}],"conditional_example.run_qc_report":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:39:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7747'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"jobId":"11775777","backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"jobId":"11775778","backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2"}],"conditional_example.run_qc_report":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"jobId":"11775776","backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:39:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7882'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"jobId":"11775777","backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"jobId":"11775778","backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2"}],"conditional_example.run_qc_report":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"jobId":"11775776","backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:39:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7882'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"jobId":"11775777","backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"jobId":"11775778","backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2"}],"conditional_example.run_qc_report":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"jobId":"11775776","backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:39:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7882'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"jobId":"11775777","backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"jobId":"11775778","backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2"}],"conditional_example.run_qc_report":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"jobId":"11775776","backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:39:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7882'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"jobId":"11775777","backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"jobId":"11775778","backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2"}],"conditional_example.run_qc_report":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"jobId":"11775776","backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:40:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7882'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"jobId":"11775777","backend":"gizmo","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"jobId":"11775778","backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2"}],"conditional_example.run_qc_report":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"jobId":"11775776","backend":"gizmo","attempt":1,"start":"2025-02-27T15:39:25.327Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:40:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7978'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"11775777","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:03.578Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:03.345Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:03.578Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.870Z"},{"startTime":"2025-02-27T15:39:28.870Z","description":"RunningJob","endTime":"2025-02-27T15:40:03.345Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"11775778","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:06.581Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.327Z"},{"startTime":"2025-02-27T15:39:28.873Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.212Z"},{"startTime":"2025-02-27T15:40:06.212Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:06.581Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.873Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"11775776","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:07.570Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.875Z"},{"startTime":"2025-02-27T15:40:06.625Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:07.570Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.875Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.625Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:40:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10743'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"11775777","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:03.578Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:03.345Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:03.578Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.870Z"},{"startTime":"2025-02-27T15:39:28.870Z","description":"RunningJob","endTime":"2025-02-27T15:40:03.345Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"11775778","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:06.581Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.327Z"},{"startTime":"2025-02-27T15:39:28.873Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.212Z"},{"startTime":"2025-02-27T15:40:06.212Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:06.581Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.873Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"11775776","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:07.570Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.875Z"},{"startTime":"2025-02-27T15:40:06.625Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:07.570Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.875Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.625Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:40:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10743'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-02-27T15:40:14.284Z"}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"11775777","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:03.578Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:03.345Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:03.578Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.870Z"},{"startTime":"2025-02-27T15:39:28.870Z","description":"RunningJob","endTime":"2025-02-27T15:40:03.345Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"11775778","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:06.581Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.327Z"},{"startTime":"2025-02-27T15:39:28.873Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.212Z"},{"startTime":"2025-02-27T15:40:06.212Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:06.581Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.873Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"11775776","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:07.570Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.875Z"},{"startTime":"2025-02-27T15:40:06.625Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:07.570Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.875Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.625Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:40:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10897'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize/execution/stdout","commandLine":"echo
        \"Multiple high-quality samples processed\"\necho \"Number of samples processed:
        2\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"messages":["Processing
        high quality normal sample sample1 (Q=95.5)","Processing high quality normal
        sample sample3 (Q=92.1)"],"report":"Multiple high-quality samples processed"},"backend":"gizmo","attempt":1,"start":"2025-02-27T15:40:14.284Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize"}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"11775777","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:03.578Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:03.345Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:03.578Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.870Z"},{"startTime":"2025-02-27T15:39:28.870Z","description":"RunningJob","endTime":"2025-02-27T15:40:03.345Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"11775778","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:06.581Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.327Z"},{"startTime":"2025-02-27T15:39:28.873Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.212Z"},{"startTime":"2025-02-27T15:40:06.212Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:06.581Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.873Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"11775776","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:07.570Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.875Z"},{"startTime":"2025-02-27T15:40:06.625Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:07.570Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.875Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.625Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:40:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11918'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Multiple high-quality samples processed\"\necho \"Number of samples processed:
        2\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"messages":["Processing
        high quality normal sample sample1 (Q=95.5)","Processing high quality normal
        sample sample3 (Q=92.1)"],"report":"Multiple high-quality samples processed"},"jobId":"11775826","backend":"gizmo","attempt":1,"start":"2025-02-27T15:40:14.284Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize"}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"11775777","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:03.578Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:03.345Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:03.578Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.870Z"},{"startTime":"2025-02-27T15:39:28.870Z","description":"RunningJob","endTime":"2025-02-27T15:40:03.345Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"11775778","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:06.581Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.327Z"},{"startTime":"2025-02-27T15:39:28.873Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.212Z"},{"startTime":"2025-02-27T15:40:06.212Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:06.581Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.873Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"11775776","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:07.570Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.875Z"},{"startTime":"2025-02-27T15:40:06.625Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:07.570Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.875Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.625Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:40:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11963'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Multiple high-quality samples processed\"\necho \"Number of samples processed:
        2\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"messages":["Processing
        high quality normal sample sample1 (Q=95.5)","Processing high quality normal
        sample sample3 (Q=92.1)"],"report":"Multiple high-quality samples processed"},"jobId":"11775826","backend":"gizmo","attempt":1,"start":"2025-02-27T15:40:14.284Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize"}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"11775777","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:03.578Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:03.345Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:03.578Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.870Z"},{"startTime":"2025-02-27T15:39:28.870Z","description":"RunningJob","endTime":"2025-02-27T15:40:03.345Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"11775778","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:06.581Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.327Z"},{"startTime":"2025-02-27T15:39:28.873Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.212Z"},{"startTime":"2025-02-27T15:40:06.212Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:06.581Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.873Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"11775776","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:07.570Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.875Z"},{"startTime":"2025-02-27T15:40:06.625Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:07.570Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.875Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.625Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:40:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11963'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Multiple high-quality samples processed\"\necho \"Number of samples processed:
        2\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"messages":["Processing
        high quality normal sample sample1 (Q=95.5)","Processing high quality normal
        sample sample3 (Q=92.1)"],"report":"Multiple high-quality samples processed"},"jobId":"11775826","backend":"gizmo","attempt":1,"start":"2025-02-27T15:40:14.284Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize"}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"11775777","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:03.578Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:03.345Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:03.578Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.870Z"},{"startTime":"2025-02-27T15:39:28.870Z","description":"RunningJob","endTime":"2025-02-27T15:40:03.345Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"11775778","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:06.581Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.327Z"},{"startTime":"2025-02-27T15:39:28.873Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.212Z"},{"startTime":"2025-02-27T15:40:06.212Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:06.581Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.873Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"11775776","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:07.570Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.875Z"},{"startTime":"2025-02-27T15:40:06.625Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:07.570Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.875Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.625Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:40:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11963'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Multiple high-quality samples processed\"\necho \"Number of samples processed:
        2\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"messages":["Processing
        high quality normal sample sample1 (Q=95.5)","Processing high quality normal
        sample sample3 (Q=92.1)"],"report":"Multiple high-quality samples processed"},"jobId":"11775826","backend":"gizmo","attempt":1,"start":"2025-02-27T15:40:14.284Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize"}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"11775777","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:03.578Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:03.345Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:03.578Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.870Z"},{"startTime":"2025-02-27T15:39:28.870Z","description":"RunningJob","endTime":"2025-02-27T15:40:03.345Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"11775778","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:06.581Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.327Z"},{"startTime":"2025-02-27T15:39:28.873Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.212Z"},{"startTime":"2025-02-27T15:40:06.212Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:06.581Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.873Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"11775776","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:07.570Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.875Z"},{"startTime":"2025-02-27T15:40:06.625Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:07.570Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.875Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.625Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:40:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11963'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Multiple high-quality samples processed\"\necho \"Number of samples processed:
        2\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"messages":["Processing
        high quality normal sample sample1 (Q=95.5)","Processing high quality normal
        sample sample3 (Q=92.1)"],"report":"Multiple high-quality samples processed"},"jobId":"11775826","backend":"gizmo","attempt":1,"start":"2025-02-27T15:40:14.284Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize"}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"11775777","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:03.578Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:03.345Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:03.578Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.870Z"},{"startTime":"2025-02-27T15:39:28.870Z","description":"RunningJob","endTime":"2025-02-27T15:40:03.345Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"11775778","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:06.581Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.327Z"},{"startTime":"2025-02-27T15:39:28.873Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.212Z"},{"startTime":"2025-02-27T15:40:06.212Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:06.581Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.873Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"11775776","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:07.570Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.875Z"},{"startTime":"2025-02-27T15:40:06.625Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:07.570Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.875Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.625Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:40:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11963'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Multiple high-quality samples processed\"\necho \"Number of samples processed:
        2\"","shardIndex":-1,"outputs":{"summary":"Multiple high-quality samples processed\nNumber
        of samples processed: 2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"messages":["Processing
        high quality normal sample sample1 (Q=95.5)","Processing high quality normal
        sample sample3 (Q=92.1)"],"report":"Multiple high-quality samples processed"},"returnCode":0,"jobId":"11775826","backend":"gizmo","start":"2025-02-27T15:40:14.284Z","end":"2025-02-27T15:40:52.580Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:14.285Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:40:18.854Z"},{"startTime":"2025-02-27T15:40:18.861Z","description":"RunningJob","endTime":"2025-02-27T15:40:52.524Z"},{"startTime":"2025-02-27T15:40:18.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:40:18.854Z"},{"startTime":"2025-02-27T15:40:14.285Z","description":"Pending","endTime":"2025-02-27T15:40:14.285Z"},{"startTime":"2025-02-27T15:40:52.524Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:52.580Z"},{"startTime":"2025-02-27T15:40:18.854Z","description":"PreparingJob","endTime":"2025-02-27T15:40:18.861Z"}]}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"11775777","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:03.578Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:03.345Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:03.578Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.870Z"},{"startTime":"2025-02-27T15:39:28.870Z","description":"RunningJob","endTime":"2025-02-27T15:40:03.345Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"11775778","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:06.581Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.327Z"},{"startTime":"2025-02-27T15:39:28.873Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.212Z"},{"startTime":"2025-02-27T15:40:06.212Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:06.581Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.873Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"11775776","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:07.570Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.875Z"},{"startTime":"2025-02-27T15:40:06.625Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:07.570Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.875Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.625Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:40:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12879'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:40:55.086Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:19.154Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Multiple high-quality samples processed\"\necho \"Number of samples processed:
        2\"","shardIndex":-1,"outputs":{"summary":"Multiple high-quality samples processed\nNumber
        of samples processed: 2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"messages":["Processing
        high quality normal sample sample1 (Q=95.5)","Processing high quality normal
        sample sample3 (Q=92.1)"],"report":"Multiple high-quality samples processed"},"returnCode":0,"jobId":"11775826","backend":"gizmo","start":"2025-02-27T15:40:14.284Z","end":"2025-02-27T15:40:52.580Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-summarize","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:14.285Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:40:18.854Z"},{"startTime":"2025-02-27T15:40:18.861Z","description":"RunningJob","endTime":"2025-02-27T15:40:52.524Z"},{"startTime":"2025-02-27T15:40:18.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:40:18.854Z"},{"startTime":"2025-02-27T15:40:14.285Z","description":"Pending","endTime":"2025-02-27T15:40:14.285Z"},{"startTime":"2025-02-27T15:40:52.524Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:52.580Z"},{"startTime":"2025-02-27T15:40:18.854Z","description":"PreparingJob","endTime":"2025-02-27T15:40:18.861Z"}]}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"11775777","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:03.578Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:03.345Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:03.578Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.870Z"},{"startTime":"2025-02-27T15:39:28.870Z","description":"RunningJob","endTime":"2025-02-27T15:40:03.345Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"11775778","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:06.581Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.327Z"},{"startTime":"2025-02-27T15:39:28.873Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.212Z"},{"startTime":"2025-02-27T15:40:06.212Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:06.581Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.873Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"11775776","backend":"gizmo","start":"2025-02-27T15:39:25.327Z","end":"2025-02-27T15:40:07.570Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:28.875Z"},{"startTime":"2025-02-27T15:40:06.625Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:07.570Z"},{"startTime":"2025-02-27T15:39:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:25.327Z","description":"Pending","endTime":"2025-02-27T15:39:25.328Z"},{"startTime":"2025-02-27T15:39:25.328Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:28.854Z"},{"startTime":"2025-02-27T15:39:28.875Z","description":"RunningJob","endTime":"2025-02-27T15:40:06.625Z"}]}]},"outputs":{"conditional_example.final_summary":"Multiple
        high-quality samples processed\nNumber of samples processed: 2","conditional_example.qc_report":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c/call-run_qc_report/execution/report.csv"},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/1e1751cb-150c-41ff-bae1-1e6cf4868d6c","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-27T15:40:55.086Z","start":"2025-02-27T15:39:19.154Z","id":"1e1751cb-150c-41ff-bae1-1e6cf4868d6c","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-1e1751cb-150c-41ff-bae1-1e6cf4868d6c"},"submission":"2025-02-27T15:35:03.043Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:41:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '13326'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/1afbe0f1-598d-4997-a722-fe89503de965/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:38:59.132Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:38:59.147Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n# This workflow takes a tab separated file where each row is a set of
        data to be used in each \n# of the independent scattered task series that
        you have as your workflow process.  This file \n# will, for example, have
        column names `sampleName`, `bamLocation`, and `bedlocation`.  This\n# allows
        you to know that regardless of the order of the columns in your batch file,
        the correct\n# inputs will be used for the tasks you define.  \nworkflow parseBatchFile
        {\n  input {\n  File batchFile\n  }\n    Array[Object] batchInfo = read_objects(batchFile)\n  scatter
        (job in batchInfo){\n    String sampleName = job.sampleName\n    File bamFile
        = job.bamLocation\n    File bedFile = job.bedLocation\n\n    ## INSERT YOUR
        WORKFLOW TO RUN PER LINE IN YOUR BATCH FILE HERE!!!!\n    call test {\n        input:
        in1=sampleName, in2=bamFile, in3=bedFile\n    }\n\n  }  # End Scatter over
        the batch file\n# Outputs that will be retained when execution is complete\n  output
        {\n    Array[File] outputArray = test.item_out\n    }\n# End workflow\n}\n\n####
        TASK DEFINITIONS\n# echo some text to stdout, treats files as strings just
        to echo them as a dummy example\ntask test {\n  input {\n    String in1\n    String
        in2\n    String in3\n  }\n    command {\n    echo ~{in1}\n    echo ~{in2}\n    echo
        ~{in3}\n    }\n    output {\n        File item_out = stdout()\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"actualWorkflowLanguage":"WDL","status":"Failed","failures":[{"causedBy":[{"causedBy":[],"message":"Required
        workflow input ''parseBatchFile.batchFile'' not specified"}],"message":"Workflow
        input processing failed"}],"end":"2025-02-27T15:38:59.147Z","start":"2025-02-27T15:38:59.133Z","id":"1afbe0f1-598d-4997-a722-fe89503de965","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-1afbe0f1-598d-4997-a722-fe89503de965"},"submission":"2025-02-27T15:35:03.082Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:41:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2382'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/52280f80-8220-4034-8a78-ceb1accdaa38/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"globSubdir","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:59.203Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:40:45.126Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\nworkflow globSubdir {\n    call create_nested_files\n    output {\n        Array[File]
        matched_files = flatten([create_nested_files.matched_files_top, create_nested_files.matched_files_nested])\n    }\n}\n\ntask
        create_nested_files {\n    command <<<\n        mkdir -p subdir/nested\n        echo
        \"Hello\" > subdir/nested/file1.txt\n        echo \"World\" > subdir/file2.txt\n    >>>\n    output
        {\n        Array[File] matched_files_top = glob(\"subdir/*.txt\")\n        Array[File]
        matched_files_nested = glob(\"subdir/**/*.txt\")\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"globSubdir.create_nested_files":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/globSubdir/52280f80-8220-4034-8a78-ceb1accdaa38/call-create_nested_files/execution/stdout","backendStatus":"Done","commandLine":"mkdir
        -p subdir/nested\necho \"Hello\" > subdir/nested/file1.txt\necho \"World\"
        > subdir/file2.txt","shardIndex":-1,"outputs":{"matched_files_top":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/globSubdir/52280f80-8220-4034-8a78-ceb1accdaa38/call-create_nested_files/execution/glob-ee3a9c1c6860f417d1e9ff1a72d2b62d/file2.txt"],"matched_files_nested":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/globSubdir/52280f80-8220-4034-8a78-ceb1accdaa38/call-create_nested_files/execution/glob-4c0cd9dc6b12aa01233bbc214341aae1/file1.txt"]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"11775809","backend":"gizmo","end":"2025-02-27T15:40:43.579Z","start":"2025-02-27T15:40:00.246Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/globSubdir/52280f80-8220-4034-8a78-ceb1accdaa38/call-create_nested_files/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/globSubdir/52280f80-8220-4034-8a78-ceb1accdaa38/call-create_nested_files","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:00.246Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:40:08.853Z"},{"startTime":"2025-02-27T15:40:43.365Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:43.579Z"},{"startTime":"2025-02-27T15:40:08.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:40:08.853Z"},{"startTime":"2025-02-27T15:40:08.865Z","description":"RunningJob","endTime":"2025-02-27T15:40:43.365Z"},{"startTime":"2025-02-27T15:40:00.246Z","description":"Pending","endTime":"2025-02-27T15:40:00.246Z"},{"startTime":"2025-02-27T15:40:08.853Z","description":"PreparingJob","endTime":"2025-02-27T15:40:08.865Z"}]}]},"outputs":{"globSubdir.matched_files":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/globSubdir/52280f80-8220-4034-8a78-ceb1accdaa38/call-create_nested_files/execution/glob-ee3a9c1c6860f417d1e9ff1a72d2b62d/file2.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/globSubdir/52280f80-8220-4034-8a78-ceb1accdaa38/call-create_nested_files/execution/glob-4c0cd9dc6b12aa01233bbc214341aae1/file1.txt"]},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/globSubdir/52280f80-8220-4034-8a78-ceb1accdaa38","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-27T15:40:45.126Z","start":"2025-02-27T15:39:59.204Z","id":"52280f80-8220-4034-8a78-ceb1accdaa38","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-52280f80-8220-4034-8a78-ceb1accdaa38"},"submission":"2025-02-27T15:35:03.119Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:41:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4126'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/7efd054d-1d06-40df-be98-ed84f8ea8988/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:40:19.234Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:40:19.252Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that fails against womtool.\n## From https://github.com/broadinstitute/cromwell\n\n####
        WORKFLOW DEFINITION\n\nworkflow oops {\n  call oopsie\n}\n\n#### TASK DEFINITIONS\n\ntask
        oopsie {\n  input {\n    String str\n  }\n  command { echo ${str} }\n  runtime
        { docker: docker_image }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"actualWorkflowLanguage":"WDL","status":"Failed","failures":[{"causedBy":[{"causedBy":[],"message":"Failed
        to process task definition ''oopsie'' (reason 1 of 1): Cannot lookup value
        ''docker_image'', it is never declared. Available values are: [''str'']"}],"message":"Workflow
        input processing failed"}],"end":"2025-02-27T15:40:19.252Z","start":"2025-02-27T15:40:19.234Z","id":"7efd054d-1d06-40df-be98-ed84f8ea8988","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-7efd054d-1d06-40df-be98-ed84f8ea8988"},"submission":"2025-02-27T15:35:03.167Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:41:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1422'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/119b9639-b077-4fd7-84fd-83425cb0f40e/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"emptyGlobTest","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:38:39.112Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:39:25.046Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow emptyGlobTest {\n    call create_empty_directory\n\n    output
        {\n        Array[File] no_files = create_empty_directory.no_files\n    }\n}\n\ntask
        create_empty_directory {\n    command {\n        mkdir empty_dir\n    }\n    output
        {\n        Array[File] no_files = glob(\"empty_dir/*.txt\")\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"emptyGlobTest.create_empty_directory":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/emptyGlobTest/119b9639-b077-4fd7-84fd-83425cb0f40e/call-create_empty_directory/execution/stdout","backendStatus":"Done","commandLine":"mkdir
        empty_dir","shardIndex":-1,"outputs":{"no_files":[]},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"11775743","backend":"gizmo","end":"2025-02-27T15:39:23.579Z","start":"2025-02-27T15:38:40.164Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/emptyGlobTest/119b9639-b077-4fd7-84fd-83425cb0f40e/call-create_empty_directory/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/emptyGlobTest/119b9639-b077-4fd7-84fd-83425cb0f40e/call-create_empty_directory","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:38:48.864Z","description":"RunningJob","endTime":"2025-02-27T15:39:22.775Z"},{"startTime":"2025-02-27T15:38:40.164Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:38:48.853Z"},{"startTime":"2025-02-27T15:38:48.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:38:48.854Z"},{"startTime":"2025-02-27T15:38:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:38:48.864Z"},{"startTime":"2025-02-27T15:38:40.164Z","description":"Pending","endTime":"2025-02-27T15:38:40.164Z"},{"startTime":"2025-02-27T15:39:22.775Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:39:23.579Z"}]}]},"outputs":{"emptyGlobTest.no_files":[]},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/emptyGlobTest/119b9639-b077-4fd7-84fd-83425cb0f40e","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-27T15:39:25.046Z","start":"2025-02-27T15:38:39.113Z","id":"119b9639-b077-4fd7-84fd-83425cb0f40e","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-119b9639-b077-4fd7-84fd-83425cb0f40e"},"submission":"2025-02-27T15:35:03.214Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:41:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3063'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/0bab496f-5256-4b6d-8a5a-cd4d5d3d0b2a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"WildcardsandConditions","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:38:19.093Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:39:09.109Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow WildcardsandConditions {\n    input {\n        String prefix  #
        Required input for the file prefix (no default value)\n    }\n\n    call wildcard_and_conditions_test
        {\n        input:\n            prefix = prefix  # Explicitly pass the workflow
        input to the task\n    }\n\n    output {\n        Array[File] txt_files =
        wildcard_and_conditions_test.txt_files\n        String conditional_result
        = wildcard_and_conditions_test.conditional_output\n    }\n}\n\ntask wildcard_and_conditions_test
        {\n    input {\n        String prefix  # Required input for file creation\n        Boolean
        create_extra_file = true  # Default value for conditional logic\n    }\n\n    command
        <<<\n        # Create multiple .txt files to test wildcard resolution\n        for
        i in {1..3}; do\n            echo \"File content $i\" > \"~{prefix}_$i.txt\"\n        done\n\n        #
        Create an extra file conditionally\n        if [[ ~{create_extra_file} ==
        \"true\" ]]; then\n            echo \"Extra file content\" > ~{prefix}_extra.txt\n        fi\n\n        #
        Parse inputs directly in the command\n        echo \"Parsed prefix: ~{prefix}\"
        > parsed_output.txt\n    >>>\n\n    output {\n        Array[File] txt_files
        = glob(\"*.txt\")  # Test wildcard resolution\n        String conditional_output
        = read_string(\"parsed_output.txt\")  # Verify input parsing\n    }\n\n    runtime
        {\n        docker: \"ubuntu:20.04\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"WildcardsandConditions.prefix\":\"testfile\"}","workflowUrl":"","labels":"{}"},"calls":{"WildcardsandConditions.wildcard_and_conditions_test":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/0bab496f-5256-4b6d-8a5a-cd4d5d3d0b2a/call-wildcard_and_conditions_test/execution/stdout","backendStatus":"Done","commandLine":"#
        Create multiple .txt files to test wildcard resolution\nfor i in {1..3}; do\n    echo
        \"File content $i\" > \"testfile_$i.txt\"\ndone\n\n# Create an extra file
        conditionally\nif [[ true == \"true\" ]]; then\n    echo \"Extra file content\"
        > testfile_extra.txt\nfi\n\n# Parse inputs directly in the command\necho \"Parsed
        prefix: testfile\" > parsed_output.txt","shardIndex":-1,"outputs":{"txt_files":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/0bab496f-5256-4b6d-8a5a-cd4d5d3d0b2a/call-wildcard_and_conditions_test/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/parsed_output.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/0bab496f-5256-4b6d-8a5a-cd4d5d3d0b2a/call-wildcard_and_conditions_test/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/testfile_1.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/0bab496f-5256-4b6d-8a5a-cd4d5d3d0b2a/call-wildcard_and_conditions_test/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/testfile_2.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/0bab496f-5256-4b6d-8a5a-cd4d5d3d0b2a/call-wildcard_and_conditions_test/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/testfile_3.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/0bab496f-5256-4b6d-8a5a-cd4d5d3d0b2a/call-wildcard_and_conditions_test/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/testfile_extra.txt"],"conditional_output":"Parsed
        prefix: testfile"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"prefix":"testfile","create_extra_file":true},"returnCode":0,"jobId":"11775718","backend":"gizmo","start":"2025-02-27T15:38:21.166Z","end":"2025-02-27T15:39:07.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/0bab496f-5256-4b6d-8a5a-cd4d5d3d0b2a/call-wildcard_and_conditions_test/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/0bab496f-5256-4b6d-8a5a-cd4d5d3d0b2a/call-wildcard_and_conditions_test","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:38:28.867Z","description":"RunningJob","endTime":"2025-02-27T15:39:06.813Z"},{"startTime":"2025-02-27T15:38:28.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:38:28.854Z"},{"startTime":"2025-02-27T15:38:21.166Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:38:28.854Z"},{"startTime":"2025-02-27T15:38:28.854Z","description":"PreparingJob","endTime":"2025-02-27T15:38:28.867Z"},{"startTime":"2025-02-27T15:39:06.813Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:39:07.580Z"},{"startTime":"2025-02-27T15:38:21.166Z","description":"Pending","endTime":"2025-02-27T15:38:21.166Z"}]}]},"outputs":{"WildcardsandConditions.txt_files":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/0bab496f-5256-4b6d-8a5a-cd4d5d3d0b2a/call-wildcard_and_conditions_test/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/parsed_output.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/0bab496f-5256-4b6d-8a5a-cd4d5d3d0b2a/call-wildcard_and_conditions_test/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/testfile_1.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/0bab496f-5256-4b6d-8a5a-cd4d5d3d0b2a/call-wildcard_and_conditions_test/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/testfile_2.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/0bab496f-5256-4b6d-8a5a-cd4d5d3d0b2a/call-wildcard_and_conditions_test/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/testfile_3.txt","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/0bab496f-5256-4b6d-8a5a-cd4d5d3d0b2a/call-wildcard_and_conditions_test/execution/glob-ef5df339533c1334f081dc8cc75ee4f3/testfile_extra.txt"],"WildcardsandConditions.conditional_result":"Parsed
        prefix: testfile"},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/WildcardsandConditions/0bab496f-5256-4b6d-8a5a-cd4d5d3d0b2a","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-27T15:39:09.109Z","start":"2025-02-27T15:38:19.093Z","id":"0bab496f-5256-4b6d-8a5a-cd4d5d3d0b2a","inputs":{"WildcardsandConditions.wildcard_and_conditions_test.create_extra_file":true,"prefix":"testfile"},"labels":{"cromwell-workflow-id":"cromwell-0bab496f-5256-4b6d-8a5a-cd4d5d3d0b2a"},"submission":"2025-02-27T15:35:03.262Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:41:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7156'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/030b9c9a-e295-4ff1-bb98-5db554ec4c14/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:37:59.072Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:38:51.127Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{"struct_example.process_sample":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/030b9c9a-e295-4ff1-bb98-5db554ec4c14/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal)\"\necho \"Read Length: 100\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: H5K5YDSXX\"\necho \"Lane Number:
        1\"\necho \"Quality Score: 95.5\"\necho \"GC Content: 45.2\"\necho \"Duplicate
        Rate: 2%\"\necho \"Library Prep: Standard\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal)\nRead Length: 100\nSequencing Platform: NovaSeq\nFlowcell
        ID: H5K5YDSXX\nLane Number: 1\nQuality Score: 95.5\nGC Content: 45.2\nDuplicate
        Rate: 2%\nLibrary Prep: Standard"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":"normal","library_prep":null,"read_length":100}},"returnCode":0,"jobId":"11775702","backend":"gizmo","start":"2025-02-27T15:38:04.206Z","end":"2025-02-27T15:38:49.581Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/030b9c9a-e295-4ff1-bb98-5db554ec4c14/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/030b9c9a-e295-4ff1-bb98-5db554ec4c14/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:38:04.206Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:38:08.854Z"},{"startTime":"2025-02-27T15:38:04.206Z","description":"Pending","endTime":"2025-02-27T15:38:04.206Z"},{"startTime":"2025-02-27T15:38:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:38:08.854Z"},{"startTime":"2025-02-27T15:38:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:38:08.877Z"},{"startTime":"2025-02-27T15:38:08.877Z","description":"RunningJob","endTime":"2025-02-27T15:38:48.932Z"},{"startTime":"2025-02-27T15:38:48.932Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:38:49.581Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/030b9c9a-e295-4ff1-bb98-5db554ec4c14/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor)\"\necho \"Read Length: 150\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: N/A\"\necho \"Lane Number: -1\"\necho
        \"Quality Score: 92.3\"\necho \"GC Content: 0.0\"\necho \"Duplicate Rate:
        0%\"\necho \"Library Prep: PCR-free\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor)\nRead Length: 150\nSequencing Platform: NovaSeq\nFlowcell
        ID: N/A\nLane Number: -1\nQuality Score: 92.3\nGC Content: 0.0\nDuplicate
        Rate: 0%\nLibrary Prep: PCR-free"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}},"returnCode":0,"jobId":"11775703","backend":"gizmo","start":"2025-02-27T15:38:04.206Z","end":"2025-02-27T15:38:45.580Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/030b9c9a-e295-4ff1-bb98-5db554ec4c14/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/030b9c9a-e295-4ff1-bb98-5db554ec4c14/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:38:04.206Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:38:08.854Z"},{"startTime":"2025-02-27T15:38:04.206Z","description":"Pending","endTime":"2025-02-27T15:38:04.206Z"},{"startTime":"2025-02-27T15:38:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:38:08.854Z"},{"startTime":"2025-02-27T15:38:44.794Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:38:45.580Z"},{"startTime":"2025-02-27T15:38:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:38:08.870Z"},{"startTime":"2025-02-27T15:38:08.870Z","description":"RunningJob","endTime":"2025-02-27T15:38:44.794Z"}]}]},"outputs":{"struct_example.process_sample.message":["Processing
        sample1 (normal)\nRead Length: 100\nSequencing Platform: NovaSeq\nFlowcell
        ID: H5K5YDSXX\nLane Number: 1\nQuality Score: 95.5\nGC Content: 45.2\nDuplicate
        Rate: 2%\nLibrary Prep: Standard","Processing sample2 (tumor)\nRead Length:
        150\nSequencing Platform: NovaSeq\nFlowcell ID: N/A\nLane Number: -1\nQuality
        Score: 92.3\nGC Content: 0.0\nDuplicate Rate: 0%\nLibrary Prep: PCR-free"],"struct_example.processed_sample":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":"normal","library_prep":null,"read_length":100},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/030b9c9a-e295-4ff1-bb98-5db554ec4c14","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-27T15:38:51.127Z","start":"2025-02-27T15:37:59.073Z","id":"030b9c9a-e295-4ff1-bb98-5db554ec4c14","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-030b9c9a-e295-4ff1-bb98-5db554ec4c14"},"submission":"2025-02-27T15:35:03.311Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:41:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10118'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/af11cb0b-44cc-4676-a2a0-fa8b67988792/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"testFileoperations","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:41:29.256Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:40:39.263Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow testFileoperations {\n    call file_operations\n\n    output
        {\n        File created_file1 = file_operations.created_file1\n        File
        moved_file = file_operations.moved_file\n        File renamed_file = file_operations.renamed_file\n    }\n}\n\ntask
        file_operations {\n    command <<<\n        # Create three different files\n        echo
        \"This is the first created file.\" > file1.txt\n        echo \"This is the
        second file that will be moved.\" > file2.txt\n        echo \"This is the
        third file that will be renamed.\" > file3.txt\n        \n        # Move the
        second file to a new directory\n        mkdir -p output_dir\n        mv file2.txt
        output_dir/\n        \n        # Rename the third file\n        mv file3.txt
        file3_renamed.txt\n    >>>\n\n    output {\n        # Output the actual existing
        files\n        File created_file1 = \"file1.txt\"                  # The first
        file remains unchanged\n        File moved_file = \"output_dir/file2.txt\"          #
        The second file after being moved\n        File renamed_file = \"file3_renamed.txt\"           #
        The third file after being renamed\n    }\n\n    runtime {\n        docker:
        \"ubuntu:20.04\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"testFileoperations.file_operations":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/af11cb0b-44cc-4676-a2a0-fa8b67988792/call-file_operations/execution/stdout","backendStatus":"Done","commandLine":"#
        Create three different files\necho \"This is the first created file.\" > file1.txt\necho
        \"This is the second file that will be moved.\" > file2.txt\necho \"This is
        the third file that will be renamed.\" > file3.txt\n\n# Move the second file
        to a new directory\nmkdir -p output_dir\nmv file2.txt output_dir/\n\n# Rename
        the third file\nmv file3.txt file3_renamed.txt","shardIndex":-1,"outputs":{"renamed_file":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/af11cb0b-44cc-4676-a2a0-fa8b67988792/call-file_operations/execution/file3_renamed.txt","moved_file":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/af11cb0b-44cc-4676-a2a0-fa8b67988792/call-file_operations/execution/output_dir/file2.txt","created_file1":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/af11cb0b-44cc-4676-a2a0-fa8b67988792/call-file_operations/execution/file1.txt"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"11775867","backend":"gizmo","start":"2025-02-27T15:40:40.305Z","end":"2025-02-27T15:41:27.570Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/af11cb0b-44cc-4676-a2a0-fa8b67988792/call-file_operations/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/af11cb0b-44cc-4676-a2a0-fa8b67988792/call-file_operations","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:40.305Z","description":"Pending","endTime":"2025-02-27T15:40:40.305Z"},{"startTime":"2025-02-27T15:40:48.868Z","description":"RunningJob","endTime":"2025-02-27T15:41:26.877Z"},{"startTime":"2025-02-27T15:40:48.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:40:48.854Z"},{"startTime":"2025-02-27T15:40:40.305Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:40:48.854Z"},{"startTime":"2025-02-27T15:41:26.877Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:41:27.570Z"},{"startTime":"2025-02-27T15:40:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:40:48.868Z"}]}]},"outputs":{"testFileoperations.created_file1":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/af11cb0b-44cc-4676-a2a0-fa8b67988792/call-file_operations/execution/file1.txt","testFileoperations.moved_file":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/af11cb0b-44cc-4676-a2a0-fa8b67988792/call-file_operations/execution/output_dir/file2.txt","testFileoperations.renamed_file":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/af11cb0b-44cc-4676-a2a0-fa8b67988792/call-file_operations/execution/file3_renamed.txt"},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/testFileoperations/af11cb0b-44cc-4676-a2a0-fa8b67988792","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-27T15:41:29.256Z","start":"2025-02-27T15:40:39.263Z","id":"af11cb0b-44cc-4676-a2a0-fa8b67988792","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-af11cb0b-44cc-4676-a2a0-fa8b67988792"},"submission":"2025-02-27T15:35:03.353Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:41:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5467'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/d39269f3-1985-47c8-84df-c044ac944ac5/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"basicTaskTest","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:40:59.283Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# The basicTaskTest workflow calls a task named simpleTask, which takes
        a string input and writes it to a file called output.txt. It demonstrates
        a basic execution of a task with file output.\n\n# This tests basic task execution,
        input handling, and file output functionality. It ensures that a task can
        successfully take an input and generate an output.\n\nworkflow basicTaskTest
        {\n  input {\n    String text = \"Hello, World!\"\n  }\n\n  call simpleTask
        {\n    input:\n      message = text\n  }\n}\n\ntask simpleTask {\n  input
        {\n    String message\n  }\n\n  command <<<\n    echo \"~{message}\" > output.txt\n  >>>\n\n  output
        {\n    File outputFile = \"output.txt\"\n  }\n\n  runtime {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"basicTaskTest.simpleTask":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicTaskTest/d39269f3-1985-47c8-84df-c044ac944ac5/call-simpleTask/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Hello, World!\" > output.txt","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"message":"Hello,
        World!"},"jobId":"11775876","backend":"gizmo","attempt":1,"start":"2025-02-27T15:41:01.345Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicTaskTest/d39269f3-1985-47c8-84df-c044ac944ac5/call-simpleTask/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicTaskTest/d39269f3-1985-47c8-84df-c044ac944ac5/call-simpleTask"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicTaskTest/d39269f3-1985-47c8-84df-c044ac944ac5","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:40:59.283Z","id":"d39269f3-1985-47c8-84df-c044ac944ac5","inputs":{"text":"Hello,
        World!"},"labels":{"cromwell-workflow-id":"cromwell-d39269f3-1985-47c8-84df-c044ac944ac5"},"submission":"2025-02-27T15:35:03.399Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:41:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2598'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/d39269f3-1985-47c8-84df-c044ac944ac5/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"basicTaskTest","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:40:59.283Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:41:47.248Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n# The basicTaskTest workflow calls a task named simpleTask, which takes
        a string input and writes it to a file called output.txt. It demonstrates
        a basic execution of a task with file output.\n\n# This tests basic task execution,
        input handling, and file output functionality. It ensures that a task can
        successfully take an input and generate an output.\n\nworkflow basicTaskTest
        {\n  input {\n    String text = \"Hello, World!\"\n  }\n\n  call simpleTask
        {\n    input:\n      message = text\n  }\n}\n\ntask simpleTask {\n  input
        {\n    String message\n  }\n\n  command <<<\n    echo \"~{message}\" > output.txt\n  >>>\n\n  output
        {\n    File outputFile = \"output.txt\"\n  }\n\n  runtime {\n    docker: \"ubuntu:20.04\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"basicTaskTest.simpleTask":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicTaskTest/d39269f3-1985-47c8-84df-c044ac944ac5/call-simpleTask/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Hello, World!\" > output.txt","shardIndex":-1,"outputs":{"outputFile":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicTaskTest/d39269f3-1985-47c8-84df-c044ac944ac5/call-simpleTask/execution/output.txt"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"message":"Hello,
        World!"},"returnCode":0,"jobId":"11775876","backend":"gizmo","start":"2025-02-27T15:41:01.345Z","end":"2025-02-27T15:41:46.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicTaskTest/d39269f3-1985-47c8-84df-c044ac944ac5/call-simpleTask/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicTaskTest/d39269f3-1985-47c8-84df-c044ac944ac5/call-simpleTask","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:41:01.345Z","description":"Pending","endTime":"2025-02-27T15:41:01.345Z"},{"startTime":"2025-02-27T15:41:01.345Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:41:08.854Z"},{"startTime":"2025-02-27T15:41:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:41:08.854Z"},{"startTime":"2025-02-27T15:41:45.813Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:41:46.580Z"},{"startTime":"2025-02-27T15:41:08.867Z","description":"RunningJob","endTime":"2025-02-27T15:41:45.813Z"},{"startTime":"2025-02-27T15:41:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:41:08.867Z"}]}]},"outputs":{"basicTaskTest.simpleTask.outputFile":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicTaskTest/d39269f3-1985-47c8-84df-c044ac944ac5/call-simpleTask/execution/output.txt"},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/basicTaskTest/d39269f3-1985-47c8-84df-c044ac944ac5","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-27T15:41:47.248Z","start":"2025-02-27T15:40:59.283Z","id":"d39269f3-1985-47c8-84df-c044ac944ac5","inputs":{"text":"Hello,
        World!"},"labels":{"cromwell-workflow-id":"cromwell-d39269f3-1985-47c8-84df-c044ac944ac5"},"submission":"2025-02-27T15:35:03.399Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:41:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3920'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/2bea14fb-d69e-4b3a-b81f-921eba321306/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:39.182Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1740670794.588081},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"11775796","backend":"gizmo","start":"2025-02-27T15:39:40.234Z","end":"2025-02-27T15:40:21.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:40.234Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:48.853Z"},{"startTime":"2025-02-27T15:39:48.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:48.854Z"},{"startTime":"2025-02-27T15:39:40.234Z","description":"Pending","endTime":"2025-02-27T15:39:40.234Z"},{"startTime":"2025-02-27T15:39:48.866Z","description":"RunningJob","endTime":"2025-02-27T15:40:20.946Z"},{"startTime":"2025-02-27T15:40:20.946Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:21.580Z"},{"startTime":"2025-02-27T15:39:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:48.866Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1740670794.588081,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"11775835","backend":"gizmo","start":"2025-02-27T15:40:23.074Z","end":"2025-02-27T15:41:03.569Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:23.074Z","description":"Pending","endTime":"2025-02-27T15:40:23.074Z"},{"startTime":"2025-02-27T15:40:23.074Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:40:28.853Z"},{"startTime":"2025-02-27T15:40:28.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:40:28.853Z"},{"startTime":"2025-02-27T15:40:28.859Z","description":"RunningJob","endTime":"2025-02-27T15:41:02.912Z"},{"startTime":"2025-02-27T15:40:28.853Z","description":"PreparingJob","endTime":"2025-02-27T15:40:28.859Z"},{"startTime":"2025-02-27T15:41:02.912Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:41:03.569Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1740670874.5623245},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"11775877","backend":"gizmo","start":"2025-02-27T15:41:04.894Z","end":"2025-02-27T15:41:46.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:41:08.863Z","description":"RunningJob","endTime":"2025-02-27T15:41:46.493Z"},{"startTime":"2025-02-27T15:41:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:41:08.863Z"},{"startTime":"2025-02-27T15:41:04.894Z","description":"Pending","endTime":"2025-02-27T15:41:04.894Z"},{"startTime":"2025-02-27T15:41:46.493Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:41:46.580Z"},{"startTime":"2025-02-27T15:41:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:41:08.854Z"},{"startTime":"2025-02-27T15:41:04.894Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:41:08.854Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime/execution/stdout","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7406708745623245E9 - 1.740670794588081E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1740670874.5623245,"start_time":1740670794.588081},"backend":"gizmo","attempt":1,"start":"2025-02-27T15:41:47.734Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:39.182Z","id":"2bea14fb-d69e-4b3a-b81f-921eba321306","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-2bea14fb-d69e-4b3a-b81f-921eba321306"},"submission":"2025-02-27T15:35:03.445Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:41:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12590'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/2bea14fb-d69e-4b3a-b81f-921eba321306/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:39.182Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1740670794.588081},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"11775796","backend":"gizmo","start":"2025-02-27T15:39:40.234Z","end":"2025-02-27T15:40:21.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:40.234Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:48.853Z"},{"startTime":"2025-02-27T15:39:48.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:48.854Z"},{"startTime":"2025-02-27T15:39:40.234Z","description":"Pending","endTime":"2025-02-27T15:39:40.234Z"},{"startTime":"2025-02-27T15:39:48.866Z","description":"RunningJob","endTime":"2025-02-27T15:40:20.946Z"},{"startTime":"2025-02-27T15:40:20.946Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:21.580Z"},{"startTime":"2025-02-27T15:39:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:48.866Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1740670794.588081,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"11775835","backend":"gizmo","start":"2025-02-27T15:40:23.074Z","end":"2025-02-27T15:41:03.569Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:23.074Z","description":"Pending","endTime":"2025-02-27T15:40:23.074Z"},{"startTime":"2025-02-27T15:40:23.074Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:40:28.853Z"},{"startTime":"2025-02-27T15:40:28.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:40:28.853Z"},{"startTime":"2025-02-27T15:40:28.859Z","description":"RunningJob","endTime":"2025-02-27T15:41:02.912Z"},{"startTime":"2025-02-27T15:40:28.853Z","description":"PreparingJob","endTime":"2025-02-27T15:40:28.859Z"},{"startTime":"2025-02-27T15:41:02.912Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:41:03.569Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1740670874.5623245},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"11775877","backend":"gizmo","start":"2025-02-27T15:41:04.894Z","end":"2025-02-27T15:41:46.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:41:08.863Z","description":"RunningJob","endTime":"2025-02-27T15:41:46.493Z"},{"startTime":"2025-02-27T15:41:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:41:08.863Z"},{"startTime":"2025-02-27T15:41:04.894Z","description":"Pending","endTime":"2025-02-27T15:41:04.894Z"},{"startTime":"2025-02-27T15:41:46.493Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:41:46.580Z"},{"startTime":"2025-02-27T15:41:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:41:08.854Z"},{"startTime":"2025-02-27T15:41:04.894Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:41:08.854Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7406708745623245E9 - 1.740670794588081E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1740670874.5623245,"start_time":1740670794.588081},"jobId":"11775890","backend":"gizmo","attempt":1,"start":"2025-02-27T15:41:47.734Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:39.182Z","id":"2bea14fb-d69e-4b3a-b81f-921eba321306","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-2bea14fb-d69e-4b3a-b81f-921eba321306"},"submission":"2025-02-27T15:35:03.445Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:41:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12635'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/2bea14fb-d69e-4b3a-b81f-921eba321306/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:39.182Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1740670794.588081},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"11775796","backend":"gizmo","start":"2025-02-27T15:39:40.234Z","end":"2025-02-27T15:40:21.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:40.234Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:48.853Z"},{"startTime":"2025-02-27T15:39:48.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:48.854Z"},{"startTime":"2025-02-27T15:39:40.234Z","description":"Pending","endTime":"2025-02-27T15:39:40.234Z"},{"startTime":"2025-02-27T15:39:48.866Z","description":"RunningJob","endTime":"2025-02-27T15:40:20.946Z"},{"startTime":"2025-02-27T15:40:20.946Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:21.580Z"},{"startTime":"2025-02-27T15:39:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:48.866Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1740670794.588081,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"11775835","backend":"gizmo","start":"2025-02-27T15:40:23.074Z","end":"2025-02-27T15:41:03.569Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:23.074Z","description":"Pending","endTime":"2025-02-27T15:40:23.074Z"},{"startTime":"2025-02-27T15:40:23.074Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:40:28.853Z"},{"startTime":"2025-02-27T15:40:28.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:40:28.853Z"},{"startTime":"2025-02-27T15:40:28.859Z","description":"RunningJob","endTime":"2025-02-27T15:41:02.912Z"},{"startTime":"2025-02-27T15:40:28.853Z","description":"PreparingJob","endTime":"2025-02-27T15:40:28.859Z"},{"startTime":"2025-02-27T15:41:02.912Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:41:03.569Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1740670874.5623245},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"11775877","backend":"gizmo","start":"2025-02-27T15:41:04.894Z","end":"2025-02-27T15:41:46.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:41:08.863Z","description":"RunningJob","endTime":"2025-02-27T15:41:46.493Z"},{"startTime":"2025-02-27T15:41:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:41:08.863Z"},{"startTime":"2025-02-27T15:41:04.894Z","description":"Pending","endTime":"2025-02-27T15:41:04.894Z"},{"startTime":"2025-02-27T15:41:46.493Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:41:46.580Z"},{"startTime":"2025-02-27T15:41:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:41:08.854Z"},{"startTime":"2025-02-27T15:41:04.894Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:41:08.854Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7406708745623245E9 - 1.740670794588081E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1740670874.5623245,"start_time":1740670794.588081},"jobId":"11775890","backend":"gizmo","attempt":1,"start":"2025-02-27T15:41:47.734Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:39.182Z","id":"2bea14fb-d69e-4b3a-b81f-921eba321306","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-2bea14fb-d69e-4b3a-b81f-921eba321306"},"submission":"2025-02-27T15:35:03.445Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:42:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12635'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/2bea14fb-d69e-4b3a-b81f-921eba321306/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:39.182Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1740670794.588081},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"11775796","backend":"gizmo","start":"2025-02-27T15:39:40.234Z","end":"2025-02-27T15:40:21.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:40.234Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:48.853Z"},{"startTime":"2025-02-27T15:39:48.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:48.854Z"},{"startTime":"2025-02-27T15:39:40.234Z","description":"Pending","endTime":"2025-02-27T15:39:40.234Z"},{"startTime":"2025-02-27T15:39:48.866Z","description":"RunningJob","endTime":"2025-02-27T15:40:20.946Z"},{"startTime":"2025-02-27T15:40:20.946Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:21.580Z"},{"startTime":"2025-02-27T15:39:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:48.866Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1740670794.588081,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"11775835","backend":"gizmo","start":"2025-02-27T15:40:23.074Z","end":"2025-02-27T15:41:03.569Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:23.074Z","description":"Pending","endTime":"2025-02-27T15:40:23.074Z"},{"startTime":"2025-02-27T15:40:23.074Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:40:28.853Z"},{"startTime":"2025-02-27T15:40:28.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:40:28.853Z"},{"startTime":"2025-02-27T15:40:28.859Z","description":"RunningJob","endTime":"2025-02-27T15:41:02.912Z"},{"startTime":"2025-02-27T15:40:28.853Z","description":"PreparingJob","endTime":"2025-02-27T15:40:28.859Z"},{"startTime":"2025-02-27T15:41:02.912Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:41:03.569Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1740670874.5623245},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"11775877","backend":"gizmo","start":"2025-02-27T15:41:04.894Z","end":"2025-02-27T15:41:46.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:41:08.863Z","description":"RunningJob","endTime":"2025-02-27T15:41:46.493Z"},{"startTime":"2025-02-27T15:41:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:41:08.863Z"},{"startTime":"2025-02-27T15:41:04.894Z","description":"Pending","endTime":"2025-02-27T15:41:04.894Z"},{"startTime":"2025-02-27T15:41:46.493Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:41:46.580Z"},{"startTime":"2025-02-27T15:41:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:41:08.854Z"},{"startTime":"2025-02-27T15:41:04.894Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:41:08.854Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7406708745623245E9 - 1.740670794588081E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1740670874.5623245,"start_time":1740670794.588081},"jobId":"11775890","backend":"gizmo","attempt":1,"start":"2025-02-27T15:41:47.734Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:39.182Z","id":"2bea14fb-d69e-4b3a-b81f-921eba321306","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-2bea14fb-d69e-4b3a-b81f-921eba321306"},"submission":"2025-02-27T15:35:03.445Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:42:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12635'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/2bea14fb-d69e-4b3a-b81f-921eba321306/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:39.182Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1740670794.588081},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"11775796","backend":"gizmo","start":"2025-02-27T15:39:40.234Z","end":"2025-02-27T15:40:21.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:40.234Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:48.853Z"},{"startTime":"2025-02-27T15:39:48.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:48.854Z"},{"startTime":"2025-02-27T15:39:40.234Z","description":"Pending","endTime":"2025-02-27T15:39:40.234Z"},{"startTime":"2025-02-27T15:39:48.866Z","description":"RunningJob","endTime":"2025-02-27T15:40:20.946Z"},{"startTime":"2025-02-27T15:40:20.946Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:21.580Z"},{"startTime":"2025-02-27T15:39:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:48.866Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1740670794.588081,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"11775835","backend":"gizmo","start":"2025-02-27T15:40:23.074Z","end":"2025-02-27T15:41:03.569Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:23.074Z","description":"Pending","endTime":"2025-02-27T15:40:23.074Z"},{"startTime":"2025-02-27T15:40:23.074Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:40:28.853Z"},{"startTime":"2025-02-27T15:40:28.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:40:28.853Z"},{"startTime":"2025-02-27T15:40:28.859Z","description":"RunningJob","endTime":"2025-02-27T15:41:02.912Z"},{"startTime":"2025-02-27T15:40:28.853Z","description":"PreparingJob","endTime":"2025-02-27T15:40:28.859Z"},{"startTime":"2025-02-27T15:41:02.912Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:41:03.569Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1740670874.5623245},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"11775877","backend":"gizmo","start":"2025-02-27T15:41:04.894Z","end":"2025-02-27T15:41:46.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:41:08.863Z","description":"RunningJob","endTime":"2025-02-27T15:41:46.493Z"},{"startTime":"2025-02-27T15:41:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:41:08.863Z"},{"startTime":"2025-02-27T15:41:04.894Z","description":"Pending","endTime":"2025-02-27T15:41:04.894Z"},{"startTime":"2025-02-27T15:41:46.493Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:41:46.580Z"},{"startTime":"2025-02-27T15:41:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:41:08.854Z"},{"startTime":"2025-02-27T15:41:04.894Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:41:08.854Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7406708745623245E9 - 1.740670794588081E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1740670874.5623245,"start_time":1740670794.588081},"jobId":"11775890","backend":"gizmo","attempt":1,"start":"2025-02-27T15:41:47.734Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:39.182Z","id":"2bea14fb-d69e-4b3a-b81f-921eba321306","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-2bea14fb-d69e-4b3a-b81f-921eba321306"},"submission":"2025-02-27T15:35:03.445Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:42:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12635'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/2bea14fb-d69e-4b3a-b81f-921eba321306/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:39.182Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1740670794.588081},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"11775796","backend":"gizmo","start":"2025-02-27T15:39:40.234Z","end":"2025-02-27T15:40:21.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:40.234Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:48.853Z"},{"startTime":"2025-02-27T15:39:48.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:48.854Z"},{"startTime":"2025-02-27T15:39:40.234Z","description":"Pending","endTime":"2025-02-27T15:39:40.234Z"},{"startTime":"2025-02-27T15:39:48.866Z","description":"RunningJob","endTime":"2025-02-27T15:40:20.946Z"},{"startTime":"2025-02-27T15:40:20.946Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:21.580Z"},{"startTime":"2025-02-27T15:39:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:48.866Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1740670794.588081,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"11775835","backend":"gizmo","start":"2025-02-27T15:40:23.074Z","end":"2025-02-27T15:41:03.569Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:23.074Z","description":"Pending","endTime":"2025-02-27T15:40:23.074Z"},{"startTime":"2025-02-27T15:40:23.074Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:40:28.853Z"},{"startTime":"2025-02-27T15:40:28.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:40:28.853Z"},{"startTime":"2025-02-27T15:40:28.859Z","description":"RunningJob","endTime":"2025-02-27T15:41:02.912Z"},{"startTime":"2025-02-27T15:40:28.853Z","description":"PreparingJob","endTime":"2025-02-27T15:40:28.859Z"},{"startTime":"2025-02-27T15:41:02.912Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:41:03.569Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1740670874.5623245},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"11775877","backend":"gizmo","start":"2025-02-27T15:41:04.894Z","end":"2025-02-27T15:41:46.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:41:08.863Z","description":"RunningJob","endTime":"2025-02-27T15:41:46.493Z"},{"startTime":"2025-02-27T15:41:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:41:08.863Z"},{"startTime":"2025-02-27T15:41:04.894Z","description":"Pending","endTime":"2025-02-27T15:41:04.894Z"},{"startTime":"2025-02-27T15:41:46.493Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:41:46.580Z"},{"startTime":"2025-02-27T15:41:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:41:08.854Z"},{"startTime":"2025-02-27T15:41:04.894Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:41:08.854Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime/execution/stdout","backendStatus":"Running","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7406708745623245E9 - 1.740670794588081E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1740670874.5623245,"start_time":1740670794.588081},"jobId":"11775890","backend":"gizmo","attempt":1,"start":"2025-02-27T15:41:47.734Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-02-27T15:39:39.182Z","id":"2bea14fb-d69e-4b3a-b81f-921eba321306","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-2bea14fb-d69e-4b3a-b81f-921eba321306"},"submission":"2025-02-27T15:35:03.445Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:42:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12635'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok92.fhcrc.org:38409
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok92.fhcrc.org:38409/api/workflows/v1/2bea14fb-d69e-4b3a-b81f-921eba321306/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"HelloDockerHostname","workflowProcessingEvents":[{"cromwellId":"cromid-2f25be4","description":"PickedUp","timestamp":"2025-02-27T15:39:39.182Z","cromwellVersion":"87"},{"cromwellId":"cromid-2f25be4","description":"Finished","timestamp":"2025-02-27T15:42:22.416Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This is a test workflow that returns the Docker image name and tag\n##
        and measures execution time of the Hostname task.\n\n#### WORKFLOW DEFINITION\n\nworkflow
        HelloDockerHostname {\n  input {\n    String docker_image = \"ubuntu:20.04\"  #
        Default value but can be overridden\n  }\n\n  call GetStartTime\n\n  call
        Hostname {\n    input:\n      expected_image = docker_image,\n      start_time
        = GetStartTime.timestamp  # Add dependency on start time\n  }\n\n  call GetEndTime
        {\n    input:\n      hostname_done = Hostname.out  # Add dependency on Hostname
        completion\n  }\n\n  call ValidateExecutionTime {\n    input:\n      start_time
        = GetStartTime.timestamp,\n      end_time = GetEndTime.timestamp\n  }\n\n  output
        {\n    File stdout = Hostname.out\n    Float execution_time_seconds = ValidateExecutionTime.duration_seconds\n    Boolean
        within_time_limit = ValidateExecutionTime.within_limit\n  }\n\n  parameter_meta
        {\n    docker_image: \"Docker image to run the task in (e.g. ubuntu:latest)\"\n  }\n}\n\n####
        TASK DEFINITIONS\n\ntask GetStartTime {\n  command <<<\n    date +%s.%N\n  >>>\n\n  output
        {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask GetEndTime
        {\n  input {\n    File hostname_done  # Add dependency on Hostname completion\n  }\n\n  command
        <<<\n    date +%s.%N\n  >>>\n\n  output {\n    Float timestamp = read_float(stdout())\n  }\n\n  runtime
        {\n    docker: \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask
        ValidateExecutionTime {\n  input {\n    Float start_time\n    Float end_time\n  }\n\n  command
        <<<\n    # Calculate duration using awk for floating point arithmetic\n    duration=$(awk
        \"BEGIN {print ~{end_time} - ~{start_time}}\")\n    echo \"$duration\" > duration.txt\n    \n    #
        Check if duration is less than 120 seconds (2 minutes)\n    awk -v dur=\"$duration\"
        ''BEGIN {if (dur < 120) exit 0; exit 1}''\n    if [ $? -eq 0 ]; then\n      echo
        \"true\" > within_limit.txt\n    else\n      echo \"false\" > within_limit.txt\n    fi\n  >>>\n\n  output
        {\n    Float duration_seconds = read_float(\"duration.txt\")\n    Boolean
        within_limit = read_boolean(\"within_limit.txt\")\n  }\n\n  runtime {\n    docker:
        \"ubuntu:20.04\"\n    cpu: 1\n    memory: \"1 GB\"\n  }\n}\n\ntask Hostname
        {\n  input {\n    String expected_image\n    Float start_time  # Add start_time
        as input to create dependency\n  }\n\n  command <<<\n    # Split expected
        image into name and tag\n    EXPECTED_IMAGE_NAME=$(echo \"~{expected_image}\"
        | cut -d'':'' -f1)\n    EXPECTED_TAG=$(echo \"~{expected_image}\" | cut -d'':''
        -f2)\n\n    # Get current image info\n    CURRENT_IMAGE=$(grep \"ID=\" /etc/os-release
        | head -n1 | cut -d''='' -f2)\n    CURRENT_VERSION=$(grep \"VERSION_ID=\"
        /etc/os-release | cut -d''\"'' -f2)\n\n    # Compare image name\n    if [[
        \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\" ]]; then\n      echo \"Error:
        Expected Docker image $EXPECTED_IMAGE_NAME but got: $CURRENT_IMAGE\"\n      exit
        1\n    fi\n\n    # Compare version/tag\n    if [[ \"$CURRENT_VERSION\" !=
        \"$EXPECTED_TAG\" ]]; then\n      echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n      exit 1\n    fi\n\n    echo \"Verified Docker
        Image: $CURRENT_IMAGE:$CURRENT_VERSION\"\n    echo \"Expected Image: ~{expected_image}\"\n    echo
        \"Hostname: $(hostname)\"\n  >>>\n\n  output {\n    File out = stdout()\n  }\n\n  runtime
        {\n    cpu: 1\n    memory: \"1 GB\"\n    docker: \"~{expected_image}\"\n  }\n\n  parameter_meta
        {\n    expected_image: \"Docker image that should be running this task\"\n  }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"HelloDockerHostname.docker_image\":\"ubuntu:20.04\"}","workflowUrl":"","labels":"{}"},"calls":{"HelloDockerHostname.GetStartTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1740670794.588081},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"11775796","backend":"gizmo","start":"2025-02-27T15:39:40.234Z","end":"2025-02-27T15:40:21.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetStartTime","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:39:40.234Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:39:48.853Z"},{"startTime":"2025-02-27T15:39:48.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:39:48.854Z"},{"startTime":"2025-02-27T15:39:40.234Z","description":"Pending","endTime":"2025-02-27T15:39:40.234Z"},{"startTime":"2025-02-27T15:39:48.866Z","description":"RunningJob","endTime":"2025-02-27T15:40:20.946Z"},{"startTime":"2025-02-27T15:40:20.946Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:40:21.580Z"},{"startTime":"2025-02-27T15:39:48.854Z","description":"PreparingJob","endTime":"2025-02-27T15:39:48.866Z"}]}],"HelloDockerHostname.Hostname":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout","backendStatus":"Done","commandLine":"#
        Split expected image into name and tag\nEXPECTED_IMAGE_NAME=$(echo \"ubuntu:20.04\"
        | cut -d'':'' -f1)\nEXPECTED_TAG=$(echo \"ubuntu:20.04\" | cut -d'':'' -f2)\n\n#
        Get current image info\nCURRENT_IMAGE=$(grep \"ID=\" /etc/os-release | head
        -n1 | cut -d''='' -f2)\nCURRENT_VERSION=$(grep \"VERSION_ID=\" /etc/os-release
        | cut -d''\"'' -f2)\n\n# Compare image name\nif [[ \"$CURRENT_IMAGE\" != \"$EXPECTED_IMAGE_NAME\"
        ]]; then\n  echo \"Error: Expected Docker image $EXPECTED_IMAGE_NAME but got:
        $CURRENT_IMAGE\"\n  exit 1\nfi\n\n# Compare version/tag\nif [[ \"$CURRENT_VERSION\"
        != \"$EXPECTED_TAG\" ]]; then\n  echo \"Error: Expected version $EXPECTED_TAG
        but got: $CURRENT_VERSION\"\n  exit 1\nfi\n\necho \"Verified Docker Image:
        $CURRENT_IMAGE:$CURRENT_VERSION\"\necho \"Expected Image: ubuntu:20.04\"\necho
        \"Hostname: $(hostname)\"","shardIndex":-1,"outputs":{"out":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"start_time":1740670794.588081,"expected_image":"ubuntu:20.04"},"returnCode":0,"jobId":"11775835","backend":"gizmo","start":"2025-02-27T15:40:23.074Z","end":"2025-02-27T15:41:03.569Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:40:23.074Z","description":"Pending","endTime":"2025-02-27T15:40:23.074Z"},{"startTime":"2025-02-27T15:40:23.074Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:40:28.853Z"},{"startTime":"2025-02-27T15:40:28.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:40:28.853Z"},{"startTime":"2025-02-27T15:40:28.859Z","description":"RunningJob","endTime":"2025-02-27T15:41:02.912Z"},{"startTime":"2025-02-27T15:40:28.853Z","description":"PreparingJob","endTime":"2025-02-27T15:40:28.859Z"},{"startTime":"2025-02-27T15:41:02.912Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:41:03.569Z"}]}],"HelloDockerHostname.GetEndTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime/execution/stdout","backendStatus":"Done","commandLine":"date
        +%s.%N","shardIndex":-1,"outputs":{"timestamp":1740670874.5623245},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"hostname_done":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout"},"returnCode":0,"jobId":"11775877","backend":"gizmo","start":"2025-02-27T15:41:04.894Z","end":"2025-02-27T15:41:46.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-GetEndTime","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:41:08.863Z","description":"RunningJob","endTime":"2025-02-27T15:41:46.493Z"},{"startTime":"2025-02-27T15:41:08.854Z","description":"PreparingJob","endTime":"2025-02-27T15:41:08.863Z"},{"startTime":"2025-02-27T15:41:04.894Z","description":"Pending","endTime":"2025-02-27T15:41:04.894Z"},{"startTime":"2025-02-27T15:41:46.493Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:41:46.580Z"},{"startTime":"2025-02-27T15:41:08.854Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:41:08.854Z"},{"startTime":"2025-02-27T15:41:04.894Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:41:08.854Z"}]}],"HelloDockerHostname.ValidateExecutionTime":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime/execution/stdout","backendStatus":"Done","commandLine":"#
        Calculate duration using awk for floating point arithmetic\nduration=$(awk
        \"BEGIN {print 1.7406708745623245E9 - 1.740670794588081E9}\")\necho \"$duration\"
        > duration.txt\n\n# Check if duration is less than 120 seconds (2 minutes)\nawk
        -v dur=\"$duration\" ''BEGIN {if (dur < 120) exit 0; exit 1}''\nif [ $? -eq
        0 ]; then\n  echo \"true\" > within_limit.txt\nelse\n  echo \"false\" > within_limit.txt\nfi","shardIndex":-1,"outputs":{"within_limit":true,"duration_seconds":79.9742},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:20.04","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"end_time":1740670874.5623245,"start_time":1740670794.588081},"returnCode":0,"jobId":"11775890","backend":"gizmo","start":"2025-02-27T15:41:47.734Z","end":"2025-02-27T15:42:20.580Z","dockerImageUsed":"ubuntu@sha256:8e5c4f0285ecbb4ead070431d29b576a530d3166df73ec44affc1cd27555141b","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-ValidateExecutionTime","attempt":1,"executionEvents":[{"startTime":"2025-02-27T15:41:48.853Z","description":"PreparingJob","endTime":"2025-02-27T15:41:48.859Z"},{"startTime":"2025-02-27T15:41:48.853Z","description":"WaitingForValueStore","endTime":"2025-02-27T15:41:48.853Z"},{"startTime":"2025-02-27T15:41:47.734Z","description":"RequestingExecutionToken","endTime":"2025-02-27T15:41:48.853Z"},{"startTime":"2025-02-27T15:42:20.279Z","description":"UpdatingJobStore","endTime":"2025-02-27T15:42:20.580Z"},{"startTime":"2025-02-27T15:41:48.859Z","description":"RunningJob","endTime":"2025-02-27T15:42:20.279Z"},{"startTime":"2025-02-27T15:41:47.734Z","description":"Pending","endTime":"2025-02-27T15:41:47.734Z"}]}]},"outputs":{"HelloDockerHostname.stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306/call-Hostname/execution/stdout","HelloDockerHostname.execution_time_seconds":79.9742,"HelloDockerHostname.within_time_limit":true},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/HelloDockerHostname/2bea14fb-d69e-4b3a-b81f-921eba321306","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-02-27T15:42:22.416Z","start":"2025-02-27T15:39:39.182Z","id":"2bea14fb-d69e-4b3a-b81f-921eba321306","inputs":{"docker_image":"ubuntu:20.04"},"labels":{"cromwell-workflow-id":"cromwell-2bea14fb-d69e-4b3a-b81f-921eba321306"},"submission":"2025-02-27T15:35:03.445Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Thu, 27 Feb 2025 15:42:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '13937'
    status:
      code: 200
      message: OK
version: 1
