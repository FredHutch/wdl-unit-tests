interactions:
- request:
    body: "--07108a180b4b634eba81ad382c29ecf3\r\nContent-Disposition: form-data; name=\"workflowSource\";
      filename=\"structTypeTest.wdl\"\r\nContent-Type: application/octet-stream\r\n\r\nversion
      1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
      1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in the
      workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing metadata\nstruct
      SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n#
      Nested struct for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n
      \   Float? gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested
      structures and optional fields\nstruct SampleInfo {\n    String name\n    String?
      type\n    Int? read_length\n    String? library_prep\n    SequencingInfo sequencing\n
      \   QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example
      {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
      (sample_info in sample_information) {\n        SampleInfo processed_sample =
      object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
      \"normal\"]),\n            read_length: select_first([sample_info.read_length,
      100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
      sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n
      \       call process_sample {\n            input:\n                sample =
      processed_sample\n        }\n    }\n}\n\n#### TASK DEFINITIONS\n\ntask process_sample
      {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
      \"Processing ~{sample.name} (~{sample.type})\"\n        echo \"Read Length:
      ~{sample.read_length}\"\n        echo \"Sequencing Platform: ~{sample.sequencing.platform}\"\n
      \       echo \"Flowcell ID: ~{select_first([sample.sequencing.flowcell_id, 'N/A'])}\"\n
      \       echo \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n
      \       echo \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo
      \"GC Content: ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo
      \"Duplicate Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
      \"Library Prep: ~{select_first([sample.library_prep, 'Standard'])}\"\n    >>>\n\n
      \   output {\n        String message = read_string(stdout())\n    }\n\n    runtime
      {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\r\n--07108a180b4b634eba81ad382c29ecf3\r\nContent-Disposition:
      form-data; name=\"workflowInputs\"; filename=\"inputs.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"struct_example.sample_information\": [\n        {\n
      \           \"name\": \"sample1\",\n            \"sequencing\": {\n                \"platform\":
      \"NovaSeq\",\n                \"flowcell_id\": \"H5K5YDSXX\",\n                \"lane_number\":
      1\n            },\n            \"metrics\": {\n                \"quality_score\":
      95.5,\n                \"gc_content\": 45.2,\n                \"duplicate_rate\":
      2\n            }\n        },\n        {\n            \"name\": \"sample2\",\n
      \           \"type\": \"tumor\",\n            \"read_length\": 150,\n            \"library_prep\":
      \"PCR-free\",\n            \"sequencing\": {\n                \"platform\":
      \"NovaSeq\"\n            },\n            \"metrics\": {\n                \"quality_score\":
      92.3\n            }\n        }\n    ]\n}\n\r\n--07108a180b4b634eba81ad382c29ecf3\r\nContent-Disposition:
      form-data; name=\"workflowOptions\"; filename=\"options.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"workflow_failure_mode\": \"ContinueWhilePossible\",\n
      \   \"write_to_cache\": false,\n    \"read_from_cache\": false\n}\n\r\n--07108a180b4b634eba81ad382c29ecf3--\r\n"
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3561'
      content-type:
      - multipart/form-data; boundary=07108a180b4b634eba81ad382c29ecf3
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: POST
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1
  response:
    body:
      string: '{"id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","status":"Submitted"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '66'
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:25:14 GMT
      Server:
      - nginx/1.25.3
    status:
      code: 201
      message: Created
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:25:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:25:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:25:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:25:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:25:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:25:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:25:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:25:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:25:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:26:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:26:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:26:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:26:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:26:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:26:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:26:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:26:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:26:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:26:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:26:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:27:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:27:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:27:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:27:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:27:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:27:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:27:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:27:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:27:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:27:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:27:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:27:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:28:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:28:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:28:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:28:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:28:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:28:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:28:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:28:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:28:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:28:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:28:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:28:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:29:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:29:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:29:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:29:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:29:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:29:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:29:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:29:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:29:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:29:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:29:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:29:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:30:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:30:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:30:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:30:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:30:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:30:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:30:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:30:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:30:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:30:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:30:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:30:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:31:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:31:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:31:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:31:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:31:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:31:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:31:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:31:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:31:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:31:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:31:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:31:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:32:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:32:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:32:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:32:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:32:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:32:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:32:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:32:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:32:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:32:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:32:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:33:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:33:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:33:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:33:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:33:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:33:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:33:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:33:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:33:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:33:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:33:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:33:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:34:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:34:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:34:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:34:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:34:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:34:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:34:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:34:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:34:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:34:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:34:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:34:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:35:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:35:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:35:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:35:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:35:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:35:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:35:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:35:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:35:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:35:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:35:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:35:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:36:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:36:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:36:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:36:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:36:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:36:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:36:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:36:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:36:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:36:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:36:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:36:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:37:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:37:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:37:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:37:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:37:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:37:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:37:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:37:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:37:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:37:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:37:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:37:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:38:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:38:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:38:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:38:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:38:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:38:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:38:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:38:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\n## This workflow demonstrates
        advanced struct features in WDL including:\n## 1. Optional fields\n## 2. Nested
        structs\n## 3. Default values (handled in the workflow)\n\n#### STRUCT DEFINITIONS\n\n#
        Nested struct for sequencing metadata\nstruct SequencingInfo {\n    String
        platform\n    String? flowcell_id\n    Int? lane_number\n}\n\n# Nested struct
        for quality metrics\nstruct QualityMetrics {\n    Float quality_score\n    Float?
        gc_content\n    Int? duplicate_rate\n}\n\n# Main struct with nested structures
        and optional fields\nstruct SampleInfo {\n    String name\n    String? type\n    Int?
        read_length\n    String? library_prep\n    SequencingInfo sequencing\n    QualityMetrics
        metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow struct_example {\n    input
        {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter (sample_info
        in sample_information) {\n        SampleInfo processed_sample = object {\n            name:
        sample_info.name,\n            type: select_first([sample_info.type, \"normal\"]),\n            read_length:
        select_first([sample_info.read_length, 100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:38:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3166'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-32c4e56","description":"PickedUp","timestamp":"2025-04-09T17:38:43.101Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-04-09T17:38:43.102Z","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:38:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4035'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-32c4e56","description":"PickedUp","timestamp":"2025-04-09T17:38:43.101Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{"struct_example.process_sample":[{"executionStatus":"QueuedInCromwell","shardIndex":0,"backend":"gizmo","attempt":1,"start":"2025-04-09T17:38:48.235Z"},{"executionStatus":"QueuedInCromwell","shardIndex":1,"backend":"gizmo","attempt":1,"start":"2025-04-09T17:38:48.235Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-04-09T17:38:43.102Z","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:38:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4306'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-32c4e56","description":"PickedUp","timestamp":"2025-04-09T17:38:43.101Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{"struct_example.process_sample":[{"executionStatus":"QueuedInCromwell","shardIndex":0,"backend":"gizmo","attempt":1,"start":"2025-04-09T17:38:48.235Z"},{"executionStatus":"QueuedInCromwell","shardIndex":1,"backend":"gizmo","attempt":1,"start":"2025-04-09T17:38:48.235Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-04-09T17:38:43.102Z","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:39:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4306'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-32c4e56","description":"PickedUp","timestamp":"2025-04-09T17:38:43.101Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{"struct_example.process_sample":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0/execution/stdout","commandLine":"echo
        \"Processing sample1 (normal)\"\necho \"Read Length: 100\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: H5K5YDSXX\"\necho \"Lane Number:
        1\"\necho \"Quality Score: 95.5\"\necho \"GC Content: 45.2\"\necho \"Duplicate
        Rate: 2%\"\necho \"Library Prep: Standard\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":"normal","library_prep":null,"read_length":100}},"backend":"gizmo","attempt":1,"start":"2025-04-09T17:38:48.235Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1/execution/stdout","commandLine":"echo
        \"Processing sample2 (tumor)\"\necho \"Read Length: 150\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: N/A\"\necho \"Lane Number: -1\"\necho
        \"Quality Score: 92.3\"\necho \"GC Content: 0.0\"\necho \"Duplicate Rate:
        0%\"\necho \"Library Prep: PCR-free\"","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}},"backend":"gizmo","attempt":1,"start":"2025-04-09T17:38:48.235Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-04-09T17:38:43.102Z","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:39:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '6877'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-32c4e56","description":"PickedUp","timestamp":"2025-04-09T17:38:43.101Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{"struct_example.process_sample":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample1 (normal)\"\necho \"Read Length: 100\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: H5K5YDSXX\"\necho \"Lane Number:
        1\"\necho \"Quality Score: 95.5\"\necho \"GC Content: 45.2\"\necho \"Duplicate
        Rate: 2%\"\necho \"Library Prep: Standard\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":"normal","library_prep":null,"read_length":100}},"jobId":"17853389","backend":"gizmo","attempt":1,"start":"2025-04-09T17:38:48.235Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample2 (tumor)\"\necho \"Read Length: 150\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: N/A\"\necho \"Lane Number: -1\"\necho
        \"Quality Score: 92.3\"\necho \"GC Content: 0.0\"\necho \"Duplicate Rate:
        0%\"\necho \"Library Prep: PCR-free\"","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}},"jobId":"17853390","backend":"gizmo","attempt":1,"start":"2025-04-09T17:38:48.235Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-04-09T17:38:43.102Z","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:39:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '6967'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-32c4e56","description":"PickedUp","timestamp":"2025-04-09T17:38:43.101Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{"struct_example.process_sample":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample1 (normal)\"\necho \"Read Length: 100\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: H5K5YDSXX\"\necho \"Lane Number:
        1\"\necho \"Quality Score: 95.5\"\necho \"GC Content: 45.2\"\necho \"Duplicate
        Rate: 2%\"\necho \"Library Prep: Standard\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":"normal","library_prep":null,"read_length":100}},"jobId":"17853389","backend":"gizmo","attempt":1,"start":"2025-04-09T17:38:48.235Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample2 (tumor)\"\necho \"Read Length: 150\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: N/A\"\necho \"Lane Number: -1\"\necho
        \"Quality Score: 92.3\"\necho \"GC Content: 0.0\"\necho \"Duplicate Rate:
        0%\"\necho \"Library Prep: PCR-free\"","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}},"jobId":"17853390","backend":"gizmo","attempt":1,"start":"2025-04-09T17:38:48.235Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-04-09T17:38:43.102Z","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:39:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '6967'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-32c4e56","description":"PickedUp","timestamp":"2025-04-09T17:38:43.101Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{"struct_example.process_sample":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample1 (normal)\"\necho \"Read Length: 100\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: H5K5YDSXX\"\necho \"Lane Number:
        1\"\necho \"Quality Score: 95.5\"\necho \"GC Content: 45.2\"\necho \"Duplicate
        Rate: 2%\"\necho \"Library Prep: Standard\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":"normal","library_prep":null,"read_length":100}},"jobId":"17853389","backend":"gizmo","attempt":1,"start":"2025-04-09T17:38:48.235Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample2 (tumor)\"\necho \"Read Length: 150\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: N/A\"\necho \"Lane Number: -1\"\necho
        \"Quality Score: 92.3\"\necho \"GC Content: 0.0\"\necho \"Duplicate Rate:
        0%\"\necho \"Library Prep: PCR-free\"","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}},"jobId":"17853390","backend":"gizmo","attempt":1,"start":"2025-04-09T17:38:48.235Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-04-09T17:38:43.102Z","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:39:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '6967'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-32c4e56","description":"PickedUp","timestamp":"2025-04-09T17:38:43.101Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{"struct_example.process_sample":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample1 (normal)\"\necho \"Read Length: 100\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: H5K5YDSXX\"\necho \"Lane Number:
        1\"\necho \"Quality Score: 95.5\"\necho \"GC Content: 45.2\"\necho \"Duplicate
        Rate: 2%\"\necho \"Library Prep: Standard\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":"normal","library_prep":null,"read_length":100}},"jobId":"17853389","backend":"gizmo","attempt":1,"start":"2025-04-09T17:38:48.235Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample2 (tumor)\"\necho \"Read Length: 150\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: N/A\"\necho \"Lane Number: -1\"\necho
        \"Quality Score: 92.3\"\necho \"GC Content: 0.0\"\necho \"Duplicate Rate:
        0%\"\necho \"Library Prep: PCR-free\"","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}},"jobId":"17853390","backend":"gizmo","attempt":1,"start":"2025-04-09T17:38:48.235Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-04-09T17:38:43.102Z","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:39:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '6967'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-32c4e56","description":"PickedUp","timestamp":"2025-04-09T17:38:43.101Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{"struct_example.process_sample":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample1 (normal)\"\necho \"Read Length: 100\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: H5K5YDSXX\"\necho \"Lane Number:
        1\"\necho \"Quality Score: 95.5\"\necho \"GC Content: 45.2\"\necho \"Duplicate
        Rate: 2%\"\necho \"Library Prep: Standard\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":"normal","library_prep":null,"read_length":100}},"jobId":"17853389","backend":"gizmo","attempt":1,"start":"2025-04-09T17:38:48.235Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample2 (tumor)\"\necho \"Read Length: 150\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: N/A\"\necho \"Lane Number: -1\"\necho
        \"Quality Score: 92.3\"\necho \"GC Content: 0.0\"\necho \"Duplicate Rate:
        0%\"\necho \"Library Prep: PCR-free\"","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}},"jobId":"17853390","backend":"gizmo","attempt":1,"start":"2025-04-09T17:38:48.235Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-04-09T17:38:43.102Z","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:39:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '6967'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-32c4e56","description":"PickedUp","timestamp":"2025-04-09T17:38:43.101Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{"struct_example.process_sample":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal)\"\necho \"Read Length: 100\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: H5K5YDSXX\"\necho \"Lane Number:
        1\"\necho \"Quality Score: 95.5\"\necho \"GC Content: 45.2\"\necho \"Duplicate
        Rate: 2%\"\necho \"Library Prep: Standard\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal)\nRead Length: 100\nSequencing Platform: NovaSeq\nFlowcell
        ID: H5K5YDSXX\nLane Number: 1\nQuality Score: 95.5\nGC Content: 45.2\nDuplicate
        Rate: 2%\nLibrary Prep: Standard"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":"normal","library_prep":null,"read_length":100}},"returnCode":0,"jobId":"17853389","backend":"gizmo","start":"2025-04-09T17:38:48.235Z","end":"2025-04-09T17:39:30.388Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-04-09T17:38:48.235Z","description":"RequestingExecutionToken","endTime":"2025-04-09T17:38:56.942Z"},{"startTime":"2025-04-09T17:39:29.662Z","description":"UpdatingJobStore","endTime":"2025-04-09T17:39:30.388Z"},{"startTime":"2025-04-09T17:38:56.942Z","description":"WaitingForValueStore","endTime":"2025-04-09T17:38:56.942Z"},{"startTime":"2025-04-09T17:38:56.954Z","description":"RunningJob","endTime":"2025-04-09T17:39:29.662Z"},{"startTime":"2025-04-09T17:38:48.235Z","description":"Pending","endTime":"2025-04-09T17:38:48.235Z"},{"startTime":"2025-04-09T17:38:56.942Z","description":"PreparingJob","endTime":"2025-04-09T17:38:56.954Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor)\"\necho \"Read Length: 150\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: N/A\"\necho \"Lane Number: -1\"\necho
        \"Quality Score: 92.3\"\necho \"GC Content: 0.0\"\necho \"Duplicate Rate:
        0%\"\necho \"Library Prep: PCR-free\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor)\nRead Length: 150\nSequencing Platform: NovaSeq\nFlowcell
        ID: N/A\nLane Number: -1\nQuality Score: 92.3\nGC Content: 0.0\nDuplicate
        Rate: 0%\nLibrary Prep: PCR-free"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}},"returnCode":0,"jobId":"17853390","backend":"gizmo","start":"2025-04-09T17:38:48.235Z","end":"2025-04-09T17:39:29.387Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-04-09T17:38:56.959Z","description":"RunningJob","endTime":"2025-04-09T17:39:28.722Z"},{"startTime":"2025-04-09T17:38:48.235Z","description":"Pending","endTime":"2025-04-09T17:38:48.235Z"},{"startTime":"2025-04-09T17:38:56.942Z","description":"WaitingForValueStore","endTime":"2025-04-09T17:38:56.942Z"},{"startTime":"2025-04-09T17:38:56.942Z","description":"PreparingJob","endTime":"2025-04-09T17:38:56.959Z"},{"startTime":"2025-04-09T17:38:48.235Z","description":"RequestingExecutionToken","endTime":"2025-04-09T17:38:56.942Z"},{"startTime":"2025-04-09T17:39:28.722Z","description":"UpdatingJobStore","endTime":"2025-04-09T17:39:29.387Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-04-09T17:38:43.102Z","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:39:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '9046'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok37.fhcrc.org:44649
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok37.fhcrc.org:44649/api/workflows/v1/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"struct_example","workflowProcessingEvents":[{"cromwellId":"cromid-32c4e56","description":"PickedUp","timestamp":"2025-04-09T17:38:43.101Z","cromwellVersion":"87"},{"cromwellId":"cromid-32c4e56","description":"Finished","timestamp":"2025-04-09T17:39:32.096Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\n## This workflow demonstrates advanced struct features in WDL including:\n##
        1. Optional fields\n## 2. Nested structs\n## 3. Default values (handled in
        the workflow)\n\n#### STRUCT DEFINITIONS\n\n# Nested struct for sequencing
        metadata\nstruct SequencingInfo {\n    String platform\n    String? flowcell_id\n    Int?
        lane_number\n}\n\n# Nested struct for quality metrics\nstruct QualityMetrics
        {\n    Float quality_score\n    Float? gc_content\n    Int? duplicate_rate\n}\n\n#
        Main struct with nested structures and optional fields\nstruct SampleInfo
        {\n    String name\n    String? type\n    Int? read_length\n    String? library_prep\n    SequencingInfo
        sequencing\n    QualityMetrics metrics\n}\n\n#### WORKFLOW DEFINITION\n\nworkflow
        struct_example {\n    input {\n        Array[SampleInfo] sample_information\n    }\n\n    scatter
        (sample_info in sample_information) {\n        SampleInfo processed_sample
        = object {\n            name: sample_info.name,\n            type: select_first([sample_info.type,
        \"normal\"]),\n            read_length: select_first([sample_info.read_length,
        100]),\n            library_prep: sample_info.library_prep,\n            sequencing:
        sample_info.sequencing,\n            metrics: sample_info.metrics\n        }\n\n        call
        process_sample {\n            input:\n                sample = processed_sample\n        }\n    }\n}\n\n####
        TASK DEFINITIONS\n\ntask process_sample {\n    input {\n        SampleInfo
        sample\n    }\n\n    command <<<\n        echo \"Processing ~{sample.name}
        (~{sample.type})\"\n        echo \"Read Length: ~{sample.read_length}\"\n        echo
        \"Sequencing Platform: ~{sample.sequencing.platform}\"\n        echo \"Flowcell
        ID: ~{select_first([sample.sequencing.flowcell_id, ''N/A''])}\"\n        echo
        \"Lane Number: ~{select_first([sample.sequencing.lane_number, -1])}\"\n        echo
        \"Quality Score: ~{sample.metrics.quality_score}\"\n        echo \"GC Content:
        ~{select_first([sample.metrics.gc_content, 0])}\"\n        echo \"Duplicate
        Rate: ~{select_first([sample.metrics.duplicate_rate, 0])}%\"\n        echo
        \"Library Prep: ~{select_first([sample.library_prep, ''Standard''])}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"struct_example.sample_information\":[{\"metrics\":{\"duplicate_rate\":2,\"gc_content\":45.2,\"quality_score\":95.5},\"name\":\"sample1\",\"sequencing\":{\"flowcell_id\":\"H5K5YDSXX\",\"lane_number\":1,\"platform\":\"NovaSeq\"}},{\"library_prep\":\"PCR-free\",\"metrics\":{\"quality_score\":92.3},\"name\":\"sample2\",\"read_length\":150,\"sequencing\":{\"platform\":\"NovaSeq\"},\"type\":\"tumor\"}]}","workflowUrl":"","labels":"{}"},"calls":{"struct_example.process_sample":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal)\"\necho \"Read Length: 100\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: H5K5YDSXX\"\necho \"Lane Number:
        1\"\necho \"Quality Score: 95.5\"\necho \"GC Content: 45.2\"\necho \"Duplicate
        Rate: 2%\"\necho \"Library Prep: Standard\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal)\nRead Length: 100\nSequencing Platform: NovaSeq\nFlowcell
        ID: H5K5YDSXX\nLane Number: 1\nQuality Score: 95.5\nGC Content: 45.2\nDuplicate
        Rate: 2%\nLibrary Prep: Standard"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":"normal","library_prep":null,"read_length":100}},"returnCode":0,"jobId":"17853389","backend":"gizmo","start":"2025-04-09T17:38:48.235Z","end":"2025-04-09T17:39:30.388Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-04-09T17:38:48.235Z","description":"RequestingExecutionToken","endTime":"2025-04-09T17:38:56.942Z"},{"startTime":"2025-04-09T17:39:29.662Z","description":"UpdatingJobStore","endTime":"2025-04-09T17:39:30.388Z"},{"startTime":"2025-04-09T17:38:56.942Z","description":"WaitingForValueStore","endTime":"2025-04-09T17:38:56.942Z"},{"startTime":"2025-04-09T17:38:56.954Z","description":"RunningJob","endTime":"2025-04-09T17:39:29.662Z"},{"startTime":"2025-04-09T17:38:48.235Z","description":"Pending","endTime":"2025-04-09T17:38:48.235Z"},{"startTime":"2025-04-09T17:38:56.942Z","description":"PreparingJob","endTime":"2025-04-09T17:38:56.954Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor)\"\necho \"Read Length: 150\"\necho \"Sequencing
        Platform: NovaSeq\"\necho \"Flowcell ID: N/A\"\necho \"Lane Number: -1\"\necho
        \"Quality Score: 92.3\"\necho \"GC Content: 0.0\"\necho \"Duplicate Rate:
        0%\"\necho \"Library Prep: PCR-free\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor)\nRead Length: 150\nSequencing Platform: NovaSeq\nFlowcell
        ID: N/A\nLane Number: -1\nQuality Score: 92.3\nGC Content: 0.0\nDuplicate
        Rate: 0%\nLibrary Prep: PCR-free"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}},"returnCode":0,"jobId":"17853390","backend":"gizmo","start":"2025-04-09T17:38:48.235Z","end":"2025-04-09T17:39:29.387Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-04-09T17:38:56.959Z","description":"RunningJob","endTime":"2025-04-09T17:39:28.722Z"},{"startTime":"2025-04-09T17:38:48.235Z","description":"Pending","endTime":"2025-04-09T17:38:48.235Z"},{"startTime":"2025-04-09T17:38:56.942Z","description":"WaitingForValueStore","endTime":"2025-04-09T17:38:56.942Z"},{"startTime":"2025-04-09T17:38:56.942Z","description":"PreparingJob","endTime":"2025-04-09T17:38:56.959Z"},{"startTime":"2025-04-09T17:38:48.235Z","description":"RequestingExecutionToken","endTime":"2025-04-09T17:38:56.942Z"},{"startTime":"2025-04-09T17:39:28.722Z","description":"UpdatingJobStore","endTime":"2025-04-09T17:39:29.387Z"}]}]},"outputs":{"struct_example.processed_sample":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":"normal","library_prep":null,"read_length":100},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}],"struct_example.process_sample.message":["Processing
        sample1 (normal)\nRead Length: 100\nSequencing Platform: NovaSeq\nFlowcell
        ID: H5K5YDSXX\nLane Number: 1\nQuality Score: 95.5\nGC Content: 45.2\nDuplicate
        Rate: 2%\nLibrary Prep: Standard","Processing sample2 (tumor)\nRead Length:
        150\nSequencing Platform: NovaSeq\nFlowcell ID: N/A\nLane Number: -1\nQuality
        Score: 92.3\nGC Content: 0.0\nDuplicate Rate: 0%\nLibrary Prep: PCR-free"]},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/struct_example/58e8ce2f-ee73-4e30-84bf-7c55eed4997f","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-04-09T17:39:32.096Z","start":"2025-04-09T17:38:43.102Z","id":"58e8ce2f-ee73-4e30-84bf-7c55eed4997f","inputs":{"sample_information":[{"name":"sample1","sequencing":{"flowcell_id":"H5K5YDSXX","platform":"NovaSeq","lane_number":1},"metrics":{"gc_content":45.2,"quality_score":95.5,"duplicate_rate":2},"type":null,"library_prep":null,"read_length":null},{"name":"sample2","sequencing":{"flowcell_id":null,"platform":"NovaSeq","lane_number":null},"metrics":{"gc_content":null,"quality_score":92.3,"duplicate_rate":null},"type":"tumor","library_prep":"PCR-free","read_length":150}]},"labels":{"cromwell-workflow-id":"cromwell-58e8ce2f-ee73-4e30-84bf-7c55eed4997f"},"submission":"2025-04-09T17:25:14.280Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Wed, 09 Apr 2025 17:39:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10118'
    status:
      code: 200
      message: OK
version: 1
