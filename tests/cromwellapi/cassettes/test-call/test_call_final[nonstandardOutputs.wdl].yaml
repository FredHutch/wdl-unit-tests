interactions:
- request:
    body: "--89486c9d67a9b41d1ee7fd2d3e03016e\r\nContent-Disposition: form-data; name=\"workflowSource\";
      filename=\"nonstandardOutputs.wdl\"\r\nContent-Type: application/octet-stream\r\n\r\nversion
      1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n
      \   \n    output {\n        File special_chars = generate_diverse_outputs.file_special_chars\n
      \       File no_extension = generate_diverse_outputs.file_no_extension\n        File
      nested_output = generate_diverse_outputs.nested_file\n        File symlink_file
      = generate_diverse_outputs.symlink_output\n        Array[File] glob_files =
      generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
      {\n    command <<<\n        # File with special characters\n        echo \"test
      content\" > \"test@file#1.txt\"\n        \n        # File without extension\n
      \       echo \"no extension\" > datafile\n        \n        # Nested directory
      output\n        mkdir -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n
      \       \n        # Create a symlink\n        echo \"original\" > original.txt\n
      \       ln -s original.txt link.txt\n        \n        # Multiple pattern files\n
      \       for i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n
      \       done\n    >>>\n\n    output {\n        File file_special_chars = \"test@file#1.txt\"\n
      \       File file_no_extension = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n
      \       File symlink_output = \"link.txt\"\n        Array[File] pattern_files
      = glob(\"pattern_*.out\")\n    }\n\n    runtime {\n        docker: \"ubuntu:noble-20241118.1\"\n
      \   }\n}\n\r\n--89486c9d67a9b41d1ee7fd2d3e03016e\r\nContent-Disposition: form-data;
      name=\"workflowOptions\"; filename=\"options.json\"\r\nContent-Type: application/json\r\n\r\n{\n
      \   \"workflow_failure_mode\": \"ContinueWhilePossible\",\n    \"write_to_cache\":
      false,\n    \"read_from_cache\": false\n}\n\r\n--89486c9d67a9b41d1ee7fd2d3e03016e--\r\n"
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '1856'
      content-type:
      - multipart/form-data; boundary=89486c9d67a9b41d1ee7fd2d3e03016e
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: POST
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1
  response:
    body:
      string: '{"id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","status":"Submitted"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '66'
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:32:06 GMT
      Server:
      - nginx/1.25.3
    status:
      code: 201
      message: Created
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:32:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:32:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:32:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:32:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:32:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:32:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:32:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:32:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:32:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:32:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:33:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:33:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:33:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:33:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:33:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:33:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:33:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:33:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:33:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:33:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:33:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:33:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:34:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:34:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:34:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:34:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:34:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:34:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:34:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:34:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:34:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:34:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:34:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:34:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:35:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:35:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:35:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:35:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:35:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:35:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:35:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:35:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:35:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:35:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:35:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:36:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:36:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:36:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:36:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:36:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:36:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:36:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:36:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:36:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:36:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:36:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:36:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:37:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:37:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:37:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:37:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:37:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:37:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:37:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:37:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:37:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:37:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:37:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:37:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:38:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:38:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:38:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:38:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:38:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:38:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:38:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:38:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:38:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:38:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:38:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:38:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:39:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:39:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:39:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:39:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:39:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:39:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:39:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:39:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:39:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:39:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:39:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:39:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:40:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:40:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:40:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:40:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:40:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:40:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:40:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:40:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:40:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:40:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:40:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:40:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:41:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:41:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:41:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:41:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:41:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:41:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:41:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:41:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:41:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:41:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:41:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:42:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:42:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:42:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:42:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:42:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:42:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:42:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:42:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:42:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:42:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:42:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:42:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:43:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:43:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:43:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:43:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:43:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:43:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:43:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:43:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:43:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:43:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:43:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:43:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:44:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:44:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:44:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:44:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:44:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:44:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:44:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:44:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:44:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:44:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:44:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:44:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:45:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:45:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:45:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:45:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:45:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:45:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:45:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:45:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:45:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:45:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:45:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:45:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:46:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:46:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:46:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:46:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:46:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:46:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:46:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:46:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:46:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:46:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:46:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:46:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:47:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:47:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:47:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:47:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:47:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:47:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:47:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:47:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:47:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:47:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:47:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:48:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:48:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:48:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:48:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:48:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:48:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:48:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:48:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:48:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:48:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:48:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:48:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:49:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:49:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:49:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:49:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:49:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:49:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:49:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:49:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:49:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:49:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:49:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:49:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:50:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:50:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:50:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:50:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:50:22 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:50:27 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:50:32 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:50:37 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:50:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:50:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:50:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:50:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:51:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:51:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:51:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:51:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:51:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:51:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:51:33 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:51:38 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:51:43 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:51:48 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:51:53 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:51:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:52:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:52:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:52:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:52:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:52:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:52:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:52:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:52:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:52:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:52:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:52:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:52:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:53:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:53:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:53:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:53:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:53:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:53:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:53:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:53:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:53:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:53:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:53:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:54:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:54:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow test_nonstandard_outputs
        {\n    call generate_diverse_outputs\n    \n    output {\n        File special_chars
        = generate_diverse_outputs.file_special_chars\n        File no_extension =
        generate_diverse_outputs.file_no_extension\n        File nested_output = generate_diverse_outputs.nested_file\n        File
        symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:54:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '1899'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:54:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2323'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:54:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '2496'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:54:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3731'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:54:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:54:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:54:41 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:54:46 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:54:51 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:54:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:55:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:55:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:55:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:55:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:55:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:55:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:55:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:55:36 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:55:42 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:55:47 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:55:52 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:55:57 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:56:02 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Running","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"jobId":"29236726","backend":"gizmo","attempt":1,"start":"2025-08-11T18:54:16.295Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:56:07 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3776'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Done","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"outputs":{"symlink_output":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/link.txt","file_no_extension":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/datafile","nested_file":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/nested/dir/test.txt","pattern_files":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_1.out","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_2.out","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_3.out"],"file_special_chars":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/test@file#1.txt"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"29236726","backend":"gizmo","start":"2025-08-11T18:54:16.295Z","end":"2025-08-11T18:56:09.669Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs","attempt":1,"executionEvents":[{"startTime":"2025-08-11T18:54:16.295Z","description":"Pending","endTime":"2025-08-11T18:54:16.295Z"},{"startTime":"2025-08-11T18:54:16.295Z","description":"RequestingExecutionToken","endTime":"2025-08-11T18:54:20.942Z"},{"startTime":"2025-08-11T18:54:20.942Z","description":"PreparingJob","endTime":"2025-08-11T18:54:21.656Z"},{"startTime":"2025-08-11T18:56:08.954Z","description":"UpdatingJobStore","endTime":"2025-08-11T18:56:09.669Z"},{"startTime":"2025-08-11T18:54:21.656Z","description":"RunningJob","endTime":"2025-08-11T18:56:08.954Z"},{"startTime":"2025-08-11T18:54:20.942Z","description":"WaitingForValueStore","endTime":"2025-08-11T18:54:20.942Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:56:12 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '6007'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok20.fhcrc.org:46789
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok20.fhcrc.org:46789/api/workflows/v1/156bafdd-b753-49be-9e2e-62b0c559cf8a/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"test_nonstandard_outputs","workflowProcessingEvents":[{"cromwellId":"cromid-20c7f37","description":"PickedUp","timestamp":"2025-08-11T18:54:15.251Z","cromwellVersion":"87"},{"cromwellId":"cromid-20c7f37","description":"Finished","timestamp":"2025-08-11T18:56:11.555Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow test_nonstandard_outputs {\n    call generate_diverse_outputs\n    \n    output
        {\n        File special_chars = generate_diverse_outputs.file_special_chars\n        File
        no_extension = generate_diverse_outputs.file_no_extension\n        File nested_output
        = generate_diverse_outputs.nested_file\n        File symlink_file = generate_diverse_outputs.symlink_output\n        Array[File]
        glob_files = generate_diverse_outputs.pattern_files\n    }\n}\n\ntask generate_diverse_outputs
        {\n    command <<<\n        # File with special characters\n        echo \"test
        content\" > \"test@file#1.txt\"\n        \n        # File without extension\n        echo
        \"no extension\" > datafile\n        \n        # Nested directory output\n        mkdir
        -p nested/dir\n        echo \"nested content\" > nested/dir/test.txt\n        \n        #
        Create a symlink\n        echo \"original\" > original.txt\n        ln -s
        original.txt link.txt\n        \n        # Multiple pattern files\n        for
        i in {1..3}; do\n            echo \"pattern $i\" > \"pattern_$i.out\"\n        done\n    >>>\n\n    output
        {\n        File file_special_chars = \"test@file#1.txt\"\n        File file_no_extension
        = \"datafile\"\n        File nested_file = \"nested/dir/test.txt\"\n        File
        symlink_output = \"link.txt\"\n        Array[File] pattern_files = glob(\"pattern_*.out\")\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{}","workflowUrl":"","labels":"{}"},"calls":{"test_nonstandard_outputs.generate_diverse_outputs":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stdout","backendStatus":"Done","commandLine":"#
        File with special characters\necho \"test content\" > \"test@file#1.txt\"\n\n#
        File without extension\necho \"no extension\" > datafile\n\n# Nested directory
        output\nmkdir -p nested/dir\necho \"nested content\" > nested/dir/test.txt\n\n#
        Create a symlink\necho \"original\" > original.txt\nln -s original.txt link.txt\n\n#
        Multiple pattern files\nfor i in {1..3}; do\n    echo \"pattern $i\" > \"pattern_$i.out\"\ndone","shardIndex":-1,"outputs":{"symlink_output":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/link.txt","file_no_extension":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/datafile","nested_file":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/nested/dir/test.txt","pattern_files":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_1.out","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_2.out","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_3.out"],"file_special_chars":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/test@file#1.txt"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{},"returnCode":0,"jobId":"29236726","backend":"gizmo","start":"2025-08-11T18:54:16.295Z","end":"2025-08-11T18:56:09.669Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs","attempt":1,"executionEvents":[{"startTime":"2025-08-11T18:54:16.295Z","description":"Pending","endTime":"2025-08-11T18:54:16.295Z"},{"startTime":"2025-08-11T18:54:16.295Z","description":"RequestingExecutionToken","endTime":"2025-08-11T18:54:20.942Z"},{"startTime":"2025-08-11T18:54:20.942Z","description":"PreparingJob","endTime":"2025-08-11T18:54:21.656Z"},{"startTime":"2025-08-11T18:56:08.954Z","description":"UpdatingJobStore","endTime":"2025-08-11T18:56:09.669Z"},{"startTime":"2025-08-11T18:54:21.656Z","description":"RunningJob","endTime":"2025-08-11T18:56:08.954Z"},{"startTime":"2025-08-11T18:54:20.942Z","description":"WaitingForValueStore","endTime":"2025-08-11T18:54:20.942Z"}]}]},"outputs":{"test_nonstandard_outputs.symlink_file":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/link.txt","test_nonstandard_outputs.nested_output":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/nested/dir/test.txt","test_nonstandard_outputs.glob_files":["/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_1.out","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_2.out","/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/glob-4ded3a97b6654226f2cdd04e2711b93c/pattern_3.out"],"test_nonstandard_outputs.no_extension":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/datafile","test_nonstandard_outputs.special_chars":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a/call-generate_diverse_outputs/execution/test@file#1.txt"},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/test_nonstandard_outputs/156bafdd-b753-49be-9e2e-62b0c559cf8a","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-08-11T18:56:11.555Z","start":"2025-08-11T18:54:15.251Z","id":"156bafdd-b753-49be-9e2e-62b0c559cf8a","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-156bafdd-b753-49be-9e2e-62b0c559cf8a"},"submission":"2025-08-11T18:32:06.859Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Mon, 11 Aug 2025 18:56:17 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7671'
    status:
      code: 200
      message: OK
version: 1
