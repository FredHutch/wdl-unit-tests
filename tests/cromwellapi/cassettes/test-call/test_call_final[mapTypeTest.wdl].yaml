interactions:
- request:
    body: "--d2df4d55f81945e9b28bf741b36598b5\r\nContent-Disposition: form-data; name=\"workflowSource\";
      filename=\"mapTypeTest.wdl\"\r\nContent-Type: application/octet-stream\r\n\r\nversion
      1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n
      \       Array[String] samples\n        Map[String, String] sample_metadata\n
      \       Map[String, Int] read_lengths\n\n        # New test inputs\n        Map[String,
      Map[String, String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
      \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
      {\n                \"sample3\": \"normal\",\n                \"sample4\": \"tumor\"\n
      \           }\n        }\n        # We need to provide keys as arrays since
      WDL 1.0 doesn't have a keys() function\n        Array[String] patient_ids =
      [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map processing\n    scatter
      (patient_id in patient_ids) {\n        call process_nested_map {\n            input:\n
      \               patient_id = patient_id,\n                patient_data = nested_map[patient_id],\n
      \               # We need to provide the sample names explicitly\n                samples_for_patient
      = if patient_id == \"patient1\" then [\"sample1\", \"sample2\"] else [\"sample3\",
      \"sample4\"]\n        }\n    }\n\n    # Original sample processing with output
      map generation\n    scatter (sample in samples) {\n        call process_sample
      {\n            input:\n                sample_name = sample,\n                sample_type
      = sample_metadata[sample],\n                read_length = read_lengths[sample]\n
      \       }\n    }\n\n    # Aggregate results into a map\n    call create_result_map
      {\n        input:\n            sample_names = samples,\n            processing_messages
      = process_sample.message\n    }\n\n    output {\n        Map[String, String]
      result_map = create_result_map.output_map\n        Array[String] nested_map_results
      = process_nested_map.message\n    }\n}\n\ntask process_nested_map {\n    input
      {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
      samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
      first_sample = samples_for_patient[0]\n    # Then use it to index the patient
      data\n    String sample_type = patient_data[first_sample]\n\n    command {\n
      \       echo \"Processing patient ${patient_id} with sample type ${sample_type}\"\n
      \       for sample in ${sep=' ' samples_for_patient}; do\n            echo \"Sample:
      $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n
      \   }\n\n    runtime {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask
      process_sample {\n    input {\n        String sample_name\n        String sample_type\n
      \       Int read_length\n    }\n\n    command <<<\n        echo \"Processing
      ~{sample_name} (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n
      \   output {\n        String message = read_string(stdout())\n    }\n\n    runtime
      {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map
      {\n    input {\n        Array[String] sample_names\n        Array[String] processing_messages\n
      \   }\n\n    command <<<\n        python <<CODE\n        samples = '~{sep=\",\"
      sample_names}'.split(',')\n        messages = '~{sep=\",\" processing_messages}'.split(',')\n
      \       result = dict(zip(samples, messages))\n        with open('output.txt',
      'w') as f:\n            for sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n
      \       CODE\n    >>>\n\n    output {\n        Map[String, String] output_map
      = read_map('output.txt')\n    }\n\n    runtime {\n        docker: \"python:3.8-slim\"\n
      \   }\n}\r\n--d2df4d55f81945e9b28bf741b36598b5\r\nContent-Disposition: form-data;
      name=\"workflowInputs\"; filename=\"inputs.json\"\r\nContent-Type: application/json\r\n\r\n{\n
      \   \"enhanced_map_test.samples\": [\"sample1\", \"sample2\", \"sample3\"],\n
      \   \"enhanced_map_test.sample_metadata\": {\n        \"sample1\": \"normal\",\n
      \       \"sample2\": \"tumor\",\n        \"sample3\": \"normal\"\n    },\n    \"enhanced_map_test.read_lengths\":
      {\n        \"sample1\": 100,\n        \"sample2\": 150,\n        \"sample3\":
      100\n    },\n    \"enhanced_map_test.nested_map\": {\n        \"patient1\":
      {\n            \"sample1\": \"normal\",\n            \"sample2\": \"tumor\"\n
      \       },\n        \"patient2\": {\n            \"sample3\": \"normal\",\n
      \           \"sample4\": \"tumor\"\n        }\n    },\n    \"enhanced_map_test.patient_ids\":
      [\"patient1\", \"patient2\"]\n}\r\n--d2df4d55f81945e9b28bf741b36598b5\r\nContent-Disposition:
      form-data; name=\"workflowOptions\"; filename=\"options.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"workflow_failure_mode\": \"ContinueWhilePossible\",\n
      \   \"write_to_cache\": false,\n    \"read_from_cache\": false\n}\n\r\n--d2df4d55f81945e9b28bf741b36598b5--\r\n"
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '4653'
      content-type:
      - multipart/form-data; boundary=d2df4d55f81945e9b28bf741b36598b5
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: POST
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1
  response:
    body:
      string: '{"id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","status":"Submitted"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '66'
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:52:53 GMT
      Server:
      - nginx/1.25.3
    status:
      code: 201
      message: Created
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:52:58 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:53:03 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:53:08 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:53:13 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:53:18 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:53:23 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:53:28 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:53:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n\nworkflow enhanced_map_test
        {\n    input {\n        # Original inputs\n        Array[String] samples\n        Map[String,
        String] sample_metadata\n        Map[String, Int] read_lengths\n\n        #
        New test inputs\n        Map[String, Map[String, String]] nested_map = {\n            \"patient1\":
        {\n                \"sample1\": \"normal\",\n                \"sample2\":
        \"tumor\"\n            },\n            \"patient2\": {\n                \"sample3\":
        \"normal\",\n                \"sample4\": \"tumor\"\n            }\n        }\n        #
        We need to provide keys as arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:53:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4515'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:53:44 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5266'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_nested_map":[{"executionStatus":"QueuedInCromwell","shardIndex":0,"backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z"},{"executionStatus":"QueuedInCromwell","shardIndex":1,"backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z"}],"enhanced_map_test.process_sample":[{"executionStatus":"QueuedInCromwell","shardIndex":0,"backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z"},{"executionStatus":"QueuedInCromwell","shardIndex":1,"backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z"},{"executionStatus":"QueuedInCromwell","shardIndex":2,"backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:53:49 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5938'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_nested_map":[{"executionStatus":"QueuedInCromwell","shardIndex":0,"backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z"},{"executionStatus":"QueuedInCromwell","shardIndex":1,"backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z"}],"enhanced_map_test.process_sample":[{"executionStatus":"QueuedInCromwell","shardIndex":0,"backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z"},{"executionStatus":"QueuedInCromwell","shardIndex":1,"backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z"},{"executionStatus":"QueuedInCromwell","shardIndex":2,"backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:53:54 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '5938'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_nested_map":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1"}],"enhanced_map_test.process_sample":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:53:59 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11043'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_nested_map":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"jobId":"25766631","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"jobId":"25766632","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1"}],"enhanced_map_test.process_sample":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"jobId":"25766634","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"jobId":"25766633","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"jobId":"25766630","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:54:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11268'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_nested_map":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"jobId":"25766631","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"jobId":"25766632","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1"}],"enhanced_map_test.process_sample":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"jobId":"25766634","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"jobId":"25766633","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"jobId":"25766630","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:54:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11268'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_nested_map":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"jobId":"25766631","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"jobId":"25766632","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1"}],"enhanced_map_test.process_sample":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"jobId":"25766634","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"jobId":"25766633","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"jobId":"25766630","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:54:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11268'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_nested_map":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"jobId":"25766631","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"jobId":"25766632","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1"}],"enhanced_map_test.process_sample":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"jobId":"25766634","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"jobId":"25766633","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"jobId":"25766630","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:54:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11268'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_nested_map":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"jobId":"25766631","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"jobId":"25766632","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1"}],"enhanced_map_test.process_sample":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"jobId":"25766634","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"jobId":"25766633","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"jobId":"25766630","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:54:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11268'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_nested_map":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"jobId":"25766631","backend":"gizmo","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"jobId":"25766632","backend":"gizmo","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1"}],"enhanced_map_test.process_sample":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"jobId":"25766634","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"jobId":"25766633","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"jobId":"25766630","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:54:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11460'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"25766631","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.110Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:25.458Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.797Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.458Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.797Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"25766632","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.111Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.802Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.887Z"},{"startTime":"2025-06-27T18:53:43.307Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.307Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.802Z"},{"startTime":"2025-06-27T18:54:25.887Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"}]}],"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"25766634","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:27.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.804Z","description":"RunningJob","endTime":"2025-06-27T18:54:26.327Z"},{"startTime":"2025-06-27T18:54:26.327Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:27.119Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.804Z"}]},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"jobId":"25766633","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1"},{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"jobId":"25766630","backend":"gizmo","attempt":1,"start":"2025-06-27T18:53:43.306Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:54:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '14021'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"25766634","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:27.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.804Z","description":"RunningJob","endTime":"2025-06-27T18:54:26.327Z"},{"startTime":"2025-06-27T18:54:26.327Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:27.119Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.804Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"25766633","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:33.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:32.276Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:33.119Z"},{"startTime":"2025-06-27T18:53:52.788Z","description":"RunningJob","endTime":"2025-06-27T18:54:32.276Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.788Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"25766630","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:32.120Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.793Z"},{"startTime":"2025-06-27T18:53:52.793Z","description":"RunningJob","endTime":"2025-06-27T18:54:31.766Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:31.766Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:32.120Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"25766631","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.110Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:25.458Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.797Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.458Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.797Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"25766632","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.111Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.802Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.887Z"},{"startTime":"2025-06-27T18:53:43.307Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.307Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.802Z"},{"startTime":"2025-06-27T18:54:25.887Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-06-27T18:54:35.324Z"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:54:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '15966'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"25766634","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:27.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.804Z","description":"RunningJob","endTime":"2025-06-27T18:54:26.327Z"},{"startTime":"2025-06-27T18:54:26.327Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:27.119Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.804Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"25766633","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:33.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:32.276Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:33.119Z"},{"startTime":"2025-06-27T18:53:52.788Z","description":"RunningJob","endTime":"2025-06-27T18:54:32.276Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.788Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"25766630","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:32.120Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.793Z"},{"startTime":"2025-06-27T18:53:52.793Z","description":"RunningJob","endTime":"2025-06-27T18:54:31.766Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:31.766Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:32.120Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"25766631","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.110Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:25.458Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.797Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.458Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.797Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"25766632","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.111Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.802Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.887Z"},{"startTime":"2025-06-27T18:53:43.307Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.307Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.802Z"},{"startTime":"2025-06-27T18:54:25.887Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-06-27T18:54:35.324Z"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:54:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '15966'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"25766634","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:27.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.804Z","description":"RunningJob","endTime":"2025-06-27T18:54:26.327Z"},{"startTime":"2025-06-27T18:54:26.327Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:27.119Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.804Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"25766633","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:33.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:32.276Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:33.119Z"},{"startTime":"2025-06-27T18:53:52.788Z","description":"RunningJob","endTime":"2025-06-27T18:54:32.276Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.788Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"25766630","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:32.120Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.793Z"},{"startTime":"2025-06-27T18:53:52.793Z","description":"RunningJob","endTime":"2025-06-27T18:54:31.766Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:31.766Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:32.120Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"25766631","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.110Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:25.458Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.797Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.458Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.797Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"25766632","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.111Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.802Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.887Z"},{"startTime":"2025-06-27T18:53:43.307Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.307Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.802Z"},{"startTime":"2025-06-27T18:54:25.887Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map/execution/stdout","commandLine":"python
        <<CODE\nsamples = ''sample1,sample2,sample3''.split('','')\nmessages = ''Processing
        sample1 (normal) with read length 100,Processing sample2 (tumor) with read
        length 150,Processing sample3 (normal) with read length 100''.split('','')\nresult
        = dict(zip(samples, messages))\nwith open(''output.txt'', ''w'') as f:\n    for
        sample, message in result.items():\n        f.write(f\"{sample}\\t{message}\\n\")\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"python:3.8-slim","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_names":["sample1","sample2","sample3"],"processing_messages":["Processing
        sample1 (normal) with read length 100","Processing sample2 (tumor) with read
        length 150","Processing sample3 (normal) with read length 100"]},"backend":"gizmo","attempt":1,"start":"2025-06-27T18:54:35.324Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:54:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '17393'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"25766634","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:27.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.804Z","description":"RunningJob","endTime":"2025-06-27T18:54:26.327Z"},{"startTime":"2025-06-27T18:54:26.327Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:27.119Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.804Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"25766633","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:33.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:32.276Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:33.119Z"},{"startTime":"2025-06-27T18:53:52.788Z","description":"RunningJob","endTime":"2025-06-27T18:54:32.276Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.788Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"25766630","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:32.120Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.793Z"},{"startTime":"2025-06-27T18:53:52.793Z","description":"RunningJob","endTime":"2025-06-27T18:54:31.766Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:31.766Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:32.120Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"25766631","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.110Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:25.458Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.797Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.458Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.797Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"25766632","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.111Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.802Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.887Z"},{"startTime":"2025-06-27T18:53:43.307Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.307Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.802Z"},{"startTime":"2025-06-27T18:54:25.887Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map/execution/stdout","backendStatus":"Running","commandLine":"python
        <<CODE\nsamples = ''sample1,sample2,sample3''.split('','')\nmessages = ''Processing
        sample1 (normal) with read length 100,Processing sample2 (tumor) with read
        length 150,Processing sample3 (normal) with read length 100''.split('','')\nresult
        = dict(zip(samples, messages))\nwith open(''output.txt'', ''w'') as f:\n    for
        sample, message in result.items():\n        f.write(f\"{sample}\\t{message}\\n\")\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"python:3.8-slim","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_names":["sample1","sample2","sample3"],"processing_messages":["Processing
        sample1 (normal) with read length 100","Processing sample2 (tumor) with read
        length 150","Processing sample3 (normal) with read length 100"]},"jobId":"25766640","backend":"gizmo","attempt":1,"start":"2025-06-27T18:54:35.324Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:54:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '17438'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"25766634","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:27.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.804Z","description":"RunningJob","endTime":"2025-06-27T18:54:26.327Z"},{"startTime":"2025-06-27T18:54:26.327Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:27.119Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.804Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"25766633","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:33.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:32.276Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:33.119Z"},{"startTime":"2025-06-27T18:53:52.788Z","description":"RunningJob","endTime":"2025-06-27T18:54:32.276Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.788Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"25766630","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:32.120Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.793Z"},{"startTime":"2025-06-27T18:53:52.793Z","description":"RunningJob","endTime":"2025-06-27T18:54:31.766Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:31.766Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:32.120Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"25766631","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.110Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:25.458Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.797Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.458Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.797Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"25766632","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.111Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.802Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.887Z"},{"startTime":"2025-06-27T18:53:43.307Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.307Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.802Z"},{"startTime":"2025-06-27T18:54:25.887Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map/execution/stdout","backendStatus":"Running","commandLine":"python
        <<CODE\nsamples = ''sample1,sample2,sample3''.split('','')\nmessages = ''Processing
        sample1 (normal) with read length 100,Processing sample2 (tumor) with read
        length 150,Processing sample3 (normal) with read length 100''.split('','')\nresult
        = dict(zip(samples, messages))\nwith open(''output.txt'', ''w'') as f:\n    for
        sample, message in result.items():\n        f.write(f\"{sample}\\t{message}\\n\")\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"python:3.8-slim","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_names":["sample1","sample2","sample3"],"processing_messages":["Processing
        sample1 (normal) with read length 100","Processing sample2 (tumor) with read
        length 150","Processing sample3 (normal) with read length 100"]},"jobId":"25766640","backend":"gizmo","attempt":1,"start":"2025-06-27T18:54:35.324Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:55:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '17438'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"25766634","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:27.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.804Z","description":"RunningJob","endTime":"2025-06-27T18:54:26.327Z"},{"startTime":"2025-06-27T18:54:26.327Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:27.119Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.804Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"25766633","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:33.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:32.276Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:33.119Z"},{"startTime":"2025-06-27T18:53:52.788Z","description":"RunningJob","endTime":"2025-06-27T18:54:32.276Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.788Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"25766630","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:32.120Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.793Z"},{"startTime":"2025-06-27T18:53:52.793Z","description":"RunningJob","endTime":"2025-06-27T18:54:31.766Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:31.766Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:32.120Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"25766631","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.110Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:25.458Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.797Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.458Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.797Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"25766632","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.111Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.802Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.887Z"},{"startTime":"2025-06-27T18:53:43.307Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.307Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.802Z"},{"startTime":"2025-06-27T18:54:25.887Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map/execution/stdout","backendStatus":"Running","commandLine":"python
        <<CODE\nsamples = ''sample1,sample2,sample3''.split('','')\nmessages = ''Processing
        sample1 (normal) with read length 100,Processing sample2 (tumor) with read
        length 150,Processing sample3 (normal) with read length 100''.split('','')\nresult
        = dict(zip(samples, messages))\nwith open(''output.txt'', ''w'') as f:\n    for
        sample, message in result.items():\n        f.write(f\"{sample}\\t{message}\\n\")\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"python:3.8-slim","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_names":["sample1","sample2","sample3"],"processing_messages":["Processing
        sample1 (normal) with read length 100","Processing sample2 (tumor) with read
        length 150","Processing sample3 (normal) with read length 100"]},"jobId":"25766640","backend":"gizmo","attempt":1,"start":"2025-06-27T18:54:35.324Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:55:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '17438'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"25766634","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:27.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.804Z","description":"RunningJob","endTime":"2025-06-27T18:54:26.327Z"},{"startTime":"2025-06-27T18:54:26.327Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:27.119Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.804Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"25766633","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:33.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:32.276Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:33.119Z"},{"startTime":"2025-06-27T18:53:52.788Z","description":"RunningJob","endTime":"2025-06-27T18:54:32.276Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.788Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"25766630","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:32.120Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.793Z"},{"startTime":"2025-06-27T18:53:52.793Z","description":"RunningJob","endTime":"2025-06-27T18:54:31.766Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:31.766Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:32.120Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"25766631","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.110Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:25.458Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.797Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.458Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.797Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"25766632","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.111Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.802Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.887Z"},{"startTime":"2025-06-27T18:53:43.307Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.307Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.802Z"},{"startTime":"2025-06-27T18:54:25.887Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map/execution/stdout","backendStatus":"Running","commandLine":"python
        <<CODE\nsamples = ''sample1,sample2,sample3''.split('','')\nmessages = ''Processing
        sample1 (normal) with read length 100,Processing sample2 (tumor) with read
        length 150,Processing sample3 (normal) with read length 100''.split('','')\nresult
        = dict(zip(samples, messages))\nwith open(''output.txt'', ''w'') as f:\n    for
        sample, message in result.items():\n        f.write(f\"{sample}\\t{message}\\n\")\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"python:3.8-slim","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_names":["sample1","sample2","sample3"],"processing_messages":["Processing
        sample1 (normal) with read length 100","Processing sample2 (tumor) with read
        length 150","Processing sample3 (normal) with read length 100"]},"jobId":"25766640","backend":"gizmo","attempt":1,"start":"2025-06-27T18:54:35.324Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:55:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '17438'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"25766634","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:27.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.804Z","description":"RunningJob","endTime":"2025-06-27T18:54:26.327Z"},{"startTime":"2025-06-27T18:54:26.327Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:27.119Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.804Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"25766633","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:33.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:32.276Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:33.119Z"},{"startTime":"2025-06-27T18:53:52.788Z","description":"RunningJob","endTime":"2025-06-27T18:54:32.276Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.788Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"25766630","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:32.120Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.793Z"},{"startTime":"2025-06-27T18:53:52.793Z","description":"RunningJob","endTime":"2025-06-27T18:54:31.766Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:31.766Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:32.120Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"25766631","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.110Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:25.458Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.797Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.458Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.797Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"25766632","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.111Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.802Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.887Z"},{"startTime":"2025-06-27T18:53:43.307Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.307Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.802Z"},{"startTime":"2025-06-27T18:54:25.887Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map/execution/stdout","backendStatus":"Running","commandLine":"python
        <<CODE\nsamples = ''sample1,sample2,sample3''.split('','')\nmessages = ''Processing
        sample1 (normal) with read length 100,Processing sample2 (tumor) with read
        length 150,Processing sample3 (normal) with read length 100''.split('','')\nresult
        = dict(zip(samples, messages))\nwith open(''output.txt'', ''w'') as f:\n    for
        sample, message in result.items():\n        f.write(f\"{sample}\\t{message}\\n\")\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"python:3.8-slim","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_names":["sample1","sample2","sample3"],"processing_messages":["Processing
        sample1 (normal) with read length 100","Processing sample2 (tumor) with read
        length 150","Processing sample3 (normal) with read length 100"]},"jobId":"25766640","backend":"gizmo","attempt":1,"start":"2025-06-27T18:54:35.324Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:55:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '17438'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"25766634","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:27.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.804Z","description":"RunningJob","endTime":"2025-06-27T18:54:26.327Z"},{"startTime":"2025-06-27T18:54:26.327Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:27.119Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.804Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"25766633","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:33.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:32.276Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:33.119Z"},{"startTime":"2025-06-27T18:53:52.788Z","description":"RunningJob","endTime":"2025-06-27T18:54:32.276Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.788Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"25766630","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:32.120Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.793Z"},{"startTime":"2025-06-27T18:53:52.793Z","description":"RunningJob","endTime":"2025-06-27T18:54:31.766Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:31.766Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:32.120Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"25766631","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.110Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:25.458Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.797Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.458Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.797Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"25766632","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.111Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.802Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.887Z"},{"startTime":"2025-06-27T18:53:43.307Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.307Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.802Z"},{"startTime":"2025-06-27T18:54:25.887Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"Running","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map/execution/stdout","backendStatus":"Running","commandLine":"python
        <<CODE\nsamples = ''sample1,sample2,sample3''.split('','')\nmessages = ''Processing
        sample1 (normal) with read length 100,Processing sample2 (tumor) with read
        length 150,Processing sample3 (normal) with read length 100''.split('','')\nresult
        = dict(zip(samples, messages))\nwith open(''output.txt'', ''w'') as f:\n    for
        sample, message in result.items():\n        f.write(f\"{sample}\\t{message}\\n\")\nCODE","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"python:3.8-slim","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_names":["sample1","sample2","sample3"],"processing_messages":["Processing
        sample1 (normal) with read length 100","Processing sample2 (tumor) with read
        length 150","Processing sample3 (normal) with read length 100"]},"jobId":"25766640","backend":"gizmo","attempt":1,"start":"2025-06-27T18:54:35.324Z","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map"}]},"outputs":{},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:55:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '17438'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok161.fhcrc.org:37743
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok161.fhcrc.org:37743/api/workflows/v1/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"enhanced_map_test","workflowProcessingEvents":[{"cromwellId":"cromid-f817fba","description":"PickedUp","timestamp":"2025-06-27T18:53:39.155Z","cromwellVersion":"87"},{"cromwellId":"cromid-f817fba","description":"Finished","timestamp":"2025-06-27T18:55:18.168Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n\nworkflow enhanced_map_test {\n    input {\n        # Original inputs\n        Array[String]
        samples\n        Map[String, String] sample_metadata\n        Map[String,
        Int] read_lengths\n\n        # New test inputs\n        Map[String, Map[String,
        String]] nested_map = {\n            \"patient1\": {\n                \"sample1\":
        \"normal\",\n                \"sample2\": \"tumor\"\n            },\n            \"patient2\":
        {\n                \"sample3\": \"normal\",\n                \"sample4\":
        \"tumor\"\n            }\n        }\n        # We need to provide keys as
        arrays since WDL 1.0 doesn''t have a keys() function\n        Array[String]
        patient_ids = [\"patient1\", \"patient2\"]\n    }\n\n    # Test nested map
        processing\n    scatter (patient_id in patient_ids) {\n        call process_nested_map
        {\n            input:\n                patient_id = patient_id,\n                patient_data
        = nested_map[patient_id],\n                # We need to provide the sample
        names explicitly\n                samples_for_patient = if patient_id == \"patient1\"
        then [\"sample1\", \"sample2\"] else [\"sample3\", \"sample4\"]\n        }\n    }\n\n    #
        Original sample processing with output map generation\n    scatter (sample
        in samples) {\n        call process_sample {\n            input:\n                sample_name
        = sample,\n                sample_type = sample_metadata[sample],\n                read_length
        = read_lengths[sample]\n        }\n    }\n\n    # Aggregate results into a
        map\n    call create_result_map {\n        input:\n            sample_names
        = samples,\n            processing_messages = process_sample.message\n    }\n\n    output
        {\n        Map[String, String] result_map = create_result_map.output_map\n        Array[String]
        nested_map_results = process_nested_map.message\n    }\n}\n\ntask process_nested_map
        {\n    input {\n        String patient_id\n        Map[String, String] patient_data\n        Array[String]
        samples_for_patient\n    }\n\n    # First get the first sample ID\n    String
        first_sample = samples_for_patient[0]\n    # Then use it to index the patient
        data\n    String sample_type = patient_data[first_sample]\n\n    command {\n        echo
        \"Processing patient ${patient_id} with sample type ${sample_type}\"\n        for
        sample in ${sep='' '' samples_for_patient}; do\n            echo \"Sample:
        $sample\"\n        done\n    }\n\n    output {\n        String message = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask process_sample
        {\n    input {\n        String sample_name\n        String sample_type\n        Int
        read_length\n    }\n\n    command <<<\n        echo \"Processing ~{sample_name}
        (~{sample_type}) with read length ~{read_length}\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask create_result_map {\n    input
        {\n        Array[String] sample_names\n        Array[String] processing_messages\n    }\n\n    command
        <<<\n        python <<CODE\n        samples = ''~{sep=\",\" sample_names}''.split('','')\n        messages
        = ''~{sep=\",\" processing_messages}''.split('','')\n        result = dict(zip(samples,
        messages))\n        with open(''output.txt'', ''w'') as f:\n            for
        sample, message in result.items():\n                f.write(f\"{sample}\\t{message}\\n\")\n        CODE\n    >>>\n\n    output
        {\n        Map[String, String] output_map = read_map(''output.txt'')\n    }\n\n    runtime
        {\n        docker: \"python:3.8-slim\"\n    }\n}","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"enhanced_map_test.nested_map\":{\"patient1\":{\"sample1\":\"normal\",\"sample2\":\"tumor\"},\"patient2\":{\"sample3\":\"normal\",\"sample4\":\"tumor\"}},\"enhanced_map_test.patient_ids\":[\"patient1\",\"patient2\"],\"enhanced_map_test.read_lengths\":{\"sample1\":100,\"sample2\":150,\"sample3\":100},\"enhanced_map_test.sample_metadata\":{\"sample1\":\"normal\",\"sample2\":\"tumor\",\"sample3\":\"normal\"},\"enhanced_map_test.samples\":[\"sample1\",\"sample2\",\"sample3\"]}","workflowUrl":"","labels":"{}"},"calls":{"enhanced_map_test.process_sample":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample1 (normal) with read length 100\"","shardIndex":0,"outputs":{"message":"Processing
        sample1 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample1","sample_type":"normal"},"returnCode":0,"jobId":"25766634","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:27.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.804Z","description":"RunningJob","endTime":"2025-06-27T18:54:26.327Z"},{"startTime":"2025-06-27T18:54:26.327Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:27.119Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.804Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample2 (tumor) with read length 150\"","shardIndex":1,"outputs":{"message":"Processing
        sample2 (tumor) with read length 150"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":150,"sample_name":"sample2","sample_type":"tumor"},"returnCode":0,"jobId":"25766633","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:33.119Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:32.276Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:33.119Z"},{"startTime":"2025-06-27T18:53:52.788Z","description":"RunningJob","endTime":"2025-06-27T18:54:32.276Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.788Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing sample3 (normal) with read length 100\"","shardIndex":2,"outputs":{"message":"Processing
        sample3 (normal) with read length 100"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"read_length":100,"sample_name":"sample3","sample_type":"normal"},"returnCode":0,"jobId":"25766630","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:32.120Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_sample/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.793Z"},{"startTime":"2025-06-27T18:53:52.793Z","description":"RunningJob","endTime":"2025-06-27T18:54:31.766Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:31.766Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:32.120Z"}]}],"enhanced_map_test.process_nested_map":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient1 with sample type normal\"\nfor sample in sample1
        sample2; do\n    echo \"Sample: $sample\"\ndone","shardIndex":0,"outputs":{"message":"Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient1","first_sample":"sample1","patient_data":{"sample2":"tumor","sample1":"normal"},"samples_for_patient":["sample1","sample2"]},"returnCode":0,"jobId":"25766631","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.110Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:43.306Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:54:25.458Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.306Z"},{"startTime":"2025-06-27T18:53:52.797Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.458Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.797Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"}]},{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing patient patient2 with sample type normal\"\nfor sample in sample3
        sample4; do\n    echo \"Sample: $sample\"\ndone","shardIndex":1,"outputs":{"message":"Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_type":"normal","patient_id":"patient2","first_sample":"sample3","patient_data":{"sample4":"tumor","sample3":"normal"},"samples_for_patient":["sample3","sample4"]},"returnCode":0,"jobId":"25766632","backend":"gizmo","start":"2025-06-27T18:53:43.306Z","end":"2025-06-27T18:54:26.111Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-process_nested_map/shard-1","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:53:52.802Z","description":"RunningJob","endTime":"2025-06-27T18:54:25.887Z"},{"startTime":"2025-06-27T18:53:43.307Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:43.306Z","description":"Pending","endTime":"2025-06-27T18:53:43.307Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:53:52.775Z"},{"startTime":"2025-06-27T18:53:52.775Z","description":"PreparingJob","endTime":"2025-06-27T18:53:52.802Z"},{"startTime":"2025-06-27T18:54:25.887Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:54:26.111Z"}]}],"enhanced_map_test.create_result_map":[{"executionStatus":"Done","stdout":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map/execution/stdout","backendStatus":"Done","commandLine":"python
        <<CODE\nsamples = ''sample1,sample2,sample3''.split('','')\nmessages = ''Processing
        sample1 (normal) with read length 100,Processing sample2 (tumor) with read
        length 150,Processing sample3 (normal) with read length 100''.split('','')\nresult
        = dict(zip(samples, messages))\nwith open(''output.txt'', ''w'') as f:\n    for
        sample, message in result.items():\n        f.write(f\"{sample}\\t{message}\\n\")\nCODE","shardIndex":-1,"outputs":{"output_map":{"sample2":"Processing
        sample2 (tumor) with read length 150","sample1":"Processing sample1 (normal)
        with read length 100","sample3":"Processing sample3 (normal) with read length
        100"}},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"python:3.8-slim","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_names":["sample1","sample2","sample3"],"processing_messages":["Processing
        sample1 (normal) with read length 100","Processing sample2 (tumor) with read
        length 150","Processing sample3 (normal) with read length 100"]},"returnCode":0,"jobId":"25766640","backend":"gizmo","start":"2025-06-27T18:54:35.324Z","end":"2025-06-27T18:55:17.120Z","dockerImageUsed":"python@sha256:1d52838af602b4b5a831beb13a0e4d073280665ea7be7f69ce2382f29c5a613f","stderr":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map/execution/stderr","callRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1/call-create_result_map","attempt":1,"executionEvents":[{"startTime":"2025-06-27T18:54:43.390Z","description":"RunningJob","endTime":"2025-06-27T18:55:16.246Z"},{"startTime":"2025-06-27T18:54:42.774Z","description":"PreparingJob","endTime":"2025-06-27T18:54:43.390Z"},{"startTime":"2025-06-27T18:54:35.325Z","description":"RequestingExecutionToken","endTime":"2025-06-27T18:54:42.774Z"},{"startTime":"2025-06-27T18:54:42.774Z","description":"WaitingForValueStore","endTime":"2025-06-27T18:54:42.774Z"},{"startTime":"2025-06-27T18:55:16.246Z","description":"UpdatingJobStore","endTime":"2025-06-27T18:55:17.120Z"},{"startTime":"2025-06-27T18:54:35.324Z","description":"Pending","endTime":"2025-06-27T18:54:35.325Z"}]}]},"outputs":{"enhanced_map_test.nested_map_results":["Processing
        patient patient1 with sample type normal\nSample: sample1\nSample: sample2","Processing
        patient patient2 with sample type normal\nSample: sample3\nSample: sample4"],"enhanced_map_test.result_map":{"sample2":"Processing
        sample2 (tumor) with read length 150","sample1":"Processing sample1 (normal)
        with read length 100","sample3":"Processing sample3 (normal) with read length
        100"}},"workflowRoot":"/redacted/testpi_t/temp/user/svc_proof_test/cromwell-scratch/enhanced_map_test/6c0a3f34-c863-46c7-bb12-7c617ccab5b1","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-06-27T18:55:18.167Z","start":"2025-06-27T18:53:39.156Z","id":"6c0a3f34-c863-46c7-bb12-7c617ccab5b1","inputs":{"read_lengths":{"sample2":150,"sample1":100,"sample3":100},"samples":["sample1","sample2","sample3"],"nested_map":{"patient2":{"sample4":"tumor","sample3":"normal"},"patient1":{"sample2":"tumor","sample1":"normal"}},"patient_ids":["patient1","patient2"],"sample_metadata":{"sample2":"tumor","sample1":"normal","sample3":"normal"}},"labels":{"cromwell-workflow-id":"cromwell-6c0a3f34-c863-46c7-bb12-7c617ccab5b1"},"submission":"2025-06-27T18:52:53.535Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Fri, 27 Jun 2025 18:55:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '19052'
    status:
      code: 200
      message: OK
version: 1
