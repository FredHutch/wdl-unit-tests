interactions:
- request:
    body: "--6af88a147286cbdecb19d6e5f8af4136\r\nContent-Disposition: form-data; name=\"workflowSource\";
      filename=\"conditionalTest.wdl\"\r\nContent-Type: application/octet-stream\r\n\r\nversion
      1.0\n## This workflow demonstrates the usage of conditional statements in WDL\n##
      by selectively processing samples based on their properties\n\nstruct SampleInfo
      {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
      conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
      quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
      (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
      {\n            call process_high_quality {\n                input:\n                    sample
      = sample\n            }\n        }\n    }\n\n    # Create string arrays for
      the QC report\n    scatter (sample in samples) {\n        String sample_line
      = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
      Demonstrate single conditional task\n    call run_qc_report {\n        input:\n
      \           sample_lines = sample_line\n    }\n\n    # Calculate number of high
      quality samples\n    Int num_high_quality = length(select_all(process_high_quality.message))\n\n
      \   # Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n
      \   Boolean has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
      {\n        call summarize {\n            input:\n                messages =
      select_all(process_high_quality.message),\n                report = \"Multiple
      high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
      {\n        call summarize as summarize_few {\n            input:\n                messages
      = select_all(process_high_quality.message),\n                report = \"Few
      or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
      final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
      qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
      {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
      \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n
      \   >>>\n\n    output {\n        String message = read_string(stdout())\n    }\n\n
      \   runtime {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask
      run_qc_report {\n    input {\n        Array[String] sample_lines\n    }\n\n
      \   command <<<\n        echo \"Quality Score Summary:\"\n        echo \"Sample
      Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
      >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
      report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n
      \   runtime {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask
      summarize {\n    input {\n        Array[String] messages\n        String report\n
      \   }\n\n    command <<<\n        echo \"~{report}\"\n        echo \"Number
      of samples processed: ~{length(messages)}\"\n    >>>\n\n    output {\n        String
      summary = read_string(stdout())\n    }\n\n    runtime {\n        docker: \"ubuntu:noble-20241118.1\"\n
      \   }\n}\n\r\n--6af88a147286cbdecb19d6e5f8af4136\r\nContent-Disposition: form-data;
      name=\"workflowInputs\"; filename=\"inputs.json\"\r\nContent-Type: application/json\r\n\r\n{\n
      \   \"conditional_example.samples\": [\n        {\n            \"name\": \"sample1\",\n
      \           \"quality_score\": 95.5,\n            \"type\": \"normal\"\n        },\n
      \       {\n            \"name\": \"sample2\",\n            \"quality_score\":
      85.3,\n            \"type\": \"tumor\"\n        },\n        {\n            \"name\":
      \"sample3\",\n            \"quality_score\": 92.1,\n            \"type\": \"normal\"\n
      \       }\n    ],\n    \"conditional_example.quality_threshold\": 90.0\n}\n\r\n--6af88a147286cbdecb19d6e5f8af4136\r\nContent-Disposition:
      form-data; name=\"workflowOptions\"; filename=\"options.json\"\r\nContent-Type:
      application/json\r\n\r\n{\n    \"workflow_failure_mode\": \"ContinueWhilePossible\",\n
      \   \"write_to_cache\": false,\n    \"read_from_cache\": false\n}\n\r\n--6af88a147286cbdecb19d6e5f8af4136--\r\n"
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      content-length:
      - '3982'
      content-type:
      - multipart/form-data; boundary=6af88a147286cbdecb19d6e5f8af4136
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: POST
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1
  response:
    body:
      string: '{"id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","status":"Submitted"}'
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '66'
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:34:59 GMT
      Server:
      - nginx/1.25.3
    status:
      code: 201
      message: Created
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This workflow demonstrates
        the usage of conditional statements in WDL\n## by selectively processing samples
        based on their properties\n\nstruct SampleInfo {\n    String name\n    Float
        quality_score\n    String type\n}\n\nworkflow conditional_example {\n    input
        {\n        Array[SampleInfo] samples\n        Float quality_threshold\n    }\n\n    #
        Demonstrate if statement in scatter\n    scatter (sample in samples) {\n        if
        (sample.quality_score >= quality_threshold) {\n            call process_high_quality
        {\n                input:\n                    sample = sample\n            }\n        }\n    }\n\n    #
        Create string arrays for the QC report\n    scatter (sample in samples) {\n        String
        sample_line = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:35:04 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3787'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This workflow demonstrates
        the usage of conditional statements in WDL\n## by selectively processing samples
        based on their properties\n\nstruct SampleInfo {\n    String name\n    Float
        quality_score\n    String type\n}\n\nworkflow conditional_example {\n    input
        {\n        Array[SampleInfo] samples\n        Float quality_threshold\n    }\n\n    #
        Demonstrate if statement in scatter\n    scatter (sample in samples) {\n        if
        (sample.quality_score >= quality_threshold) {\n            call process_high_quality
        {\n                input:\n                    sample = sample\n            }\n        }\n    }\n\n    #
        Create string arrays for the QC report\n    scatter (sample in samples) {\n        String
        sample_line = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:35:09 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3787'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This workflow demonstrates
        the usage of conditional statements in WDL\n## by selectively processing samples
        based on their properties\n\nstruct SampleInfo {\n    String name\n    Float
        quality_score\n    String type\n}\n\nworkflow conditional_example {\n    input
        {\n        Array[SampleInfo] samples\n        Float quality_threshold\n    }\n\n    #
        Demonstrate if statement in scatter\n    scatter (sample in samples) {\n        if
        (sample.quality_score >= quality_threshold) {\n            call process_high_quality
        {\n                input:\n                    sample = sample\n            }\n        }\n    }\n\n    #
        Create string arrays for the QC report\n    scatter (sample in samples) {\n        String
        sample_line = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:35:14 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3787'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This workflow demonstrates
        the usage of conditional statements in WDL\n## by selectively processing samples
        based on their properties\n\nstruct SampleInfo {\n    String name\n    Float
        quality_score\n    String type\n}\n\nworkflow conditional_example {\n    input
        {\n        Array[SampleInfo] samples\n        Float quality_threshold\n    }\n\n    #
        Demonstrate if statement in scatter\n    scatter (sample in samples) {\n        if
        (sample.quality_score >= quality_threshold) {\n            call process_high_quality
        {\n                input:\n                    sample = sample\n            }\n        }\n    }\n\n    #
        Create string arrays for the QC report\n    scatter (sample in samples) {\n        String
        sample_line = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:35:19 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3787'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This workflow demonstrates
        the usage of conditional statements in WDL\n## by selectively processing samples
        based on their properties\n\nstruct SampleInfo {\n    String name\n    Float
        quality_score\n    String type\n}\n\nworkflow conditional_example {\n    input
        {\n        Array[SampleInfo] samples\n        Float quality_threshold\n    }\n\n    #
        Demonstrate if statement in scatter\n    scatter (sample in samples) {\n        if
        (sample.quality_score >= quality_threshold) {\n            call process_high_quality
        {\n                input:\n                    sample = sample\n            }\n        }\n    }\n\n    #
        Create string arrays for the QC report\n    scatter (sample in samples) {\n        String
        sample_line = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:35:24 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3787'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This workflow demonstrates
        the usage of conditional statements in WDL\n## by selectively processing samples
        based on their properties\n\nstruct SampleInfo {\n    String name\n    Float
        quality_score\n    String type\n}\n\nworkflow conditional_example {\n    input
        {\n        Array[SampleInfo] samples\n        Float quality_threshold\n    }\n\n    #
        Demonstrate if statement in scatter\n    scatter (sample in samples) {\n        if
        (sample.quality_score >= quality_threshold) {\n            call process_high_quality
        {\n                input:\n                    sample = sample\n            }\n        }\n    }\n\n    #
        Create string arrays for the QC report\n    scatter (sample in samples) {\n        String
        sample_line = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:35:29 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3787'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This workflow demonstrates
        the usage of conditional statements in WDL\n## by selectively processing samples
        based on their properties\n\nstruct SampleInfo {\n    String name\n    Float
        quality_score\n    String type\n}\n\nworkflow conditional_example {\n    input
        {\n        Array[SampleInfo] samples\n        Float quality_threshold\n    }\n\n    #
        Demonstrate if statement in scatter\n    scatter (sample in samples) {\n        if
        (sample.quality_score >= quality_threshold) {\n            call process_high_quality
        {\n                input:\n                    sample = sample\n            }\n        }\n    }\n\n    #
        Create string arrays for the QC report\n    scatter (sample in samples) {\n        String
        sample_line = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:35:34 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3787'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This workflow demonstrates
        the usage of conditional statements in WDL\n## by selectively processing samples
        based on their properties\n\nstruct SampleInfo {\n    String name\n    Float
        quality_score\n    String type\n}\n\nworkflow conditional_example {\n    input
        {\n        Array[SampleInfo] samples\n        Float quality_threshold\n    }\n\n    #
        Demonstrate if statement in scatter\n    scatter (sample in samples) {\n        if
        (sample.quality_score >= quality_threshold) {\n            call process_high_quality
        {\n                input:\n                    sample = sample\n            }\n        }\n    }\n\n    #
        Create string arrays for the QC report\n    scatter (sample in samples) {\n        String
        sample_line = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:35:39 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3787'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This workflow demonstrates
        the usage of conditional statements in WDL\n## by selectively processing samples
        based on their properties\n\nstruct SampleInfo {\n    String name\n    Float
        quality_score\n    String type\n}\n\nworkflow conditional_example {\n    input
        {\n        Array[SampleInfo] samples\n        Float quality_threshold\n    }\n\n    #
        Demonstrate if statement in scatter\n    scatter (sample in samples) {\n        if
        (sample.quality_score >= quality_threshold) {\n            call process_high_quality
        {\n                input:\n                    sample = sample\n            }\n        }\n    }\n\n    #
        Create string arrays for the QC report\n    scatter (sample in samples) {\n        String
        sample_line = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:35:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3787'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This workflow demonstrates
        the usage of conditional statements in WDL\n## by selectively processing samples
        based on their properties\n\nstruct SampleInfo {\n    String name\n    Float
        quality_score\n    String type\n}\n\nworkflow conditional_example {\n    input
        {\n        Array[SampleInfo] samples\n        Float quality_threshold\n    }\n\n    #
        Demonstrate if statement in scatter\n    scatter (sample in samples) {\n        if
        (sample.quality_score >= quality_threshold) {\n            call process_high_quality
        {\n                input:\n                    sample = sample\n            }\n        }\n    }\n\n    #
        Create string arrays for the QC report\n    scatter (sample in samples) {\n        String
        sample_line = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:35:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3787'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"submittedFiles":{"workflow":"version 1.0\n## This workflow demonstrates
        the usage of conditional statements in WDL\n## by selectively processing samples
        based on their properties\n\nstruct SampleInfo {\n    String name\n    Float
        quality_score\n    String type\n}\n\nworkflow conditional_example {\n    input
        {\n        Array[SampleInfo] samples\n        Float quality_threshold\n    }\n\n    #
        Demonstrate if statement in scatter\n    scatter (sample in samples) {\n        if
        (sample.quality_score >= quality_threshold) {\n            call process_high_quality
        {\n                input:\n                    sample = sample\n            }\n        }\n    }\n\n    #
        Create string arrays for the QC report\n    scatter (sample in samples) {\n        String
        sample_line = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"status":"Submitted","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:35:55 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '3787'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:36:00 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4404'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"QueuedInCromwell","shardIndex":0,"backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z"},{"executionStatus":"QueuedInCromwell","shardIndex":2,"backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z"}],"conditional_example.run_qc_report":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:36:05 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '4844'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stdout","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stdout","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2"}],"conditional_example.run_qc_report":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stdout","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:36:10 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7747'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"jobId":"23951829","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"jobId":"23951828","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2"}],"conditional_example.run_qc_report":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"jobId":"23951830","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:36:15 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7882'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"jobId":"23951829","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"jobId":"23951828","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2"}],"conditional_example.run_qc_report":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"jobId":"23951830","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:36:20 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7882'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"jobId":"23951829","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"jobId":"23951828","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2"}],"conditional_example.run_qc_report":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"jobId":"23951830","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:36:25 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7882'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"jobId":"23951829","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"jobId":"23951828","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2"}],"conditional_example.run_qc_report":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"jobId":"23951830","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:36:30 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7882'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"jobId":"23951829","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0"},{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"jobId":"23951828","backend":"gizmo","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2"}],"conditional_example.run_qc_report":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"jobId":"23951830","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report"}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:36:35 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '7978'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"jobId":"23951829","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:00.158Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0"},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"23951828","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:35.400Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.840Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:34.529Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:35.400Z"},{"startTime":"2025-06-15T03:36:00.840Z","description":"RunningJob","endTime":"2025-06-15T03:36:34.529Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"23951830","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:37.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.847Z","description":"RunningJob","endTime":"2025-06-15T03:36:36.629Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.847Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:36.629Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:37.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:36:40 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '9844'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"23951829","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:41.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:40.737Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:41.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.843Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.843Z","description":"RunningJob","endTime":"2025-06-15T03:36:40.737Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"23951828","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:35.400Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.840Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:34.529Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:35.400Z"},{"startTime":"2025-06-15T03:36:00.840Z","description":"RunningJob","endTime":"2025-06-15T03:36:34.529Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"23951830","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:37.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.847Z","description":"RunningJob","endTime":"2025-06-15T03:36:36.629Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.847Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:36.629Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:37.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:36:45 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10743'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"QueuedInCromwell","shardIndex":-1,"backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:49.117Z"}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"23951829","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:41.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:40.737Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:41.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.843Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.843Z","description":"RunningJob","endTime":"2025-06-15T03:36:40.737Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"23951828","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:35.400Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.840Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:34.529Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:35.400Z"},{"startTime":"2025-06-15T03:36:00.840Z","description":"RunningJob","endTime":"2025-06-15T03:36:34.529Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"23951830","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:37.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.847Z","description":"RunningJob","endTime":"2025-06-15T03:36:36.629Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.847Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:36.629Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:37.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:36:50 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '10897'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize/execution/stdout","commandLine":"echo
        \"Multiple high-quality samples processed\"\necho \"Number of samples processed:
        2\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"messages":["Processing
        high quality normal sample sample1 (Q=95.5)","Processing high quality normal
        sample sample3 (Q=92.1)"],"report":"Multiple high-quality samples processed"},"backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:49.117Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize"}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"23951829","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:41.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:40.737Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:41.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.843Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.843Z","description":"RunningJob","endTime":"2025-06-15T03:36:40.737Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"23951828","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:35.400Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.840Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:34.529Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:35.400Z"},{"startTime":"2025-06-15T03:36:00.840Z","description":"RunningJob","endTime":"2025-06-15T03:36:34.529Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"23951830","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:37.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.847Z","description":"RunningJob","endTime":"2025-06-15T03:36:36.629Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.847Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:36.629Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:37.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:36:56 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11918'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Multiple high-quality samples processed\"\necho \"Number of samples processed:
        2\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"messages":["Processing
        high quality normal sample sample1 (Q=95.5)","Processing high quality normal
        sample sample3 (Q=92.1)"],"report":"Multiple high-quality samples processed"},"jobId":"23952192","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:49.117Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize"}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"23951829","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:41.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:40.737Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:41.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.843Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.843Z","description":"RunningJob","endTime":"2025-06-15T03:36:40.737Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"23951828","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:35.400Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.840Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:34.529Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:35.400Z"},{"startTime":"2025-06-15T03:36:00.840Z","description":"RunningJob","endTime":"2025-06-15T03:36:34.529Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"23951830","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:37.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.847Z","description":"RunningJob","endTime":"2025-06-15T03:36:36.629Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.847Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:36.629Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:37.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:37:01 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11963'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Multiple high-quality samples processed\"\necho \"Number of samples processed:
        2\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"messages":["Processing
        high quality normal sample sample1 (Q=95.5)","Processing high quality normal
        sample sample3 (Q=92.1)"],"report":"Multiple high-quality samples processed"},"jobId":"23952192","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:49.117Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize"}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"23951829","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:41.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:40.737Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:41.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.843Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.843Z","description":"RunningJob","endTime":"2025-06-15T03:36:40.737Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"23951828","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:35.400Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.840Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:34.529Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:35.400Z"},{"startTime":"2025-06-15T03:36:00.840Z","description":"RunningJob","endTime":"2025-06-15T03:36:34.529Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"23951830","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:37.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.847Z","description":"RunningJob","endTime":"2025-06-15T03:36:36.629Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.847Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:36.629Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:37.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:37:06 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11963'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Multiple high-quality samples processed\"\necho \"Number of samples processed:
        2\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"messages":["Processing
        high quality normal sample sample1 (Q=95.5)","Processing high quality normal
        sample sample3 (Q=92.1)"],"report":"Multiple high-quality samples processed"},"jobId":"23952192","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:49.117Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize"}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"23951829","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:41.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:40.737Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:41.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.843Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.843Z","description":"RunningJob","endTime":"2025-06-15T03:36:40.737Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"23951828","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:35.400Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.840Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:34.529Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:35.400Z"},{"startTime":"2025-06-15T03:36:00.840Z","description":"RunningJob","endTime":"2025-06-15T03:36:34.529Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"23951830","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:37.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.847Z","description":"RunningJob","endTime":"2025-06-15T03:36:36.629Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.847Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:36.629Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:37.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:37:11 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11963'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Multiple high-quality samples processed\"\necho \"Number of samples processed:
        2\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"messages":["Processing
        high quality normal sample sample1 (Q=95.5)","Processing high quality normal
        sample sample3 (Q=92.1)"],"report":"Multiple high-quality samples processed"},"jobId":"23952192","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:49.117Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize"}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"23951829","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:41.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:40.737Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:41.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.843Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.843Z","description":"RunningJob","endTime":"2025-06-15T03:36:40.737Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"23951828","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:35.400Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.840Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:34.529Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:35.400Z"},{"startTime":"2025-06-15T03:36:00.840Z","description":"RunningJob","endTime":"2025-06-15T03:36:34.529Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"23951830","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:37.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.847Z","description":"RunningJob","endTime":"2025-06-15T03:36:36.629Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.847Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:36.629Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:37.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:37:16 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11963'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"Running","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize/execution/stdout","backendStatus":"Running","commandLine":"echo
        \"Multiple high-quality samples processed\"\necho \"Number of samples processed:
        2\"","shardIndex":-1,"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"messages":["Processing
        high quality normal sample sample1 (Q=95.5)","Processing high quality normal
        sample sample3 (Q=92.1)"],"report":"Multiple high-quality samples processed"},"jobId":"23952192","backend":"gizmo","attempt":1,"start":"2025-06-15T03:36:49.117Z","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize"}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"23951829","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:41.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:40.737Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:41.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.843Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.843Z","description":"RunningJob","endTime":"2025-06-15T03:36:40.737Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"23951828","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:35.400Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.840Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:34.529Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:35.400Z"},{"startTime":"2025-06-15T03:36:00.840Z","description":"RunningJob","endTime":"2025-06-15T03:36:34.529Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"23951830","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:37.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.847Z","description":"RunningJob","endTime":"2025-06-15T03:36:36.629Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.847Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:36.629Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:37.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:37:21 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '11963'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Multiple high-quality samples processed\"\necho \"Number of samples processed:
        2\"","shardIndex":-1,"outputs":{"summary":"Multiple high-quality samples processed\nNumber
        of samples processed: 2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"messages":["Processing
        high quality normal sample sample1 (Q=95.5)","Processing high quality normal
        sample sample3 (Q=92.1)"],"report":"Multiple high-quality samples processed"},"returnCode":0,"jobId":"23952192","backend":"gizmo","start":"2025-06-15T03:36:49.117Z","end":"2025-06-15T03:37:23.401Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:50.831Z","description":"RunningJob","endTime":"2025-06-15T03:37:23.068Z"},{"startTime":"2025-06-15T03:36:50.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:50.826Z"},{"startTime":"2025-06-15T03:36:49.117Z","description":"Pending","endTime":"2025-06-15T03:36:49.117Z"},{"startTime":"2025-06-15T03:37:23.068Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:37:23.401Z"},{"startTime":"2025-06-15T03:36:50.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:50.831Z"},{"startTime":"2025-06-15T03:36:49.117Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:50.826Z"}]}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"23951829","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:41.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:40.737Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:41.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.843Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.843Z","description":"RunningJob","endTime":"2025-06-15T03:36:40.737Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"23951828","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:35.400Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.840Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:34.529Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:35.400Z"},{"startTime":"2025-06-15T03:36:00.840Z","description":"RunningJob","endTime":"2025-06-15T03:36:34.529Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"23951830","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:37.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.847Z","description":"RunningJob","endTime":"2025-06-15T03:36:36.629Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.847Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:36.629Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:37.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"}]}]},"outputs":{},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Running","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:37:26 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '12879'
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - gizmok97.fhcrc.org:36405
      user-agent:
      - python-httpx/0.28.1
    method: GET
    uri: https://gizmok97.fhcrc.org:36405/api/workflows/v1/48e9a4aa-b055-4816-87d2-c49f204d30a0/metadata?expandSubWorkflows=true
  response:
    body:
      string: '{"workflowName":"conditional_example","workflowProcessingEvents":[{"cromwellId":"cromid-3f4f81b","description":"Finished","timestamp":"2025-06-15T03:37:25.840Z","cromwellVersion":"87"},{"cromwellId":"cromid-3f4f81b","description":"PickedUp","timestamp":"2025-06-15T03:35:53.907Z","cromwellVersion":"87"}],"actualWorkflowLanguageVersion":"1.0","submittedFiles":{"workflow":"version
        1.0\n## This workflow demonstrates the usage of conditional statements in
        WDL\n## by selectively processing samples based on their properties\n\nstruct
        SampleInfo {\n    String name\n    Float quality_score\n    String type\n}\n\nworkflow
        conditional_example {\n    input {\n        Array[SampleInfo] samples\n        Float
        quality_threshold\n    }\n\n    # Demonstrate if statement in scatter\n    scatter
        (sample in samples) {\n        if (sample.quality_score >= quality_threshold)
        {\n            call process_high_quality {\n                input:\n                    sample
        = sample\n            }\n        }\n    }\n\n    # Create string arrays for
        the QC report\n    scatter (sample in samples) {\n        String sample_line
        = \"~{sample.name},~{sample.type},~{sample.quality_score}\"\n    }\n\n    #
        Demonstrate single conditional task\n    call run_qc_report {\n        input:\n            sample_lines
        = sample_line\n    }\n\n    # Calculate number of high quality samples\n    Int
        num_high_quality = length(select_all(process_high_quality.message))\n\n    #
        Demonstrate separate conditional blocks (WDL 1.0 approach instead of if/else)\n    Boolean
        has_multiple_samples = num_high_quality > 1\n    \n    if (has_multiple_samples)
        {\n        call summarize {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Multiple
        high-quality samples processed\"\n        }\n    }\n\n    if (!has_multiple_samples)
        {\n        call summarize as summarize_few {\n            input:\n                messages
        = select_all(process_high_quality.message),\n                report = \"Few
        or no high-quality samples found\"\n        }\n    }\n\n    output {\n        String
        final_summary = select_first([summarize.summary, summarize_few.summary])\n        File
        qc_report = run_qc_report.report_csv\n    }\n}\n\ntask process_high_quality
        {\n    input {\n        SampleInfo sample\n    }\n\n    command <<<\n        echo
        \"Processing high quality ~{sample.type} sample ~{sample.name} (Q=~{sample.quality_score})\"\n    >>>\n\n    output
        {\n        String message = read_string(stdout())\n    }\n\n    runtime {\n        docker:
        \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask run_qc_report {\n    input {\n        Array[String]
        sample_lines\n    }\n\n    command <<<\n        echo \"Quality Score Summary:\"\n        echo
        \"Sample Name,Type,Quality Score\" > report.csv\n        ~{sep=\"\\n\" sample_lines}
        >> report.csv\n        cat report.csv\n    >>>\n\n    output {\n        String
        report = read_string(stdout())\n        File report_csv = \"report.csv\"\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n\ntask summarize
        {\n    input {\n        Array[String] messages\n        String report\n    }\n\n    command
        <<<\n        echo \"~{report}\"\n        echo \"Number of samples processed:
        ~{length(messages)}\"\n    >>>\n\n    output {\n        String summary = read_string(stdout())\n    }\n\n    runtime
        {\n        docker: \"ubuntu:noble-20241118.1\"\n    }\n}\n","root":"","options":"{\n  \"read_from_cache\":
        false,\n  \"workflow_failure_mode\": \"ContinueWhilePossible\",\n  \"write_to_cache\":
        false\n}","inputs":"{\"conditional_example.quality_threshold\":90.0,\"conditional_example.samples\":[{\"name\":\"sample1\",\"quality_score\":95.5,\"type\":\"normal\"},{\"name\":\"sample2\",\"quality_score\":85.3,\"type\":\"tumor\"},{\"name\":\"sample3\",\"quality_score\":92.1,\"type\":\"normal\"}]}","workflowUrl":"","labels":"{}"},"calls":{"conditional_example.summarize":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Multiple high-quality samples processed\"\necho \"Number of samples processed:
        2\"","shardIndex":-1,"outputs":{"summary":"Multiple high-quality samples processed\nNumber
        of samples processed: 2"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"messages":["Processing
        high quality normal sample sample1 (Q=95.5)","Processing high quality normal
        sample sample3 (Q=92.1)"],"report":"Multiple high-quality samples processed"},"returnCode":0,"jobId":"23952192","backend":"gizmo","start":"2025-06-15T03:36:49.117Z","end":"2025-06-15T03:37:23.401Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-summarize","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:50.831Z","description":"RunningJob","endTime":"2025-06-15T03:37:23.068Z"},{"startTime":"2025-06-15T03:36:50.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:50.826Z"},{"startTime":"2025-06-15T03:36:49.117Z","description":"Pending","endTime":"2025-06-15T03:36:49.117Z"},{"startTime":"2025-06-15T03:37:23.068Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:37:23.401Z"},{"startTime":"2025-06-15T03:36:50.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:50.831Z"},{"startTime":"2025-06-15T03:36:49.117Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:50.826Z"}]}],"conditional_example.process_high_quality":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample1 (Q=95.5)\"","shardIndex":0,"outputs":{"message":"Processing
        high quality normal sample sample1 (Q=95.5)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":95.5,"name":"sample1","type":"normal"}},"returnCode":0,"jobId":"23951829","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:41.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-0","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:40.737Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:41.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.843Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.843Z","description":"RunningJob","endTime":"2025-06-15T03:36:40.737Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"}]},{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Processing high quality normal sample sample3 (Q=92.1)\"","shardIndex":2,"outputs":{"message":"Processing
        high quality normal sample sample3 (Q=92.1)"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample":{"quality_score":92.1,"name":"sample3","type":"normal"}},"returnCode":0,"jobId":"23951828","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:35.400Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-process_high_quality/shard-2","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.840Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:34.529Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:35.400Z"},{"startTime":"2025-06-15T03:36:00.840Z","description":"RunningJob","endTime":"2025-06-15T03:36:34.529Z"}]}],"conditional_example.run_qc_report":[{"executionStatus":"Done","stdout":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stdout","backendStatus":"Done","commandLine":"echo
        \"Quality Score Summary:\"\necho \"Sample Name,Type,Quality Score\" > report.csv\nsample1,normal,95.5\nsample2,tumor,85.3\nsample3,normal,92.1
        >> report.csv\ncat report.csv","shardIndex":-1,"outputs":{"report":"Quality
        Score Summary:\nSample Name,Type,Quality Score","report_csv":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/report.csv"},"runtimeAttributes":{"failOnStderr":"false","partition":"campus-new","continueOnReturnCode":"0","docker":"ubuntu:noble-20241118.1","modules":"","gpus":"0","maxRetries":"0","cpu":"1","memory":"1.953125
        GB"},"callCaching":{"allowResultReuse":false,"effectiveCallCachingMode":"CallCachingOff"},"inputs":{"sample_lines":["sample1,normal,95.5","sample2,tumor,85.3","sample3,normal,92.1"]},"returnCode":0,"jobId":"23951830","backend":"gizmo","start":"2025-06-15T03:36:00.158Z","end":"2025-06-15T03:36:37.402Z","dockerImageUsed":"ubuntu@sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab","stderr":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/stderr","callRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report","attempt":1,"executionEvents":[{"startTime":"2025-06-15T03:36:00.847Z","description":"RunningJob","endTime":"2025-06-15T03:36:36.629Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"Pending","endTime":"2025-06-15T03:36:00.158Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"PreparingJob","endTime":"2025-06-15T03:36:00.847Z"},{"startTime":"2025-06-15T03:36:00.158Z","description":"RequestingExecutionToken","endTime":"2025-06-15T03:36:00.826Z"},{"startTime":"2025-06-15T03:36:36.629Z","description":"UpdatingJobStore","endTime":"2025-06-15T03:36:37.402Z"},{"startTime":"2025-06-15T03:36:00.826Z","description":"WaitingForValueStore","endTime":"2025-06-15T03:36:00.826Z"}]}]},"outputs":{"conditional_example.qc_report":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0/call-run_qc_report/execution/report.csv","conditional_example.final_summary":"Multiple
        high-quality samples processed\nNumber of samples processed: 2"},"workflowRoot":"/redacted/_DaSL/user/svc_proof_test/cromwell-scratch/conditional_example/48e9a4aa-b055-4816-87d2-c49f204d30a0","actualWorkflowLanguage":"WDL","status":"Succeeded","end":"2025-06-15T03:37:25.840Z","start":"2025-06-15T03:35:53.907Z","id":"48e9a4aa-b055-4816-87d2-c49f204d30a0","inputs":{"quality_threshold":90.0,"samples":[{"quality_score":95.5,"name":"sample1","type":"normal"},{"quality_score":85.3,"name":"sample2","type":"tumor"},{"quality_score":92.1,"name":"sample3","type":"normal"}]},"labels":{"cromwell-workflow-id":"cromwell-48e9a4aa-b055-4816-87d2-c49f204d30a0"},"submission":"2025-06-15T03:34:59.464Z"}'
    headers:
      Connection:
      - keep-alive
      Content-Type:
      - application/json
      Date:
      - Sun, 15 Jun 2025 03:37:31 GMT
      Server:
      - nginx/1.25.3
      Transfer-Encoding:
      - chunked
      content-length:
      - '13326'
    status:
      code: 200
      message: OK
version: 1
